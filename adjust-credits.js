// adjust-credits.js
require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

async function adjustCredits() {
    const args = process.argv.slice(2);
    
    if (args.length < 3) {
        console.log('‚ùå Usage: node adjust-credits.js <userId> <action> <amount>');
        console.log('Actions: set, add, subtract');
        console.log('\nExamples:');
        console.log('  node adjust-credits.js user_123 set 5      # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 5 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï');
        console.log('  node adjust-credits.js user_123 subtract 55 # ‡∏•‡∏î 55 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï');
        console.log('  node adjust-credits.js user_123 add 10     # ‡πÄ‡∏û‡∏¥‡πà‡∏° 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï');
        process.exit(1);
    }
    
    const userId = args[0];
    const action = args[1].toLowerCase();
    const amount = parseFloat(args[2]);
    
    try {
        // ‡∏î‡∏π‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const current = await pool.query(
            'SELECT balance FROM user_credits WHERE user_id = $1',
            [userId]
        );
        
        const currentBalance = current.rows[0]?.balance || 0;
        console.log(`\nüí∞ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentBalance}`);
        
        let newBalance;
        let description;
        
        switch(action) {
            case 'set':
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà
                newBalance = amount;
                description = `‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏õ‡πá‡∏ô ${amount} (‡∏à‡∏≤‡∏Å ${currentBalance})`;
                break;
                
            case 'subtract':
            case 'remove':
                // ‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                newBalance = currentBalance - amount;
                description = `‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ${amount} ‡∏ö‡∏≤‡∏ó`;
                break;
                
            case 'add':
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                newBalance = currentBalance + amount;
                description = `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ${amount} ‡∏ö‡∏≤‡∏ó`;
                break;
                
            default:
                console.log('‚ùå Action ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ: set, add, subtract');
                process.exit(1);
        }
        
        if (newBalance < 0) {
            console.log('‚ö†Ô∏è  ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏•‡∏ö! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n)');
            // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞ set ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏ó‡∏ô
            newBalance = 0;
            console.log('   ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏ó‡∏ô');
        }
        
        await pool.query('BEGIN');
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transaction
        const adjustment = currentBalance - newBalance;
        await pool.query(`
            INSERT INTO credit_transactions 
            (user_id, type, amount, description, payment_method, admin_note)
            VALUES ($1, $2, $3, $4, $5, $6)
        `, [
            userId,
            adjustment > 0 ? 'USE' : 'ADD',
            Math.abs(adjustment),
            description,
            'manual',
            `Admin adjustment: ${action} ${amount}`
        ]);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà
        await pool.query(`
            UPDATE user_credits 
            SET balance = $2, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = $1
        `, [userId, newBalance]);
        
        await pool.query('COMMIT');
        
        console.log(`\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
        console.log(`   ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏î‡∏¥‡∏°: ${currentBalance}`);
        console.log(`   ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà: ${newBalance}`);
        console.log(`   ${adjustment > 0 ? '‡∏•‡∏î' : '‡πÄ‡∏û‡∏¥‡πà‡∏°'}: ${Math.abs(adjustment)}`);
        
    } catch (error) {
        await pool.query('ROLLBACK');
        console.error('‚ùå Error:', error.message);
    } finally {
        await pool.end();
    }
}

adjustCredits();