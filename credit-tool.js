// credit-tool.js - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏î
require('dotenv').config();
const db = require('./database');

async function creditTool() {
    const [userId, action, amount] = process.argv.slice(2);
    
    if (!userId || !action || !amount) {
        console.log(`
üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
  node credit-tool.js [userId] add [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]    - ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
  node credit-tool.js [userId] use [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]    - ‡∏´‡∏±‡∏Å‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
  node credit-tool.js [userId] check          - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
  node credit-tool.js user_123 add 60    # ‡πÄ‡∏ï‡∏¥‡∏° 60
  node credit-tool.js user_123 use 55    # ‡∏´‡∏±‡∏Å 55
  node credit-tool.js user_123 check     # ‡∏î‡∏π‡∏¢‡∏≠‡∏î
        `);
        return;
    }
    
    try {
        switch(action) {
            case 'add':
                await db.addCredits(userId, parseFloat(amount), 
                    '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏î‡∏¢ Admin', null, 'Manual add');
                break;
                
            case 'use':
                await db.useCredits(userId, parseFloat(amount), {
                    requestCost: parseFloat(amount),
                    description: '‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏î‡∏¢ Admin'
                });
                break;
                
            case 'check':
                const balance = await db.getUserCredits(userId);
                console.log(`üí∞ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: ${balance}`);
                return;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà
        const newBalance = await db.getUserCredits(userId);
        console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${newBalance}`);
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    } finally {
        await db.pool.end();
    }
}

creditTool();