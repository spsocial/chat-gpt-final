console.log("Script Version: 5.1.0 - Added Image Prompt feature");
// Suppress WM Failed warning
if (typeof window !== 'undefined') {
    window.WM = window.WM || {};
    window.wb_service = window.wb_service || {};
}

// PROFESSIONAL VERSION - NO ERRORS
console.log("Script loaded - Professional Version 5.1");

// ========== GLOBAL CONFIGURATION ==========
const API_URL = window.location.origin + '/api';
const MAX_IMAGE_SIZE = 800;
let isProcessing = false;
let processingMode = null;

// Feature flags
const FEATURES = {
    GOOGLE_AUTH: false  // Set to true when ready to enable Google Sign-In
};

// Simple cloud storage using a public service (for demo only)
// ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ backend API ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
window.CLOUD_STORAGE_URL = 'https://api.npoint.io/f1c6b0f3e8b9d2a4c5e7'; // Demo endpoint

// ========== GLOBAL VARIABLES ==========
let currentMode = 'promptmaster';
let messageId = 0;
let characterLibrary = [];
let currentCharacterProfile = null;
let userId = '';
let googleUser = null;

// Function to ensure userId is ready
function ensureUserId() {
    if (!userId) {
        // Check if we have a Google user stored
        const storedGoogleUser = localStorage.getItem('googleUser');
        if (storedGoogleUser) {
            googleUser = JSON.parse(storedGoogleUser);
            userId = googleUser.userId;
        } else {
            // Fall back to regular user ID
            userId = localStorage.getItem('userId');
            if (!userId) {
                userId = 'user_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('userId', userId);
                
                // Save as original userId for tracking free credits
                if (!localStorage.getItem('originalUserId')) {
                    localStorage.setItem('originalUserId', userId);
                }
            }
        }
    }
    return userId;
}
let userCredits = 0;
let lastPromptData = null;


// ========== TEMPLATES DATA ==========
const promptTemplates = {
    action: [
        {
            emoji: "üí•",
            title: "‡∏â‡∏≤‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏°‡∏±‡∏ô‡∏™‡πå‡πÜ",
            prompt: "High-octane explosion sequence with debris flying in slow motion, dynamic camera shake, orange and blue color grading, Michael Bay style cinematography, practical effects enhanced with CGI, 4K resolution",
            category: "action"
        },
        {
            emoji: "ü•ä",
            title: "‡∏â‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ",
            prompt: "Intense hand-to-hand combat scene, rapid cuts between strikes, sweat droplets in slow motion, dramatic lighting with shadows, John Wick style choreography, steady cam following the action",
            category: "action"
        },
        {
            emoji: "üèÉ",
            title: "‡∏â‡∏≤‡∏Å‡πÑ‡∏•‡πà‡∏•‡πà‡∏≤",
            prompt: "Heart-pounding chase sequence through crowded streets, parkour movements, handheld camera work, quick cuts, motion blur, adrenaline-fueled cinematography, Mission Impossible style",
            category: "action"
        }
    ],
    cinematic: [
        {
            emoji: "üåÖ",
            title: "Golden Hour Magic",
            prompt: "Cinematic golden hour shot with warm sunlight streaming through, lens flares, anamorphic aspect ratio, shallow depth of field, Roger Deakins style cinematography, 35mm film aesthetic",
            category: "cinematic"
        },
        {
            emoji: "üåßÔ∏è",
            title: "‡∏â‡∏≤‡∏Å‡∏ù‡∏ô‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤",
            prompt: "Emotional rain scene with water droplets on lens, moody blue color grading, slow motion raindrops, backlit silhouettes, Blade Runner 2049 aesthetic, atmospheric fog",
            category: "cinematic"
        },
        {
            emoji: "üåÉ",
            title: "Neon Noir",
            prompt: "Cyberpunk cityscape at night, neon lights reflecting on wet asphalt, volumetric fog, pink and cyan color palette, wide establishing shot, Blade Runner inspired, ultra wide lens",
            category: "cinematic"
        }
    ],
    nature: [
        {
            emoji: "üèîÔ∏è",
            title: "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£",
            prompt: "Epic mountain landscape with morning mist, drone aerial shot ascending over peaks, golden sunrise light, Planet Earth documentary style, 8K resolution, majestic orchestral mood",
            category: "nature"
        },
        {
            emoji: "üåä",
            title: "‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡πÇ‡∏•‡πÇ‡∏°",
            prompt: "Ocean waves in ultra slow motion, underwater to above water transition, crystal clear turquoise water, sunlight rays penetrating surface, BBC Blue Planet style cinematography",
            category: "nature"
        },
        {
            emoji: "ü¶Ö",
            title: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤ Documentary",
            prompt: "Wildlife documentary shot following eagle in flight, smooth gimbal tracking, telephoto lens compression, National Geographic style, crisp 4K detail, natural lighting",
            category: "nature"
        }
    ],
    emotion: [
        {
            emoji: "üíï",
            title: "‡∏â‡∏≤‡∏Å‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å",
            prompt: "Romantic scene with soft bokeh background, warm candlelight, intimate close-ups, handheld camera for natural movement, golden hour window light, film grain texture",
            category: "emotion"
        },
        {
            emoji: "üò¢",
            title: "‡∏â‡∏≤‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤",
            prompt: "Emotional dramatic scene, single tear rolling down cheek in extreme close-up, desaturated color grading, soft natural lighting, shallow focus, A24 film aesthetic",
            category: "emotion"
        },
        {
            emoji: "üòä",
            title: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏•‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à",
            prompt: "Joyful celebration scene with confetti falling in slow motion, warm color grading, lens flares, dynamic camera movement, uplifting atmosphere, commercial style cinematography",
            category: "emotion"
        }
    ]
};

// ========== FAVORITES MANAGEMENT ==========
function loadFavorites() {
    return JSON.parse(localStorage.getItem('veoFavorites') || '[]');
}

function saveFavorites(favorites) {
    localStorage.setItem('veoFavorites', JSON.stringify(favorites));
    updateFavoritesCount();
}

function updateFavoritesCount() {
    const favorites = loadFavorites();
    const countElement = document.getElementById('favoritesCount');
    if (countElement) {
        countElement.textContent = favorites.length || '';
    }
}

function addToFavorites(promptText) {
    const favorites = loadFavorites();
    const newFavorite = {
        id: Date.now(),
        prompt: promptText,
        date: new Date().toISOString(),
        rating: lastPromptData?.rating || 0
    };
    
    favorites.unshift(newFavorite);
    saveFavorites(favorites);
    
    // ‡πÅ‡∏™‡∏î‡∏á notification
    showNotification('‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Favorites ‡πÅ‡∏•‡πâ‡∏ß!', 'success');
    return newFavorite.id;
}

function removeFromFavorites(id) {
    const favorites = loadFavorites();
    const filtered = favorites.filter(fav => fav.id !== id);
    saveFavorites(filtered);
    displayFavorites(); // Refresh display
}

function isFavorited(promptText) {
    const favorites = loadFavorites();
    return favorites.some(fav => fav.prompt === promptText);
}

// ========== TEMPLATES UI ==========
function showTemplates() {
    document.getElementById('templatesModal').style.display = 'flex';
    const grid = document.getElementById('templatesGrid');
    if (!document.getElementById('musicVideoCard')) {
        const musicCard = document.createElement('div');
        musicCard.id = 'musicVideoCard';
        musicCard.className = 'template-card';
        musicCard.style.background = 'linear-gradient(135deg, rgba(245, 158, 11, 0.2), rgba(220, 38, 38, 0.2))';
        musicCard.style.border = '2px solid #f59e0b';
        musicCard.innerHTML = `
            <div class="template-emoji">üéµ</div>
            <div class="template-title">Music Video Template</div>
            <div class="template-preview">‡∏™‡∏£‡πâ‡∏≤‡∏á MV ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        `;
        musicCard.onclick = () => {
            closeTemplates();
            showMusicVideoForm();
        };
        grid.insertBefore(musicCard, grid.firstChild);
    }
    filterTemplates('all');
}

function closeTemplates() {
    document.getElementById('templatesModal').style.display = 'none';
}

function filterTemplates(category) {
    // Update active button
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.textContent.toLowerCase().includes(category) || category === 'all') {
            btn.classList.add('active');
        }
    });
    
    const grid = document.getElementById('templatesGrid');
    grid.innerHTML = '';
    
    // Get templates
    let templates = [];
    if (category === 'all') {
        templates = Object.values(promptTemplates).flat();
    } else {
        templates = promptTemplates[category] || [];
    }
    
    // Display templates
    templates.forEach(template => {
        const card = document.createElement('div');
        card.className = 'template-card';
        card.innerHTML = `
            <div class="template-emoji">${template.emoji}</div>
            <div class="template-title">${template.title}</div>
            <div class="template-preview">${template.prompt}</div>
        `;
        card.onclick = () => useTemplate(template.prompt);
        grid.appendChild(card);
    });
}

function useTemplate(prompt) {
    document.getElementById('messageInput').value = prompt;
    closeTemplates();
    
    // Auto scroll to input
    document.getElementById('messageInput').scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
    });
    
    showNotification('üìã Template copied to input!', 'success');
}

// ========== FAVORITES UI ==========
function showFavorites() {
    document.getElementById('favoritesModal').style.display = 'flex';
    displayFavorites();
}

function closeFavorites() {
    document.getElementById('favoritesModal').style.display = 'none';
}

function displayFavorites() {
    const favorites = loadFavorites();
    const grid = document.getElementById('favoritesGrid');
    
    if (favorites.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">‚≠ê</div>
                <div class="empty-state-text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Favorites<br>‡∏Å‡∏î‡∏î‡∏≤‡∏ß‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</div>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = favorites.map(fav => `
        <div class="favorite-item">
            <button class="remove-fav-btn" onclick="removeFromFavorites(${fav.id})">√ó</button>
            <div class="favorite-content">${fav.prompt}</div>
            <div class="favorite-meta">
                <span>${new Date(fav.date).toLocaleDateString('th-TH')}</span>
                <div class="favorite-actions">
                    <button class="fav-action-btn" onclick="useFavorite('${encodeURIComponent(fav.prompt)}')">
                        üìù ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    </button>
                    <button class="fav-action-btn" onclick="shareFavorite('${encodeURIComponent(fav.prompt)}')">
                        üì§ ‡πÅ‡∏ä‡∏£‡πå
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

function useFavorite(encodedPrompt) {
    const prompt = decodeURIComponent(encodedPrompt);
    document.getElementById('messageInput').value = prompt;
    closeFavorites();
    
    document.getElementById('messageInput').scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
    });
}

function shareFavorite(encodedPrompt) {
    const prompt = decodeURIComponent(encodedPrompt);
    sharePrompt(prompt);
}

// ========== SHARE FUNCTION ==========
async function sharePrompt(promptText) {
    const shareData = {
        title: 'Veo 3 Prompt Generator',
        text: `"${promptText}"\n\n‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢`,
        url: 'https://www.promptdee.net'
    };
    
    try {
        if (navigator.share && window.innerWidth <= 768) {
            await navigator.share(shareData);
        } else {
            // Desktop fallback - copy to clipboard
            const fullText = `${shareData.text} ${shareData.url}`;
            await navigator.clipboard.writeText(fullText);
            showNotification('üìã Copied to clipboard!', 'success');
        }
    } catch (error) {
        console.error('Error sharing:', error);
    }
}

// ========== NOTIFICATION SYSTEM ==========
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10b981' : '#3b82f6'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-family: 'Kanit', sans-serif;
        font-size: 14px;
        z-index: 9999;
        animation: slideIn 0.3s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ========== ANNOUNCEMENT POPUP SYSTEM ==========
const ANNOUNCEMENT_KEY = 'veo_announcement';
const DONT_SHOW_KEY = 'veo_announcement_dont_show';
const LAST_VISIT_KEY = 'veo_last_visit';
const THREE_HOURS = 3 * 60 * 60 * 1000; // 3 hours in milliseconds
const FIVE_MINUTES = 5 * 60 * 1000; // 5 minutes in milliseconds

// Current announcement version (change this when you have new announcements)
const CURRENT_ANNOUNCEMENT_VERSION = '5.1.0';

function shouldShowAnnouncement() {
    const now = new Date().getTime();
    const lastVisit = localStorage.getItem(LAST_VISIT_KEY);
    const lastAnnouncementVersion = localStorage.getItem(ANNOUNCEMENT_KEY);
    const dontShowUntil = localStorage.getItem(DONT_SHOW_KEY);
    
    // Update last visit
    localStorage.setItem(LAST_VISIT_KEY, now);
    
    // Check if user selected "don't show for 3 hours"
    if (dontShowUntil && now < parseInt(dontShowUntil)) {
        console.log('Announcement hidden for 3 hours');
        return false;
    }
    
    // Always show if it's a new announcement version
    if (lastAnnouncementVersion !== CURRENT_ANNOUNCEMENT_VERSION) {
        console.log('New announcement version');
        return true;
    }
    
    // Show if first visit ever
    if (!lastVisit) {
        console.log('First visit');
        return true;
    }
    
    const timeSinceLastVisit = now - parseInt(lastVisit);
    
    // Show if hasn't visited for more than 5 minutes (‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á‡∏à‡∏≤‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    if (timeSinceLastVisit > FIVE_MINUTES) {
        console.log('Haven\'t visited for 5+ minutes');
        return true;
    }
    
    // Show every page refresh if no "don't show" is active
    if (!dontShowUntil) {
        console.log('Showing on refresh');
        return true;
    }
    
    return false;
}

function showAnnouncement() {
    const popup = document.getElementById('announcementPopup');
    if (popup) {
        popup.style.display = 'flex';
        popup.classList.add('show');
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
    }
}

function closeAnnouncement(updateVersion = false) {
    const popup = document.getElementById('announcementPopup');
    const dontShowCheckbox = document.getElementById('dontShowFor3Hours');
    
    if (popup) {
        // Fade out animation
        popup.style.animation = 'fadeOut 0.3s ease';
        
        setTimeout(() => {
            popup.style.display = 'none';
            popup.classList.remove('show');
            
            // Restore body scroll
            document.body.style.overflow = '';
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° FAB
showAllFABButtons();
            
            // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏° FAB ‡∏´‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î popup
            const fabButtons = document.querySelectorAll('.fab-announcement, .fab-course, .fab-tools');
            fabButtons.forEach(btn => {
                if (btn) {
                    btn.style.display = 'flex';
                    btn.style.visibility = 'visible';
                    btn.style.opacity = '1';
                }
            });
            
        }, 300);
    }
    
    // Update version if OK button was clicked
    if (updateVersion) {
        localStorage.setItem(ANNOUNCEMENT_KEY, CURRENT_ANNOUNCEMENT_VERSION);
    }
    
    // Handle "don't show for 3 hours"
    if (dontShowCheckbox && dontShowCheckbox.checked) {
        const dontShowUntil = new Date().getTime() + THREE_HOURS;
        localStorage.setItem(DONT_SHOW_KEY, dontShowUntil);
    }
}

// Add fade out animation
const fadeOutStyle = document.createElement('style');
fadeOutStyle.textContent = `
    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }
`;
document.head.appendChild(fadeOutStyle);

// Initialize announcement on page load
document.addEventListener('DOMContentLoaded', () => {
    // Check and show announcement after a short delay
    setTimeout(() => {
        if (shouldShowAnnouncement()) {
            showAnnouncement();
        }
    }, 1000); // Show after 1 second
});

// Auto-resize on input
    const messageInput = document.getElementById('messageInput');
    messageInput.addEventListener('input', autoResize);

     // Keyboard shortcuts
    messageInput.addEventListener('keydown', (e) => {
        // Ctrl+E = Open full editor
        if (e.ctrlKey && e.key === 'e') {
            e.preventDefault();
            openFullEditor();
        }
    });

// Close popup when clicking outside
document.addEventListener('click', (e) => {
    const popup = document.getElementById('announcementPopup');
    if (e.target === popup) {
        closeAnnouncement(false);
    }
});

// Add keyboard support (ESC to close)
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        const popup = document.getElementById('announcementPopup');
        if (popup && popup.style.display === 'flex') {
            closeAnnouncement(false);
        }
    }
});

// Add CSS animation
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// Initialize favorites count on load
document.addEventListener('DOMContentLoaded', () => {
    updateFavoritesCount();
});

// Chat history for each mode
const chatHistory = {
    general: '',
    character: '',
    multichar: '',   
    image: '',
    chat: ''  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
};

// Initialize image URLs array globally
window.imageUrls = [];

// Track if announcement has been viewed
function markAnnouncementAsViewed() {
    const fab = document.querySelector('.fab-announcement');
    if (fab) {
        fab.classList.add('viewed');
        sessionStorage.setItem('announcement_viewed', 'true');
    }
}

// Check if announcement was viewed in this session
function checkAnnouncementViewed() {
    const viewed = sessionStorage.getItem('announcement_viewed');
    const fab = document.querySelector('.fab-announcement');
    if (viewed && fab) {
        fab.classList.add('viewed');
    }
}

// Update showAnnouncement function
const originalShowAnnouncement = showAnnouncement;
showAnnouncement = function() {
    originalShowAnnouncement();
    markAnnouncementAsViewed();
};

// Initialize on load
document.addEventListener('DOMContentLoaded', () => {
    checkAnnouncementViewed();
});

// Optional: Hide FAB when scrolling down, show when scrolling up
let lastScrollTop = 0;
let scrollTimeout;

window.addEventListener('scroll', () => {
    clearTimeout(scrollTimeout);
    
    const fab = document.querySelector('.fab-announcement');
    if (!fab) return;
    
    const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
    
    if (currentScroll > lastScrollTop && currentScroll > 100) {
        // Scrolling down
        fab.style.transform = 'translateX(200px)';
    } else {
        // Scrolling up
        fab.style.transform = 'translateX(0)';
    }
    
    lastScrollTop = currentScroll;
    
    // Reset position after scrolling stops
    scrollTimeout = setTimeout(() => {
        fab.style.transform = 'translateX(0)';
    }, 1000);
});

// ========== CREDIT SYSTEM FUNCTIONS ==========
// Track free credits usage
function trackFreeCreditsUsage(amount) {
    const originalUserId = localStorage.getItem('originalUserId') || userId;
    const today = new Date().toDateString();
    const lastResetDate = localStorage.getItem(`freeCreditsResetDate_${originalUserId}`);
    
    // Reset if new day
    if (lastResetDate !== today) {
        localStorage.setItem(`usedFreeCredits_${originalUserId}`, '0');
        localStorage.setItem(`freeCreditsResetDate_${originalUserId}`, today);
        console.log('New day detected, free credits reset');
    }
    
    const usedFreeCredits = parseFloat(localStorage.getItem(`usedFreeCredits_${originalUserId}`) || '0');
    const newUsedAmount = usedFreeCredits + amount;
    
    // Store the used amount
    localStorage.setItem(`usedFreeCredits_${originalUserId}`, newUsedAmount.toString());
    
    console.log('Free credits used today:', newUsedAmount, 'of 5');
}

async function loadUserCredits() {
    try {
        console.log('üîç Loading credits for user:', userId);
        const response = await fetch(`${API_URL}/credits/${userId}`);
        const data = await response.json();
        
        console.log('üí∞ Credits data:', data);
        userCredits = data.currentCredits || 0;
        
        // Track free credit usage if not logged in
        const linkedAccount = localStorage.getItem('linkedAccount');
        if (!linkedAccount && data.previousCredits && data.currentCredits < data.previousCredits) {
            const used = data.previousCredits - data.currentCredits;
            trackFreeCreditsUsage(used);
        }
        
        updateCreditDisplay();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ - ‡πÉ‡∏ä‡πâ userCredits ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°
        const mobileCreditsBalance = document.getElementById('mobileCreditsBalance');
        if (mobileCreditsBalance) {
            mobileCreditsBalance.textContent = userCredits.toFixed(2);
        }
    } catch (error) {
        console.error('Error loading credits:', error);
    }
}

async function loadTotalPurchasedCredits() {
    try {
        const response = await fetch(`${API_URL}/user-credits-info/${userId}`);
        const data = await response.json();
        
        if (data.success) {
            const totalPurchased = data.totalPurchased || 0;
            document.getElementById('totalPurchasedCredits').textContent = totalPurchased;
        }
    } catch (error) {
        console.error('Error loading total purchased credits:', error);
    }
}
function updateCreditDisplay() {
    const creditDisplay = document.getElementById('creditDisplay');
    if (!creditDisplay) {
        const usageDisplay = document.querySelector('.usage-display');
        const creditDiv = document.createElement('div');
        creditDiv.id = 'creditDisplay';
        creditDiv.className = 'credit-info';
        creditDiv.innerHTML = `
            <div class="credit-balance">
                <span class="credit-icon">üí∞</span>
                <span class="credit-amount">${userCredits.toFixed(2)}</span>
                <span class="credit-label">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</span>
            </div>
            <button class="add-credit-btn" onclick="showCreditPackages()">
                <span>+</span> ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏ß‡πá‡∏ö
            </button>
        `;
        usageDisplay.appendChild(creditDiv);
    } else {
        creditDisplay.querySelector('.credit-amount').textContent = userCredits.toFixed(2);
    }
}

async function showCreditPackages() {
    try {
        const response = await fetch(`${API_URL}/credit-packages`);
        const packages = await response.json();
        
        const modal = document.createElement('div');
        modal.className = 'credit-modal';
        modal.innerHTML = `
            <div class="credit-modal-content">
                <div class="modal-header">
                    <h2>üíñ ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</h2>
                    <button class="close-btn" onclick="closeCreditModal()">‚úï</button>
                </div>
                
                <div style="text-align: center; padding: 20px; background: rgba(236, 72, 153, 0.1); border-radius: 12px; margin-bottom: 24px;">
                    <p style="font-size: 16px; color: var(--text); margin: 0;">
                        üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤<br>
                        <span style="font-size: 14px; color: var(--text-secondary);">
                            ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                        </span>
                    </p>
                </div>
                
                <div style="background: rgba(147, 51, 234, 0.1); padding: 16px; border-radius: 8px; margin-bottom: 20px; text-align: center;">
                    <p style="color: var(--primary); font-weight: 600; margin: 0;">
                        ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô üëá
                    </p>
                </div>
                
                <div class="packages-grid">
                    ${packages.map(pkg => `
                        <div class="package-card ${pkg.is_popular ? 'popular' : ''}">
                            ${pkg.is_popular ? '<div class="popular-badge">‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°!</div>' : ''}
                            <h3>${pkg.name}</h3>
                            <div class="credits-amount">
                                <span class="number">${pkg.credits}</span>
                                <span class="label">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</span>
                                ${pkg.bonus_credits > 0 ? `<span class="bonus">+${pkg.bonus_credits} ‡πÇ‡∏ö‡∏ô‡∏±‡∏™!</span>` : ''}
                            </div>
                            <div class="price">‡∏ø${pkg.price}</div>
                            ${pkg.description ? `<p class="description">${pkg.description}</p>` : ''}
                            <button class="select-package-btn" onclick="selectPackage(${pkg.id}, ${pkg.price})">
                                üíù ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
                            </button>
                        </div>
                    `).join('')}
                </div>
                
                   <div class="payment-info">
                    <h3>üí≥ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô</h3>
                    
                    <!-- QR Code Section -->
                    <div class="qr-section" id="qrSection" style="display: none;">
                        <h4>‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô</h4>
                        <div class="qr-code" id="qrCodeDisplay"></div>
                        <p style="color: #f59e0b; font-size: 14px; margin-top: 12px;">
                            üí° ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                        </p>
                    </div>
                    
                    <div class="payment-methods">
                        <div class="payment-method">
                            <div style="font-size: 48px;">üì≤</div>
                            <div>
                                <strong>PromptPay</strong><br>
                                ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${window.PROMPTPAY_ID || '090-246-2826'}<br>
                                <small style="color: #a1a1aa;">
                                    ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!
                                </small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Upload Section -->
                    <div class="upload-slip-section">
                        <input type="file" id="slipFileInput" accept="image/*" style="display: none;" onchange="handleSlipSelect(event)">
                        <div class="upload-area" onclick="document.getElementById('slipFileInput').click()">
                            <div class="upload-icon">üì§</div>
                            <div class="upload-text">‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ</div>
                            <div class="upload-hint">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</div>
                        </div>
                        
                        <div id="slipPreview" style="display: none;">
                            <div class="slip-preview">
                                <img id="slipImage" src="" alt="Slip preview">
                            </div>
                            <button id="confirmUploadBtn" onclick="uploadSlip()" style="
                                margin-top: 16px;
                                padding: 12px 32px;
                                background: var(--primary);
                                color: white;
                                border: none;
                                border-radius: 8px;
                                cursor: pointer;
                                font-size: 16px;
                                font-weight: 600;
                                transition: all 0.3s ease;
                            ">
                                ‚ú® ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
                            </button>
                        </div>
                        
                        <div id="uploadStatus" class="upload-status" style="display: none;">
                            <!-- Status ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
                        </div>
                    </div>
                    
                    <div style="margin-top: 20px; padding: 16px; background: rgba(147, 51, 234, 0.1); border-radius: 8px;">
                        <p style="color: var(--text-secondary); font-size: 14px; text-align: center;">
                            üéâ <strong>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤:</strong> ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤<br>
                            ‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                        </p>
                    </div>
                </div>
        `;
        
        document.body.appendChild(modal);
    } catch (error) {
        console.error('Error loading packages:', error);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡πÑ‡∏î‡πâ');
    }
}

function closeCreditModal() {
    const modal = document.querySelector('.credit-modal');
    if (modal) modal.remove();
}

function selectPackage(packageId, price) {
    console.log('Package selected:', packageId, price);
    
    // Store selected package data
    selectedPackageData = {
        id: packageId,
        price: price
    };
    
    // Generate QR Code
    generateQRCode(price);
    
    // Show upload section
    const uploadSection = document.querySelector('.upload-slip-section');
    if (uploadSection) {
        uploadSection.style.display = 'block';
        uploadSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    
    // Update UI to show selected
    document.querySelectorAll('.package-card').forEach(card => {
        card.style.borderColor = '#404040';
        card.style.boxShadow = 'none';
    });
    
    // Find the clicked button's package card
    const clickedCard = event.target.closest('.package-card');
    if (clickedCard) {
        clickedCard.style.borderColor = '#9333ea';
        clickedCard.style.boxShadow = '0 0 20px rgba(147, 51, 234, 0.3)';
    }
    
    // DON'T close modal - ‡∏•‡∏ö alert ‡πÅ‡∏•‡∏∞ closeCreditModal ‡∏≠‡∏≠‡∏Å
}

function showCreditRequiredMessage(data) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant';
    messageDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div class="credit-required-message">
                <h3>üí≥ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</h3>
                <p>‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
                <div class="credit-info-box">
                    <span>‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <strong style="color: var(--error);">${data.credits.current}</strong></span>
                    <span>‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: <strong style="color: var(--primary);">${data.credits.required}</strong></span>
                </div>
                <button class="add-credit-btn" onclick="showCreditPackages()" style="margin: 16px auto 0;">
                    üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏•‡∏¢
                </button>
            </div>
        </div>
    `;
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// ========== GOOGLE AUTH FUNCTIONS ==========
// Global callback for Google Sign-In
function handleGoogleSignIn(response) {
    console.log('Google Sign-In response received:', response);
    
    // Check if response has credential
    if (!response || !response.credential) {
        console.error('No credential in response:', response);
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google', 'error');
        return;
    }
    
    // Process the sign-in
    processGoogleSignIn(response);
}

async function processGoogleSignIn(response) {
    
    try {
        const currentUserId = ensureUserId();
        console.log('Current userId before login:', currentUserId);
        
        // Send token to backend
        const res = await fetch('/api/auth/google', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                credential: response.credential,
                currentUserId: currentUserId
            })
        });
        
        console.log('Auth response status:', res.status);
        const data = await res.json();
        console.log('Auth response data:', data);
        
        if (data.success) {
            // Store user info
            googleUser = data.user;
            localStorage.setItem('googleUser', JSON.stringify(googleUser));
            
            // Update userId if changed
            if (data.user.userId !== currentUserId) {
                userId = data.user.userId;
                localStorage.setItem('userId', userId);
                
                // Reload chat histories with new userId
                if (typeof MasterChatHistory !== 'undefined') MasterChatHistory.init();
                if (typeof MultiCharChatHistory !== 'undefined') MultiCharChatHistory.init();
                if (typeof AIChatHistory !== 'undefined') AIChatHistory.init();
                if (typeof CharacterChatHistory !== 'undefined') CharacterChatHistory.init();
            }
            
            // Update UI
            updateAuthUI();
            updateUserId();
            updateCreditsDisplay();
            
            showNotification('‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
        } else {
            showNotification('‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'error');
        }
    } catch (error) {
        console.error('Sign-in error:', error);
        showNotification('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', 'error');
    }
}

function signOut() {
    // Clear Google user data
    googleUser = null;
    localStorage.removeItem('googleUser');
    localStorage.removeItem('linkedAccount');
    
    // Clear credits data
    localStorage.removeItem('totalCredits');
    localStorage.removeItem('creditsData');
    
    // Generate new local userId
    userId = 'user_' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('userId', userId);
    
    // Reset to default free credits
    localStorage.setItem('totalCredits', '5');
    
    // Reload chat histories
    if (typeof MasterChatHistory !== 'undefined') MasterChatHistory.init();
    if (typeof MultiCharChatHistory !== 'undefined') MultiCharChatHistory.init();
    if (typeof AIChatHistory !== 'undefined') AIChatHistory.init();
    if (typeof CharacterChatHistory !== 'undefined') CharacterChatHistory.init();
    
    // Clear character library if exists
    characterLibrary = [];
    if (currentMode === 'library') {
        displayCharacterLibrary();
    }
    
    // Update UI
    updateAuthUI();
    updateUserId();
    updateCreditsDisplay();
    
    showNotification('üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'info');
}

function updateAuthUI() {
    // Skip if Google Auth is disabled
    if (!FEATURES.GOOGLE_AUTH) {
        return;
    }
    
    const signInWrapper = document.getElementById('googleSignInWrapper');
    const userProfile = document.getElementById('userProfile');
    
    if (googleUser) {
        // Hide sign in button, show profile
        signInWrapper.style.display = 'none';
        userProfile.style.display = 'flex';
        
        // Update profile info
        document.getElementById('userAvatar').src = googleUser.picture || '/default-avatar.png';
        document.getElementById('userName').textContent = googleUser.name || 'User';
        document.getElementById('userEmail').textContent = googleUser.email || '';
    } else {
        // Show sign in button, hide profile
        signInWrapper.style.display = 'block';
        userProfile.style.display = 'none';
    }
}

// Helper function to update userId display
function updateUserId() {
    const userIdElement = document.getElementById('userId');
    if (userIdElement) {
        userIdElement.textContent = userId;
    }
}

// Helper function to update credits display
function updateCreditsDisplay() {
    // Refresh both usage and credits
    updateUsageDisplay();
    loadUserCredits();
    loadTotalPurchasedCredits();
}

// Manual Google Sign-In function
function manualGoogleSignIn() {
    console.log('Manual Google Sign-In clicked');
    
    if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {
        try {
            // Try to trigger sign-in programmatically
            google.accounts.id.prompt((notification) => {
                console.log('Prompt notification:', notification);
                if (notification.isNotDisplayed() || notification.isSkippedMoment()) {
                    // If prompt fails, try OAuth2 redirect flow
                    console.log('Prompt failed, trying redirect flow...');
                    initiateOAuth2Flow();
                }
            });
        } catch (error) {
            console.error('Error with manual sign-in:', error);
            initiateOAuth2Flow();
        }
    } else {
        console.error('Google library not loaded');
        showNotification('‚ùå Google Sign-In ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', 'error');
    }
}

// OAuth2 redirect flow as last resort
function initiateOAuth2Flow() {
    const clientId = '1062109975739-avasict57nmucjds54qp4etmv24g49ue.apps.googleusercontent.com';
    const redirectUri = encodeURIComponent(window.location.origin);
    const scope = encodeURIComponent('openid email profile');
    const responseType = 'token id_token';
    
    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +
        `client_id=${clientId}&` +
        `redirect_uri=${redirectUri}&` +
        `response_type=${responseType}&` +
        `scope=${scope}&` +
        `nonce=${Math.random().toString(36).substring(2)}`;
    
    console.log('Redirecting to:', authUrl);
    window.location.href = authUrl;
}

// Make functions global (MUST be before DOMContentLoaded)
window.handleGoogleSignIn = handleGoogleSignIn;
window.signOut = signOut;
window.manualGoogleSignIn = manualGoogleSignIn;

// Debug: Verify function is accessible
console.log('handleGoogleSignIn function registered:', typeof window.handleGoogleSignIn);

// ========== INITIALIZATION ==========
document.addEventListener('DOMContentLoaded', async () => {
    // Get or generate user ID using ensureUserId ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó global
    userId = ensureUserId();
    updateAuthUI();
    
    // Check for new day and reset free credits if needed (for non-logged in users)
    const originalUserId = localStorage.getItem('originalUserId') || userId;
    const today = new Date().toDateString();
    const lastResetDate = localStorage.getItem(`freeCreditsResetDate_${originalUserId}`);
    
    if (!localStorage.getItem('linkedAccount') && lastResetDate !== today) {
        // Reset free credits for new day
        localStorage.setItem(`usedFreeCredits_${originalUserId}`, '0');
        localStorage.setItem(`freeCreditsResetDate_${originalUserId}`, today);
        
        // Update credits display if not logged in
        const currentCredits = parseFloat(localStorage.getItem('totalCredits') || '0');
        if (currentCredits < 5) {
            localStorage.setItem('totalCredits', '5');
            console.log('New day: Free credits reset to 5');
        }
    }
    
    // Check if user is logged in and sync credits from cloud
    const linkedAccount = localStorage.getItem('linkedAccount');
    if (linkedAccount) {
        try {
            const account = JSON.parse(linkedAccount);
            // Backup current credits before sync
            const currentCredits = parseFloat(localStorage.getItem('totalCredits') || '0');
            console.log('Current local credits before sync:', currentCredits);
            
            // Fetch latest credits from Firebase
            const userResponse = await fetch(`${window.FIREBASE_DATABASE_URL}/users/${account.userId}.json`);
            if (userResponse.ok) {
                const userData = await userResponse.json();
                if (userData && userData.credits !== undefined) {
                    const cloudCredits = parseFloat(userData.credits);
                    console.log('Cloud credits:', cloudCredits);
                    
                    // Use the higher value between local and cloud
                    const finalCredits = Math.max(currentCredits, cloudCredits);
                    localStorage.setItem('totalCredits', finalCredits.toString());
                    updateCreditsDisplay();
                    
                    // If local was higher, update cloud
                    if (currentCredits > cloudCredits) {
                        await updateCloudCredits(account.userId, finalCredits);
                    }
                } else {
                    // No cloud data, keep local credits and update cloud
                    console.log('No cloud data found, keeping local credits');
                    await updateCloudCredits(account.userId, currentCredits);
                }
            }
        } catch (error) {
            console.error('Error syncing credits on load:', error);
        }
    }
    
    // Initialize Google Sign-In with proper configuration
    const initializeGoogleSignIn = () => {
        // Check if feature is enabled
        if (!FEATURES.GOOGLE_AUTH) {
            console.log('üîí Google Auth is disabled');
            return;
        }
        
        // Show auth section if enabled
        const authSection = document.getElementById('authSection');
        if (authSection) {
            authSection.style.display = 'flex';
        }
        if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {
            console.log('‚úÖ Google Sign-In library loaded');
            console.log('üìç Current origin:', window.location.origin);
            console.log('üåê Full URL:', window.location.href);
            console.log('üîó Protocol:', window.location.protocol);
            console.log('üè† Hostname:', window.location.hostname);
            
            try {
                // Initialize
                google.accounts.id.initialize({
                    client_id: '1062109975739-avasict57nmucjds54qp4etmv24g49ue.apps.googleusercontent.com',
                    callback: handleGoogleSignIn,
                    auto_select: false,
                    cancel_on_tap_outside: true
                });
                
                // Render button
                const buttonDiv = document.getElementById('googleSignInButton');
                if (buttonDiv) {
                    google.accounts.id.renderButton(
                        buttonDiv,
                        {
                            type: 'standard',
                            theme: 'filled_blue',
                            size: 'medium',
                            text: 'signin_with',
                            shape: 'rectangular',
                            logo_alignment: 'left',
                            width: 200
                        }
                    );
                    console.log('‚úÖ Google Sign-In button rendered');
                    // Hide manual button if official button renders
                    document.getElementById('manualSignInBtn').style.display = 'none';
                } else {
                    console.error('‚ùå Button container not found');
                    // Show manual button as fallback
                    document.getElementById('manualSignInBtn').style.display = 'flex';
                }
                
            } catch (error) {
                console.error('‚ùå Error initializing Google Sign-In:', error);
                // Show manual button as fallback
                document.getElementById('manualSignInBtn').style.display = 'flex';
            }
        } else {
            console.log('‚è≥ Waiting for Google library...');
            // Show manual button while waiting
            const manualBtn = document.getElementById('manualSignInBtn');
            if (manualBtn) manualBtn.style.display = 'flex';
            
            setTimeout(initializeGoogleSignIn, 1000);
        }
    };
    
    // Wait a bit then initialize
    setTimeout(initializeGoogleSignIn, 1000);
    
    document.addEventListener('change', (e) => {
        if (e.target.name === 'imageModel' || e.target.name === 'mobileImageModel') {
            updateModelSelection(e.target.value);
        }
    });

// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update UI ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å model
function updateModelSelection(selectedModel) {
    // Update desktop model cards
    document.querySelectorAll('.model-option').forEach(option => {
        const input = option.querySelector('input[type="radio"]');
        const card = option.querySelector('.model-card');
        
        if (input && card) {
            if (input.value === selectedModel) {
                card.style.borderColor = '#9333ea';
                card.style.background = 'rgba(147, 51, 234, 0.1)';
            } else {
                card.style.borderColor = '#404040';
                card.style.background = '';
            }
        }
    });
    
    // Update mobile model selection ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const mobileRadios = document.querySelectorAll('input[name="mobileImageModel"]');
    mobileRadios.forEach(radio => {
        const label = radio.closest('label');
        if (label) {
            if (radio.value === selectedModel) {
                label.style.borderColor = '#9333ea';
                label.style.background = 'rgba(147, 51, 234, 0.1)';
            } else {
                label.style.borderColor = '#404040';
                label.style.background = '#262626';
            }
        }
    });
}
    
    // Update user ID display
    console.log('üìò UserId in DOMContentLoaded:', userId);
    document.getElementById('userId').textContent = userId;
    
    // Check API status
    checkAPIStatus();
    
    // Update usage display
    updateUsageDisplay();
    // Load user credits
loadUserCredits();
    // Load total purchased credits
    loadTotalPurchasedCredits();
    
    // Load character library
    loadCharacterLibrary();
    
    // Refresh usage every 30 seconds
    setInterval(updateUsageDisplay, 30000);
    // Refresh credits every 30 seconds
setInterval(loadUserCredits, 30000);
    // Refresh total purchased credits every 30 seconds
    setInterval(loadTotalPurchasedCredits, 30000);
    
    // Enter key to send
    document.getElementById('messageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // Send button
    document.getElementById('sendButton').addEventListener('click', sendMessage);
    
    // Show/hide quick edit bar based on input content
    const quickEditBar = document.getElementById('quickEditBar');
    messageInput.addEventListener('input', () => {
        if (messageInput.value.length > 50) {
            quickEditBar.style.display = 'flex';
        } else {
            quickEditBar.style.display = 'none';
        }
    });
    
    // Initialize mode ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    currentMode = 'promptmaster';
    switchMode('promptmaster');
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ userId ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    setTimeout(() => {
        console.log('üîµ Force reload history after init');
        console.log('üîµ Current userId:', userId);
        if (userId && (currentMode === 'promptmaster' || currentMode === 'multichar' || currentMode === 'image')) {
            if (currentMode === 'promptmaster') {
                loadChatHistory('multichar');
            } else {
                loadChatHistory(currentMode);
            }
        }
    }, 1000); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
setTimeout(showAllFABButtons, 500);
});

// Ratio button handlers
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('ratio-btn')) {
        document.querySelectorAll('.ratio-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        e.target.classList.add('active');
    }
});

// Get selected model
function getSelectedImageModel() {
    const selected = document.querySelector('input[name="imageModel"]:checked');
    return selected ? selected.value : 'flux-schnell';
}

// Get selected ratio
function getSelectedRatio() {
    const selected = document.querySelector('.ratio-btn.active');
    return selected ? selected.dataset.ratio : '1:1';
}

// ========== MODE MANAGEMENT ==========
function switchMode(mode) {
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mode
    if (isProcessing) {
        showNotification('‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î', 'warning');
        
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
        document.querySelectorAll('.mode-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-mode="${currentMode}"]`).classList.add('active');
        
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dropdown (mobile)
        const dropdown = document.getElementById('mobileModeDrop');
        if (dropdown) dropdown.value = currentMode;
        
        return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mode
    }

    // ‡∏•‡∏ö class ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
    document.body.className = document.body.className.replace(/mode-\w+/g, '');
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡πÉ‡∏´‡∏°‡πà
    document.body.classList.add(`mode-${mode}`);
    
    // Save current chat history before switching
    if (currentMode === 'promptmaster' || currentMode === 'character' || currentMode === 'multichar' || currentMode === 'image') {
        saveChatHistory(currentMode);
    }
    
    currentMode = mode;
    
    // Update mode buttons
    document.querySelectorAll('.mode-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-mode="${mode}"]`).classList.add('active');
    
    // Hide all info panels
    document.getElementById('generalInfo').style.display = 'none';
    document.getElementById('characterInfo').style.display = 'none';
    document.getElementById('multicharInfo').style.display = 'none';
    document.getElementById('imageInfo').style.display = 'none';
    document.getElementById('imageGenInfo').style.display = 'none';
    document.getElementById('chatInfo').style.display = 'none';
    document.getElementById('characterLibrary').classList.remove('active');
    
    // Update UI based on mode
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const modeNotice = document.getElementById('modeNotice');
    const uploadSection = document.getElementById('uploadSection');
    
    switch(mode) {
        // ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ case ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

case 'promptmaster':
    document.getElementById('multicharInfo').style.display = 'block';
    messageInput.placeholder = "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...";
    sendButton.innerHTML = '‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‚ú®';
    modeNotice.classList.remove('active');
    uploadSection.style.display = 'flex';
    const uploadBtnGeneral = uploadSection.querySelector('.upload-btn');
    if (uploadBtnGeneral) uploadBtnGeneral.style.display = '';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    const enhanceSection1 = document.getElementById('enhanceSection');
    if (enhanceSection1) enhanceSection1.style.display = 'none';
    document.getElementById('clearChatBtn').style.display = 'none';
    document.getElementById('clearHistoryBtn').style.display = 'block';
    document.getElementById('chatInfo').style.display = 'none';
    
    loadChatHistory('multichar');
    break;
    
case 'character':
    document.getElementById('characterInfo').style.display = 'block';
    messageInput.placeholder = "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...";
    sendButton.innerHTML = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ üë§';
    modeNotice.innerHTML = 'üí° <strong>Character Mode:</strong> AI ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile';
    modeNotice.classList.add('active');
    uploadSection.style.display = 'flex';
    const uploadBtnChar = uploadSection.querySelector('.upload-btn');
    if (uploadBtnChar) uploadBtnChar.style.display = '';
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Template Form ‡∏™‡∏µ‡∏™‡πâ‡∏°
    const templateBtnChar = document.getElementById('templateButtonSection');
    if (templateBtnChar) templateBtnChar.style.display = 'none';
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Character Template ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
    const charTemplateBtnChar = document.getElementById('characterTemplateButtonSection');
    if (charTemplateBtnChar) charTemplateBtnChar.style.display = 'inline-block';
    
    const enhanceSection2 = document.getElementById('enhanceSection');
    if (enhanceSection2) enhanceSection2.style.display = 'none';
    document.getElementById('clearChatBtn').style.display = 'none';
    document.getElementById('clearHistoryBtn').style.display = 'none';
    document.getElementById('chatInfo').style.display = 'none';
    
    loadChatHistory('character');
    break;

case 'multichar':
    document.getElementById('multicharInfo').style.display = 'block';
    messageInput.placeholder = "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£...";
    sendButton.innerHTML = '‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt üé≠';
    modeNotice.innerHTML = 'üí° <strong>Multi-Character Mode:</strong> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£';
    modeNotice.classList.add('active');
    uploadSection.style.display = 'flex';
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    const uploadBtnMulti = uploadSection.querySelector('.upload-btn');
    if (uploadBtnMulti) uploadBtnMulti.style.display = '';
    const enhanceSectionHide = document.getElementById('enhanceSection');
if (enhanceSectionHide) enhanceSectionHide.style.display = 'none';
    document.getElementById('clearChatBtn').style.display = 'none';
    document.getElementById('clearHistoryBtn').style.display = 'block';
    document.getElementById('chatInfo').style.display = 'none';

    loadChatHistory('multichar');
    break;

    case 'library':
    const library = document.getElementById('characterLibrary');
    library.classList.add('active');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
    uploadSection.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô upload section ‡πÉ‡∏ô library
    modeNotice.classList.remove('active'); // ‡∏ã‡πà‡∏≠‡∏ô mode notice
    document.getElementById('clearChatBtn').style.display = 'none';
    document.getElementById('clearHistoryBtn').style.display = 'none';
    document.getElementById('chatInfo').style.display = 'none';
    if (window.innerWidth <= 968) {
        document.querySelector('.chat-panel').style.display = 'none';
        library.style.cssText = `
            display: block !important;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            background: var(--background);
            overflow-y: auto;
            padding: 20px;
        `;
    }
    
    break;

case 'image':
    document.getElementById('imageInfo').style.display = 'block';
    messageInput.placeholder = "‡∏ö‡∏≠‡∏Å‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£...";
    sendButton.innerHTML = '‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt üñºÔ∏è';
    modeNotice.classList.remove('active');
    uploadSection.style.display = 'flex';
    const uploadBtnImage = uploadSection.querySelector('.upload-btn');
    if (uploadBtnImage) uploadBtnImage.style.display = '';
    
    // ‡∏ã‡πà‡∏≠‡∏ô enhance section  
    const enhanceSection = document.getElementById('enhanceSection');
    if (enhanceSection) enhanceSection.style.display = 'none';
    document.getElementById('clearChatBtn').style.display = 'none';
    document.getElementById('clearHistoryBtn').style.display = 'block';
    document.getElementById('chatInfo').style.display = 'none';

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Template Form
    const templateBtnImage = document.getElementById('templateButtonSection');
    if (templateBtnImage) templateBtnImage.style.display = 'none';
    
    loadChatHistory('image');
    break;

case 'imagegen':
    document.getElementById('imageGenInfo').style.display = 'block';
    messageInput.placeholder = "‡∏û‡∏¥‡∏°‡∏û‡πå Prompt ‡∏†‡∏≤‡∏©‡∏≤ English...";
    sendButton.innerHTML = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û üé®';
    modeNotice.innerHTML = 'üí° <strong>Image Mode:</strong> ‡∏û‡∏¥‡∏°‡∏û‡πå/‡∏û‡∏π‡∏î‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Prompt';
    modeNotice.classList.add('active');
    
    // ‡∏ã‡πà‡∏≠‡∏ô upload section ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    uploadSection.style.display = 'none';
    
    // ‡πÅ‡∏™‡∏î‡∏á enhance section  
    const enhanceSectionImageGen = document.getElementById('enhanceSection');
    if (enhanceSectionImageGen) enhanceSectionImageGen.style.display = 'flex';
    document.getElementById('clearChatBtn').style.display = 'none';
    document.getElementById('clearHistoryBtn').style.display = 'none';
    document.getElementById('chatInfo').style.display = 'none';

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Template Form
    const templateBtnImage2 = document.getElementById('templateButtonSection');
    if (templateBtnImage2) templateBtnImage2.style.display = 'none';
    
    loadChatHistory('imagegen');
    break;

    case 'chat':
    document.getElementById('chatInfo').style.display = 'block';
    messageInput.placeholder = "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏°‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...";
    sendButton.innerHTML = '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° üí¨';
    modeNotice.innerHTML = 'üí° <strong>AI Chat Mode:</strong> ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á';
    modeNotice.classList.add('active');
    uploadSection.style.display = 'flex';
    const uploadBtnChat = uploadSection.querySelector('.upload-btn');
    if (uploadBtnChat) uploadBtnChat.style.display = '';
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Template Form ‡∏™‡∏µ‡∏™‡πâ‡∏°
    const templateBtnChatMode = document.getElementById('templateButtonSection');
    if (templateBtnChatMode) templateBtnChatMode.style.display = 'none';
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Character Template ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
    const charTemplateBtnChatMode = document.getElementById('characterTemplateButtonSection');
    if (charTemplateBtnChatMode) charTemplateBtnChatMode.style.display = 'none';
    
    const enhanceSectionChat = document.getElementById('enhanceSection');
    if (enhanceSectionChat) enhanceSectionChat.style.display = 'none';
    document.getElementById('clearChatBtn').style.display = 'block';
    document.getElementById('clearHistoryBtn').style.display = 'none';
    
    loadChatHistory('chat');
    break;
    }
    
    // Hide all info panels first
    document.querySelectorAll('.info-panel').forEach(panel => {
        panel.style.display = 'none';
    });
    
    // Show correct info panel
    if (mode === 'imagegen') {
        document.getElementById('imageGenInfo').style.display = 'block';
    }
    
}

// ========== CHAT HISTORY MANAGEMENT ==========
function saveChatHistory(mode) {
    const chatMessages = document.getElementById('chatMessages');
    if (mode === 'promptmaster' || mode === 'character' || mode === 'multichar' || mode === 'image') {
        chatHistory[mode] = chatMessages.innerHTML;
    }
}

function loadChatHistory(mode) {
    console.log(`üìò loadChatHistory called for ${mode} mode`);
    const chatMessages = document.getElementById('chatMessages');
    
    // ‡πÉ‡∏ä‡πâ PromptStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö promptmaster ‡πÅ‡∏•‡∏∞ multichar
    if (mode === 'promptmaster' || mode === 'multichar') {
        console.log(`üìò Using PromptStorage for ${mode}`);
        PromptStorage.display(mode);
        return;
    }
    
    // ‡πÉ‡∏ä‡πâ ImagePromptStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image mode
    if (mode === 'image') {
        console.log(`üìò Using ImagePromptStorage for image mode`);
        ImagePromptStorage.display();
        return;
    }
    
    // ‡πÉ‡∏ä‡πâ ChatStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö chat
    if (mode === 'chat') {
        console.log(`üìò Using ChatStorage for chat mode`);
        ChatStorage.display();
        return;
    }
    
    // ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
    if (chatHistory[mode] && chatHistory[mode].length > 0) {
        chatMessages.innerHTML = chatHistory[mode];
    } else {
        clearChat();
        addWelcomeMessage(mode);
    }
    
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function clearChat() {
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '';
}

function clearModeChat(mode) {
    if (mode === 'promptmaster' || mode === 'character') {
        chatHistory[mode] = '';
        if (currentMode === mode) {
            clearChat();
            addWelcomeMessage(mode);
        }
    }
}

function addWelcomeMessage(mode) {
    let message = '';
    
    switch(mode) {
        case 'general':
            message = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Prompt D ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏ûüé¨<br><br>
                      ‡∏ö‡∏≠‡∏Å‡∏ú‡∏°‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢<br><br>
                      üí° <strong>Tip:</strong> ‡∏¢‡∏¥‡πà‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ!`;
            break;
            
        case 'character':
            message = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Character Creator üë§<br><br>
                      ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile <strong>‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©</strong> ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Veo 3<br><br>
                      üí° <strong>‡∏ö‡∏≠‡∏Å‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:</strong> ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô? ‡πÅ‡∏ï‡πà‡∏ú‡∏°‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö`;
            break;
            
        case 'multichar':
            message = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Prompt D Master üé≠<br><br>
                      ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô<br>
                      ‚ú® ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ 2-5 ‡∏Ñ‡∏ô<br>
                      ‚ú® ‡∏ö‡∏ó‡∏û‡∏π‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° timing ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥<br>
                      ‚ú® ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ audio ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô<br><br>
                      üí° <strong>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö:</strong> ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á, ‡∏â‡∏≤‡∏Å‡∏™‡∏ô‡∏ó‡∏ô‡∏≤, ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏±‡πâ‡∏ô`;
            break;

        case 'image':
            message = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Image Prompt Creator üñºÔ∏è<br><br>
                      ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞<br><br>
                      üí° <strong>Tip:</strong> ‡∏ö‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ ‡∏ú‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û`;
            break;
            
        case 'imagegen':
            message = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Image Generator üé®<br><br>
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Model ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©<br><br>
                      üí° <strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong> "A cute cat wearing sunglasses, digital art style"`;
            break;

        case 'chat':
            message = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Chat ‡∏ö‡∏≠‡∏ó D ‡∏Ñ‡∏£‡∏±‡∏ö üí¨<br><br>
                      ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Bot D ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö<br>
                      üìé ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ | üé§ ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ<br><br>
                      üí° <strong>‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°:</strong> "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢prompt ‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ ‡∏´‡∏ô‡πà‡∏≠‡∏¢" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ç‡∏≠‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô..."`;
            break;
    }
    
    // ‡πÉ‡∏ä‡πâ addMessage ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ displayChatResponse
    addMessage(message, 'assistant');
}

// ========== CHARACTER LIBRARY FUNCTIONS ==========
async function loadCharacterLibrary() {
    try {
        const response = await fetch(`${API_URL}/characters/${userId}`);
        if (response.ok) {
            characterLibrary = await response.json();
            displayCharacterLibrary();
        }
    } catch (error) {
        console.error('Error loading character library:', error);
    }
}

function displayCharacterLibrary() {
    const characterList = document.getElementById('characterList');
    
    if (characterLibrary.length === 0) {
        characterList.innerHTML = `
            <div class="empty-library">
                <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ</p>
                <p style="margin-top: 8px;">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Character Creator</p>
            </div>
        `;
        return;
    }
    
    characterList.innerHTML = characterLibrary.map((char, index) => {
        // ‡πÉ‡∏ä‡πâ preview ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ backend ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡πà‡∏á profile ‡∏°‡∏≤
        const displayText = char.preview || 'No description available';
        
        return `
            <div class="character-card" onclick="useCharacter(${index})">
                <div class="character-name">${char.name}</div>
                <div class="character-preview">${displayText}</div>
                <div class="character-meta">
                    <span>Created: ${new Date(char.created_at).toLocaleDateString('en-US')}</span>
                    <div class="character-actions">
                        <button onclick="editCharacter(${index}, event)" style="background: none; border: none; color: var(--primary); cursor: pointer; margin-right: 10px;">
                            ‚úèÔ∏è Edit
                        </button>
                        <button onclick="deleteCharacter('${char.id}', event)" style="background: none; border: none; color: var(--error); cursor: pointer;">
                            üóëÔ∏è Delete
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

function useCharacter(index) {
    const character = characterLibrary[index];
    
    // ‡∏õ‡∏¥‡∏î library ‡∏Å‡πà‡∏≠‡∏ô (‡∏ó‡∏±‡πâ‡∏á desktop ‡πÅ‡∏•‡∏∞ mobile)
    const library = document.getElementById('characterLibrary');
    library.classList.remove('active');
    library.style.cssText = '';
    
    // ‡πÅ‡∏™‡∏î‡∏á chat panel (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)
    const chatPanel = document.querySelector('.chat-panel');
    if (chatPanel) {
        chatPanel.style.display = '';
    }
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ promptmaster mode
    switchMode('promptmaster');
    
    // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    const messageInput = document.getElementById('messageInput');
    
    let characterData = character.profile || character.preview || 'Character details not available';
    
    if (character.profile) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 8 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        const visualProfile = extractCompleteCharacterProfile(character.profile);
        
        // Format ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤
        messageInput.value = `‚ö†Ô∏è MUST INCLUDE these character details in EVERY part of the video prompt:

CHARACTER: ${character.name}
===================
${visualProfile}
===================

CRITICAL: The prompt MUST describe this EXACT character (not generic "person" or "man/woman"). Include their name, age, clothing colors, and appearance in EVERY shot.

Now create a prompt where this character: 

[‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà]`;
    }
    
    // Focus ‡∏ó‡∏µ‡πà input
    messageInput.focus();
    
    // Scroll to input area (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)
    if (window.innerWidth <= 968) {
        setTimeout(() => {
            messageInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 300);
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 14 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
function extractCompleteCharacterProfile(profile) {
    if (!profile) return '';
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Character Identity Template
    const templateStart = profile.indexOf('üìã **Character Identity Template');
    const templateEnd = profile.indexOf('===================', templateStart + 1);
    
    if (templateStart !== -1 && templateEnd !== -1) {
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô template ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        return profile.substring(templateStart, templateEnd).trim();
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ format ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
    const sections = [
        {
            headers: ['character identity template', 'üìã'],
            include: true
        },
        {
            headers: ['üë§', '‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó', 'name / role', '1.'],
            include: true
        },
        {
            headers: ['üßë‚Äçüé®', '‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏', 'gender / age', '2.'],
            include: true
        },
        {
            headers: ['üíÉ', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß', 'body / skin', '3.'],
            include: true
        },
        {
            headers: ['üë§', '‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤', 'face', '4.'],
            include: true
        },
        {
            headers: ['üëÅÔ∏è', '‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß', 'eyes / eyebrows', '5.'],
            include: true
        },
        {
            headers: ['üëÑ', '‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å', 'lips', '6.'],
            include: true
        },
        {
            headers: ['üíá', '‡∏ú‡∏°', 'hair', '7.'],
            include: true
        },
        {
            headers: ['üëó', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢', 'outfit', '8.'],
            include: true
        },
        {
            headers: ['üíé', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö', 'accessories', '9.'],
            include: true
        },
        {
            headers: ['üé≠', '‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û', 'personality', '10.'],
            include: true
        },
        {
            headers: ['üï¥Ô∏è', '‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', 'starting pose', '11.'],
            include: true
        },
        {
            headers: ['üéôÔ∏è', '‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á', 'voice tone', '12.'],
            include: true
        },
        {
            headers: ['‚ú®', '‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©', 'special features', '13.'],
            include: true
        },
        {
            headers: ['üñºÔ∏è', '‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á', 'visual style', '14.'],
            include: true
        }
    ];
    
    const lines = profile.split('\n');
    const resultLines = [];
    let currentSection = null;
    let shouldInclude = false;
    let foundSummary = false; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const lowerLine = line.toLowerCase();
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ summary ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡∏¢
        if (foundSummary) {
            break;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let isNewSection = false;
        
        for (let j = 0; j < sections.length; j++) {
            const section = sections[j];
            for (const header of section.headers) {
                if (lowerLine.includes(header.toLowerCase())) {
                    currentSection = j;
                    shouldInclude = section.include;
                    isNewSection = true;
                    break;
                }
            }
            if (isNewSection) break;
        }
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö
        if (shouldInclude) {
            resultLines.push(line);
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ summary ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î
        if (lowerLine.includes('this character profile provides') || 
            lowerLine.includes('comprehensive insight')) {
            if (!foundSummary) {
                resultLines.push(line);
                foundSummary = true;
            }
        }
    }
    
    return resultLines.join('\n').trim();
}

async function deleteCharacter(characterId, event) {
    event.stopPropagation();
    
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?')) return;
    
    try {
        const response = await fetch(`${API_URL}/characters/${characterId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            loadCharacterLibrary();
        }
    } catch (error) {
        console.error('Error deleting character:', error);
    }
}

// Function to edit character
function editCharacter(index, event) {
    event.stopPropagation();
    
    const character = characterLibrary[index];
    if (!character) return;
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• character
    console.log('Editing character:', character);
    console.log('Character keys:', Object.keys(character));
    
    // Try to get full profile data - it might be stored in different fields
    let profileText = '';
    if (character.profile && character.profile.length > 100) {
        profileText = character.profile;
        console.log('Using character.profile');
    } else if (character.preview && character.preview.includes('CHARACTER IDENTITY TEMPLATE')) {
        profileText = character.preview;
        console.log('Using character.preview');
    } else if (character.data) {
        profileText = character.data;
        console.log('Using character.data');
    } else {
        // Try to reconstruct from preview
        profileText = character.preview || '';
        console.log('Using fallback preview');
    }
    
    console.log('Profile text length:', profileText.length);
    console.log('Profile text preview:', profileText.substring(0, 200));
    
    // Store character data for editing
    window.editingCharacter = {
        id: character.id,
        name: character.name,
        profile: profileText,
        index: index
    };
    
    // Parse profile to extract 8 sections
    const profileData = parseCharacterProfile(profileText);
    
    // Open character template modal with existing data
    showEditCharacterModal(profileData);
}

// Parse character profile to extract sections (supports both 8 and 14 section formats)
function parseCharacterProfile(profile) {
    if (!profile) return {};
    
    console.log('Parsing profile:', profile);
    
    const parsed = {
        // Character type fields
        type: 'human',
        species: '',
        // Original 8 fields for backward compatibility
        nickname: '',
        role: '',
        gender: '',
        age: '',
        ethnicity: '',
        body: '',
        skin: '',
        posture: '',
        hair: '',
        face: '',
        glasses: '',
        accessories: '',
        shirt: '',
        jacket: '',
        pants: '',
        shoes: '',
        voiceTone: '',
        speechStyle: '',
        confidence: '',
        cameraPresence: '',
        storyRole: '',
        // New 14 fields
        name: '',
        heightWeight: '',
        faceShape: '',
        faceFeatures: '',
        eyes: '',
        eyebrows: '',
        lips: '',
        hairStyle: '',
        hairColor: '',
        hairDetails: '',
        bottoms: '',
        outerwear: '',
        fabric: '',
        headAccessories: '',
        jewelry: '',
        otherAccessories: '',
        personalityTraits: '',
        initialPose: '',
        bodyLanguage: '',
        voicePitch: '',
        speakingStyle: '',
        accent: '',
        voiceCharacteristics: '',
        speech: '',
        theme: '',
        // Additional fields for 14-field format
        uniqueTraits: '',
        specialEffects: '',
        realismType: ''
    };
    
    // Extract data from each section
    const lines = profile.split('\n');
    let currentSection = null;
    let collectedData = {};
    
    // Debug log to see the profile structure
    console.log('Parsing profile lines:', lines.length);
    console.log('First 10 lines:', lines.slice(0, 10));
    
    // Count sections to determine format
    let sectionCount = 0;
    for (const line of lines) {
        if (line.includes('**') && /\*\*\d+\./.test(line)) {
            sectionCount++;
        }
    }
    
    const is14FieldFormat = sectionCount > 10;
    console.log(`Detected ${sectionCount} sections, using ${is14FieldFormat ? '14' : '8'}-field format`);
    
    for (const line of lines) {
        const trimmedLine = line.trim();
        
        if (is14FieldFormat) {
            // 14-field format detection
            // Section 1: ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
            if (trimmedLine.includes('**1.') || trimmedLine.includes('üë§')) {
                currentSection = 1;
                collectedData[currentSection] = [];
            }
            // Section 2: ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥
            else if (trimmedLine.includes('**2.') || trimmedLine.includes('üßë‚Äçüé®')) {
                currentSection = 2;
                collectedData[currentSection] = [];
            }
            // Section 3: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß
            else if (trimmedLine.includes('**3.') || trimmedLine.includes('üíÉ')) {
                currentSection = 3;
                collectedData[currentSection] = [];
            }
            // Section 4: ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            else if (trimmedLine.includes('**4.') && trimmedLine.includes('‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤')) {
                currentSection = 4;
                collectedData[currentSection] = [];
            }
            // Section 5: ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß
            else if (trimmedLine.includes('**5.') || trimmedLine.includes('üëÅÔ∏è')) {
                currentSection = 5;
                collectedData[currentSection] = [];
            }
            // Section 6: ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å
            else if (trimmedLine.includes('**6.') || trimmedLine.includes('üëÑ')) {
                currentSection = 6;
                collectedData[currentSection] = [];
            }
            // Section 7: ‡∏ú‡∏°
            else if (trimmedLine.includes('**7.') || trimmedLine.includes('üíá‚Äç‚ôÄÔ∏è')) {
                currentSection = 7;
                collectedData[currentSection] = [];
            }
            // Section 8: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
            else if (trimmedLine.includes('**8.') || trimmedLine.includes('üëó')) {
                currentSection = 8;
                collectedData[currentSection] = [];
            }
            // Section 9: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
            else if (trimmedLine.includes('**9.') || trimmedLine.includes('üíé')) {
                currentSection = 9;
                collectedData[currentSection] = [];
            }
            // Section 10: ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
            else if (trimmedLine.includes('**10.') || trimmedLine.includes('üé≠')) {
                currentSection = 10;
                collectedData[currentSection] = [];
            }
            // Section 11: ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            else if (trimmedLine.includes('**11.') || trimmedLine.includes('üï¥Ô∏è')) {
                currentSection = 11;
                collectedData[currentSection] = [];
            }
            // Section 12: ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            else if (trimmedLine.includes('**12.') || trimmedLine.includes('üéôÔ∏è')) {
                currentSection = 12;
                collectedData[currentSection] = [];
            }
            // Section 13: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
            else if (trimmedLine.includes('**13.') || trimmedLine.includes('üí¨') || trimmedLine.includes('‚ú®') || 
                     trimmedLine.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©') || trimmedLine.includes('Special Features')) {
                currentSection = 13;
                collectedData[currentSection] = [];
            }
            // Section 14: ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
            else if (trimmedLine.includes('**14.') || trimmedLine.includes('üé®') || trimmedLine.includes('üñºÔ∏è') || 
                     trimmedLine.includes('‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á') || trimmedLine.includes('Visual Style')) {
                currentSection = 14;
                collectedData[currentSection] = [];
            }
        } else {
            // 8-field format detection (original)
            // Section 1: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
            if (trimmedLine.includes('**1.') || trimmedLine.includes('üë©‚Äçüè´')) {
                currentSection = 1;
                collectedData[currentSection] = [];
            }
            // Section 2: ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥
            else if (trimmedLine.includes('**2.') || trimmedLine.includes('üßë‚Äçüé®')) {
                currentSection = 2;
                collectedData[currentSection] = [];
            }
            // Section 3: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß / ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
            else if (trimmedLine.includes('**3.') || trimmedLine.includes('üíÉ')) {
                currentSection = 3;
                collectedData[currentSection] = [];
            }
            // Section 4: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ú‡∏° / ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            else if (trimmedLine.includes('**4.') || trimmedLine.includes('üíá')) {
                currentSection = 4;
                collectedData[currentSection] = [];
            }
            // Section 5: ‡πÅ‡∏ß‡πà‡∏ô / ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
            else if (trimmedLine.includes('**5.') || trimmedLine.includes('üëì')) {
                currentSection = 5;
                collectedData[currentSection] = [];
            }
            // Section 6: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
            else if (trimmedLine.includes('**6.') || trimmedLine.includes('üëó')) {
                currentSection = 6;
                collectedData[currentSection] = [];
            }
            // Section 7: ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á / ‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏π‡∏î
            else if (trimmedLine.includes('**7.') || trimmedLine.includes('üéôÔ∏è')) {
                currentSection = 7;
                collectedData[currentSection] = [];
            }
            // Section 8: ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
            else if (trimmedLine.includes('**8.') || trimmedLine.includes('üíº')) {
                currentSection = 8;
                collectedData[currentSection] = [];
            }
        }
        
        // Collect data lines (support both - and * bullet points)
        if (currentSection && (trimmedLine.startsWith('-') || trimmedLine.startsWith('*'))) {
            const dataLine = trimmedLine.substring(1).trim();
            if (dataLine.includes(':')) {
                const [key, ...valueParts] = dataLine.split(':');
                const value = valueParts.join(':').trim();
                collectedData[currentSection].push({ key: key.trim(), value });
            } else {
                collectedData[currentSection].push({ key: '', value: dataLine });
            }
        }
    }
    
    // Process collected data
    console.log('Collected data:', collectedData);
    console.log('Section 13 data:', collectedData[13]);
    console.log('Section 14 data:', collectedData[14]);
    
    // Debug: Check which sections were detected
    const detectedSections = Object.keys(collectedData).map(k => parseInt(k)).sort((a, b) => a - b);
    console.log('Detected sections:', detectedSections);
    
    if (is14FieldFormat) {
        // Parse 14-field format
        // Section 1: ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
        if (collectedData[1]) {
            const nameData = collectedData[1].find(d => 
                d.key.toLowerCase().includes('name') || 
                d.key.includes('‡∏ä‡∏∑‡πà‡∏≠') || 
                d.key.includes('Name') ||
                d.key === '‡∏ä‡∏∑‡πà‡∏≠' ||
                (d.key === '' && d.value && !d.value.includes(':'))
            );
            const nicknameData = collectedData[1].find(d => 
                d.key.toLowerCase().includes('nickname') || d.key.includes('‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å')
            );
            const roleData = collectedData[1].find(d => 
                d.key.toLowerCase().includes('role') || d.key.includes('‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó')
            );
            parsed.name = nameData ? nameData.value : '';
            parsed.nickname = nicknameData ? nicknameData.value : '';
            parsed.role = roleData ? roleData.value : '';
        }
        
        // Section 2: ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ or Type / Species
        if (collectedData[2]) {
            // Check for type/species data
            const typeData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('type') || d.key.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
            );
            const speciesData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('species') || d.key.includes('‡∏ä‡∏ô‡∏¥‡∏î') || d.key.includes('‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå')
            );
            
            if (typeData) {
                const typeValue = typeData.value.toLowerCase();
                if (typeValue.includes('‡∏™‡∏±‡∏ï‡∏ß‡πå') || typeValue.includes('animal')) {
                    parsed.type = 'animal';
                } else if (typeValue.includes('‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô') || typeValue.includes('cartoon') || typeValue.includes('‡πÅ‡∏ü‡∏ô‡∏ï‡∏≤‡∏ã‡∏µ')) {
                    parsed.type = 'cartoon';
                } else if (typeValue.includes('‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå') || typeValue.includes('robot') || typeValue.includes('ai')) {
                    parsed.type = 'robot';
                } else if (typeValue.includes('‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï') || typeValue.includes('creature')) {
                    parsed.type = 'creature';
                }
            }
            
            if (speciesData) {
                parsed.species = speciesData.value;
            }
            
            const genderData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('gender') || d.key.includes('‡πÄ‡∏û‡∏®')
            );
            const ageData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('age') || d.key.includes('‡∏≠‡∏≤‡∏¢‡∏∏')
            );
            const ethnicityData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('ethnicity') || d.key.includes('‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥')
            );
            parsed.gender = genderData ? genderData.value : '';
            parsed.age = ageData ? ageData.value : '';
            parsed.ethnicity = ethnicityData ? ethnicityData.value : '';
        }
        
        // Section 3: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß
        if (collectedData[3]) {
            const bodyData = collectedData[3].find(d => 
                d.key.toLowerCase().includes('body') || d.key.includes('‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á')
            );
            const heightWeightData = collectedData[3].find(d => 
                d.key.toLowerCase().includes('height') || d.key.includes('‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
            );
            const skinData = collectedData[3].find(d => 
                d.key.toLowerCase().includes('skin') || d.key.includes('‡∏™‡∏µ‡∏ú‡∏¥‡∏ß') || d.key.includes('‡∏ú‡∏¥‡∏ß')
            );
            parsed.body = bodyData ? bodyData.value : '';
            parsed.heightWeight = heightWeightData ? heightWeightData.value : '';
            parsed.skin = skinData ? skinData.value : '';
        }
        
        // Section 4: ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        if (collectedData[4]) {
            const faceShapeData = collectedData[4].find(d => 
                d.key.toLowerCase().includes('shape') || d.key.includes('‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤')
            );
            const faceFeaturesData = collectedData[4].find(d => 
                d.key.toLowerCase().includes('features') || d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡∏ô‡πâ‡∏≤')
            );
            parsed.faceShape = faceShapeData ? faceShapeData.value : '';
            parsed.faceFeatures = faceFeaturesData ? faceFeaturesData.value : '';
            parsed.face = `${parsed.faceShape} ${parsed.faceFeatures}`.trim();
        }
        
        // Section 5: ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß
        if (collectedData[5]) {
            const eyesData = collectedData[5].find(d => 
                d.key.toLowerCase().includes('eyes') || d.key.includes('‡∏î‡∏ß‡∏á‡∏ï‡∏≤')
            );
            const eyebrowsData = collectedData[5].find(d => 
                d.key.toLowerCase().includes('eyebrows') || d.key.includes('‡∏Ñ‡∏¥‡πâ‡∏ß')
            );
            parsed.eyes = eyesData ? eyesData.value : '';
            parsed.eyebrows = eyebrowsData ? eyebrowsData.value : '';
        }
        
        // Section 6: ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å
        if (collectedData[6]) {
            const lipsData = collectedData[6].find(d => 
                d.key.toLowerCase().includes('lips') || d.key.includes('‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å')
            );
            parsed.lips = lipsData ? lipsData.value : '';
        }
        
        // Section 7: ‡∏ú‡∏°
        if (collectedData[7]) {
            const hairStyleData = collectedData[7].find(d => 
                d.key.toLowerCase().includes('style') || d.key.includes('‡∏ó‡∏£‡∏á‡∏ú‡∏°')
            );
            const hairColorData = collectedData[7].find(d => 
                d.key.toLowerCase().includes('color') || d.key.includes('‡∏™‡∏µ‡∏ú‡∏°')
            );
            const hairDetailsData = collectedData[7].find(d => 
                d.key.toLowerCase().includes('details') || d.key.includes('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏°')
            );
            parsed.hairStyle = hairStyleData ? hairStyleData.value : '';
            parsed.hairColor = hairColorData ? hairColorData.value : '';
            parsed.hairDetails = hairDetailsData ? hairDetailsData.value : '';
            parsed.hair = `${parsed.hairStyle} ${parsed.hairColor} ${parsed.hairDetails}`.trim();
        }
        
        // Section 8: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
        if (collectedData[8]) {
            collectedData[8].forEach(d => {
                const keyLower = d.key.toLowerCase();
                if ((keyLower.includes('shirt') && !keyLower.includes('outerwear')) || 
                    (d.key.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠') && !d.key.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°'))) {
                    parsed.shirt = d.value;
                } else if (keyLower.includes('bottoms') || keyLower.includes('pants') || 
                           d.key.includes('‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á') || d.key.includes('‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á')) {
                    parsed.bottoms = d.value;
                    parsed.pants = d.value; // For backward compatibility
                } else if (keyLower.includes('outerwear') || keyLower.includes('jacket') || 
                           d.key.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°')) {
                    parsed.outerwear = d.value;
                    parsed.jacket = d.value; // For backward compatibility
                } else if (keyLower.includes('shoes') || d.key.includes('‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤')) {
                    parsed.shoes = d.value;
                } else if (keyLower.includes('fabric') || d.key.includes('‡∏ß‡∏±‡∏™‡∏î‡∏∏') || d.key.includes('‡∏ú‡πâ‡∏≤')) {
                    parsed.fabric = d.value;
                }
            });
        }
        
        // Section 9: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
        if (collectedData[9]) {
            const headAccessoriesData = collectedData[9].find(d => 
                d.key.toLowerCase().includes('head') || d.key.includes('‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞')
            );
            const jewelryData = collectedData[9].find(d => 
                d.key.toLowerCase().includes('jewelry') || 
                d.key.includes('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö') ||
                d.key.includes('‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏≠') ||
                d.key.includes('‡∏™‡∏£‡πâ‡∏≠‡∏¢') ||
                d.key.includes('necklace') ||
                d.key.includes('Necklace') ||
                (d.key === '' && d.value && (d.value.includes('‡∏™‡∏£‡πâ‡∏≠‡∏¢') || d.value.includes('necklace')))
            );
            const otherAccessoriesData = collectedData[9].find(d => 
                d.key.toLowerCase().includes('other') || 
                d.key.includes('‡∏≠‡∏∑‡πà‡∏ô‡πÜ') ||
                d.key.includes('‡πÅ‡∏ß‡πà‡∏ô') ||
                d.key.includes('glasses') ||
                (d.key === '' && d.value && (d.value.includes('‡πÅ‡∏ß‡πà‡∏ô') || d.value.includes('‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤')))
            );
            parsed.headAccessories = headAccessoriesData ? headAccessoriesData.value : '';
            parsed.jewelry = jewelryData ? jewelryData.value : '';
            parsed.otherAccessories = otherAccessoriesData ? otherAccessoriesData.value : '';
            parsed.accessories = `${parsed.headAccessories} ${parsed.jewelry} ${parsed.otherAccessories}`.trim();
            
            // Also check for glasses in accessories if not found elsewhere
            if (!parsed.glasses && otherAccessoriesData && otherAccessoriesData.value.includes('‡πÅ‡∏ß‡πà‡∏ô')) {
                parsed.glasses = otherAccessoriesData.value;
            }
        }
        
        // Section 10: ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
        if (collectedData[10]) {
            const personalityTraitsData = collectedData[10].find(d => 
                d.key.toLowerCase().includes('traits') || d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ô‡∏¥‡∏™‡∏±‡∏¢')
            );
            const confidenceData = collectedData[10].find(d => 
                d.key.toLowerCase().includes('confidence') || d.key.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à')
            );
            const cameraPresenceData = collectedData[10].find(d => 
                d.key.toLowerCase().includes('camera') || d.key.includes('‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á')
            );
            parsed.personalityTraits = personalityTraitsData ? personalityTraitsData.value : '';
            parsed.confidence = confidenceData ? confidenceData.value : '';
            parsed.cameraPresence = cameraPresenceData ? cameraPresenceData.value : '';
        }
        
        // Section 11: ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if (collectedData[11]) {
            const initialPoseData = collectedData[11].find(d => 
                d.key.toLowerCase().includes('pose') || d.key.includes('‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô')
            );
            const bodyLanguageData = collectedData[11].find(d => 
                d.key.toLowerCase().includes('language') || d.key.includes('‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏¢')
            );
            parsed.initialPose = initialPoseData ? initialPoseData.value : '';
            parsed.bodyLanguage = bodyLanguageData ? bodyLanguageData.value : '';
            parsed.posture = parsed.initialPose; // For backward compatibility
        }
        
        // Section 12: ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if (collectedData[12]) {
            const voicePitchData = collectedData[12].find(d => 
                d.key.toLowerCase().includes('pitch') || d.key.includes('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
            );
            const speakingStyleData = collectedData[12].find(d => 
                d.key.toLowerCase().includes('speaking') || d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î')
            );
            const accentData = collectedData[12].find(d => 
                d.key.toLowerCase().includes('accent') || d.key.includes('‡∏™‡∏≥‡πÄ‡∏ô‡∏µ‡∏¢‡∏á')
            );
            const voiceCharData = collectedData[12].find(d => 
                d.key.toLowerCase().includes('characteristics') || d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
            );
            parsed.voicePitch = voicePitchData ? voicePitchData.value : '';
            parsed.speakingStyle = speakingStyleData ? speakingStyleData.value : '';
            parsed.accent = accentData ? accentData.value : '';
            parsed.voiceCharacteristics = voiceCharData ? voiceCharData.value : '';
            parsed.voiceTone = parsed.voicePitch; // For backward compatibility
            parsed.speechStyle = parsed.speakingStyle; // For backward compatibility
        }
        
        // Section 13: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if (collectedData[13]) {
            const uniqueTraitsData = collectedData[13].find(d => 
                d.key.toLowerCase().includes('unique') || d.key.toLowerCase().includes('traits') || 
                d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞') || d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©')
            );
            const specialEffectsData = collectedData[13].find(d => 
                d.key.toLowerCase().includes('effects') || d.key.toLowerCase().includes('special') || 
                d.key.includes('‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå') || d.key.includes('‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©')
            );
            parsed.uniqueTraits = uniqueTraitsData ? uniqueTraitsData.value : '';
            parsed.specialEffects = specialEffectsData ? specialEffectsData.value : '';
            // For backward compatibility with speech
            parsed.speech = parsed.uniqueTraits || parsed.specialEffects || '';
        }
        
        // Section 14: ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        if (collectedData[14]) {
            const realismData = collectedData[14].find(d => 
                d.key.toLowerCase().includes('realism') || d.key.toLowerCase().includes('visual') || 
                d.key.toLowerCase().includes('style') || d.key.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á') || 
                d.key.includes('‡∏™‡πÑ‡∏ï‡∏•‡πå') || d.key.includes('‡∏†‡∏≤‡∏û') || d.key.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
            );
            parsed.realismType = realismData ? realismData.value : '';
            
            // If no realismType found, check if there's any data without a key
            if (!parsed.realismType && collectedData[14].length > 0) {
                const noKeyData = collectedData[14].find(d => !d.key || d.key === '');
                if (noKeyData) {
                    parsed.realismType = noKeyData.value;
                }
            }
            
            // For backward compatibility with theme
            const themeData = collectedData[14].find(d => 
                d.key.toLowerCase().includes('theme') || d.key.includes('‡∏ò‡∏µ‡∏°')
            );
            if (!parsed.realismType && themeData) {
                parsed.theme = themeData.value;
                parsed.storyRole = parsed.theme;
            }
        }
    } else {
        // Parse 8-field format (original logic)
        // Section 1: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó / Nickname / Role
        if (collectedData[1]) {
            const nicknameData = collectedData[1].find(d => 
                d.key.toLowerCase().includes('nickname') || d.key.includes('‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å')
            );
            const roleData = collectedData[1].find(d => 
                d.key.toLowerCase().includes('role') || d.key.includes('‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó')
            );
            parsed.nickname = nicknameData ? nicknameData.value : '';
            parsed.role = roleData ? roleData.value : '';
        }
        
        // Section 2: ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ / Gender / Age / Ethnicity
        if (collectedData[2]) {
            const genderData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('gender') || d.key.includes('‡πÄ‡∏û‡∏®')
            );
            const ageData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('age') || d.key.includes('‡∏≠‡∏≤‡∏¢‡∏∏')
            );
            const ethnicityData = collectedData[2].find(d => 
                d.key.toLowerCase().includes('ethnicity') || d.key.includes('‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥')
            );
            parsed.gender = genderData ? genderData.value : '';
            parsed.age = ageData ? ageData.value : '';
            parsed.ethnicity = ethnicityData ? ethnicityData.value : '';
        }
        
        // Section 3: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß / ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á / Body / Skin / Posture
        if (collectedData[3]) {
            const bodyData = collectedData[3].find(d => 
                d.key.toLowerCase().includes('body') || d.key.includes('‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á')
            );
            const skinData = collectedData[3].find(d => 
                d.key.toLowerCase().includes('skin') || d.key.includes('‡∏ú‡∏¥‡∏ß')
            );
            const postureData = collectedData[3].find(d => 
                d.key.toLowerCase().includes('posture') || d.key.includes('‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á')
            );
            parsed.body = bodyData ? bodyData.value : '';
            parsed.skin = skinData ? skinData.value : '';
            parsed.posture = postureData ? postureData.value : '';
        }
        
        // Section 4: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ú‡∏° / ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ / Hair / Face
        if (collectedData[4]) {
            const hairData = collectedData[4].find(d => 
                d.key.toLowerCase().includes('hair') || d.key.includes('‡∏ú‡∏°')
            );
            const faceData = collectedData[4].find(d => 
                d.key.toLowerCase().includes('face') || d.key.includes('‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤')
            );
            parsed.hair = hairData ? hairData.value : '';
            parsed.face = faceData ? faceData.value : '';
        }
        
        // Section 5: ‡πÅ‡∏ß‡πà‡∏ô / ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö / Glasses / Accessories
        if (collectedData[5]) {
            const glassesData = collectedData[5].find(d => 
                d.key.toLowerCase().includes('glasses') || 
                d.key.includes('‡πÅ‡∏ß‡πà‡∏ô') ||
                d.key.includes('‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤') ||
                d.key.includes('Glasses') ||
                (d.key === '' && d.value && (d.value.includes('‡πÅ‡∏ß‡πà‡∏ô') || d.value.includes('glasses')))
            );
            const accessoriesData = collectedData[5].find(d => 
                d.key.toLowerCase().includes('accessories') || d.key.includes('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö')
            );
            parsed.glasses = glassesData ? glassesData.value : '';
            parsed.accessories = accessoriesData ? accessoriesData.value : '';
        }
        
        // Section 6: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢ / Clothing
        if (collectedData[6]) {
            collectedData[6].forEach(d => {
                const keyLower = d.key.toLowerCase();
                if ((keyLower.includes('shirt') && !keyLower.includes('jacket')) || 
                    (d.key.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠') && !d.key.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°'))) {
                    parsed.shirt = d.value;
                } else if (keyLower.includes('jacket') || keyLower.includes('suit') || 
                           d.key.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°') || d.key.includes('‡∏™‡∏π‡∏ó')) {
                    parsed.jacket = d.value;
                } else if (keyLower.includes('pants') || keyLower.includes('skirt') || 
                           d.key.includes('‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á') || d.key.includes('‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á')) {
                    parsed.pants = d.value;
                } else if (keyLower.includes('shoes') || d.key.includes('‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤')) {
                    parsed.shoes = d.value;
                }
            });
        }
        
        // Section 7: ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á / ‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏π‡∏î / Voice / Speech
        if (collectedData[7]) {
            const voiceData = collectedData[7].find(d => 
                d.key.toLowerCase().includes('voice') || d.key.includes('‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
            );
            const speechData = collectedData[7].find(d => 
                d.key.toLowerCase().includes('speech') || d.key.includes('‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î')
            );
            parsed.voiceTone = voiceData ? voiceData.value : '';
            parsed.speechStyle = speechData ? speechData.value : '';
        }
        
        // Section 8: ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô / Personality
        if (collectedData[8]) {
            collectedData[8].forEach(d => {
                const keyLower = d.key.toLowerCase();
                if (keyLower.includes('confidence') || d.key.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à')) {
                    parsed.confidence = d.value;
                } else if (keyLower.includes('camera') || d.key.includes('‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á')) {
                    parsed.cameraPresence = d.value;
                } else if (keyLower.includes('story') || d.key.includes('‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á')) {
                    parsed.storyRole = d.value;
                }
            });
        }
    }
    
    console.log('Parsed result:', parsed);
    console.log('Is 14-field format:', is14FieldFormat);
    return parsed;
}

// Show edit character modal
function showEditCharacterModal(profileData) {
    // ‡∏õ‡∏¥‡∏î library ‡∏Å‡πà‡∏≠‡∏ô
    const library = document.getElementById('characterLibrary');
    library.classList.remove('active');
    
    // ‡πÄ‡∏õ‡∏¥‡∏î character template modal
    const modal = document.getElementById('characterTemplateModal');
    modal.style.display = 'flex';
    modal.style.zIndex = '10001';
    
    // Fix for mobile - ensure modal is visible and buttons clickable
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100%';
    modal.style.height = '100%';
    
    // Ensure modal is on top and scrolls to top (especially for mobile)
    setTimeout(() => {
        modal.scrollTop = 0;
        window.scrollTo(0, 0);
        document.body.style.overflow = 'hidden';
        
        // Mobile specific fix
        if (window.innerWidth <= 768) {
            const modalContent = modal.querySelector('.character-template-content');
            if (modalContent) {
                modalContent.style.marginTop = '20px';
                modalContent.style.maxHeight = 'calc(100vh - 40px)';
                modalContent.style.overflowY = 'auto';
            }
        }
    }, 100);
    
    // Update modal title
    const modalTitle = modal.querySelector('h2');
    modalTitle.textContent = '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£';
    
    // Clear all fields first
    document.querySelectorAll('.character-template-section input, .character-template-section textarea').forEach(input => {
        input.value = '';
    });
    
    console.log('Filling form with data:', profileData);
    console.log('Profile data keys:', Object.keys(profileData));
    console.log('Profile data values:', Object.values(profileData));
    
    // Fill form with existing data
    // The parsed data already contains clean values without labels
    
    // Debug logging
    console.log('=== Filling form with parsed data ===');
    console.log('Section 13 - uniqueTraits:', profileData.uniqueTraits);
    console.log('Section 13 - specialEffects:', profileData.specialEffects);
    console.log('Section 14 - realismType:', profileData.realismType);
    
    // Character Type
    if (profileData.type) {
        document.getElementById('charType').value = profileData.type;
        updateCharacterFormFields(); // Update form fields based on type
    }
    if (profileData.species) document.getElementById('charSpecies').value = profileData.species;
    
    // Section 1: ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    if (profileData.name) document.getElementById('charName').value = profileData.name;
    if (profileData.nickname) document.getElementById('charNickname').value = profileData.nickname;
    if (profileData.role) document.getElementById('charRole').value = profileData.role;
    
    // Section 2: ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥
    if (profileData.gender) document.getElementById('charGender').value = profileData.gender;
    if (profileData.age) document.getElementById('charAge').value = profileData.age;
    if (profileData.ethnicity) document.getElementById('charEthnicity').value = profileData.ethnicity;
    
    // Section 3: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß
    if (profileData.body) document.getElementById('charBody').value = profileData.body;
    if (profileData.heightWeight) document.getElementById('charHeightWeight').value = profileData.heightWeight;
    if (profileData.skin) document.getElementById('charSkin').value = profileData.skin;
    
    // Section 4: ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    if (profileData.faceShape) document.getElementById('charFaceShape').value = profileData.faceShape;
    if (profileData.faceFeatures) document.getElementById('charFaceFeatures').value = profileData.faceFeatures;
    // For backward compatibility, if old face field exists
    if (!profileData.faceShape && !profileData.faceFeatures && profileData.face) {
        document.getElementById('charFaceShape').value = profileData.face;
    }
    
    // Section 5: ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß
    if (profileData.eyes) document.getElementById('charEyes').value = profileData.eyes;
    if (profileData.eyebrows) document.getElementById('charEyebrows').value = profileData.eyebrows;
    
    // Section 6: ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å
    if (profileData.lips) document.getElementById('charLips').value = profileData.lips;
    
    // Section 7: ‡∏ú‡∏°
    if (profileData.hairStyle) document.getElementById('charHairStyle').value = profileData.hairStyle;
    if (profileData.hairColor) document.getElementById('charHairColor').value = profileData.hairColor;
    if (profileData.hairDetails) document.getElementById('charHairDetails').value = profileData.hairDetails;
    // For backward compatibility, if old hair field exists
    if (!profileData.hairStyle && !profileData.hairColor && !profileData.hairDetails && profileData.hair) {
        document.getElementById('charHairStyle').value = profileData.hair;
    }
    
    // Section 8: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
    if (profileData.shirt) document.getElementById('charShirt').value = profileData.shirt;
    if (profileData.bottoms) document.getElementById('charBottoms').value = profileData.bottoms;
    if (profileData.pants && !profileData.bottoms) document.getElementById('charBottoms').value = profileData.pants; // Backward compatibility
    if (profileData.outerwear) document.getElementById('charOuterwear').value = profileData.outerwear;
    if (profileData.jacket && !profileData.outerwear) document.getElementById('charOuterwear').value = profileData.jacket; // Backward compatibility
    if (profileData.shoes) document.getElementById('charShoes').value = profileData.shoes;
    if (profileData.fabric) document.getElementById('charFabric').value = profileData.fabric;
    
    // Section 9: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
    if (profileData.headAccessories) document.getElementById('charHeadAccessories').value = profileData.headAccessories;
    if (profileData.jewelry) document.getElementById('charJewelry').value = profileData.jewelry;
    if (profileData.otherAccessories) document.getElementById('charOtherAccessories').value = profileData.otherAccessories;
    // For backward compatibility with old accessories field
    if (!profileData.headAccessories && !profileData.jewelry && !profileData.otherAccessories && profileData.accessories) {
        document.getElementById('charJewelry').value = profileData.accessories;
    }
    // Handle glasses from old format
    if (profileData.glasses) document.getElementById('charOtherAccessories').value = profileData.glasses;
    
    // Section 10: ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
    if (profileData.personalityTraits) document.getElementById('charPersonalityTraits').value = profileData.personalityTraits;
    if (profileData.confidence) document.getElementById('charConfidence').value = profileData.confidence;
    if (profileData.cameraPresence) document.getElementById('charCameraPresence').value = profileData.cameraPresence;
    
    // Section 11: ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (profileData.initialPose) document.getElementById('charInitialPose').value = profileData.initialPose;
    if (profileData.bodyLanguage) document.getElementById('charBodyLanguage').value = profileData.bodyLanguage;
    // For backward compatibility with posture
    if (!profileData.initialPose && profileData.posture) document.getElementById('charInitialPose').value = profileData.posture;
    
    // Section 12: ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (profileData.voicePitch) document.getElementById('charVoicePitch').value = profileData.voicePitch;
    if (profileData.speakingStyle) document.getElementById('charSpeakingStyle').value = profileData.speakingStyle;
    if (profileData.accent) document.getElementById('charAccent').value = profileData.accent;
    if (profileData.voiceCharacteristics) document.getElementById('charVoiceCharacteristics').value = profileData.voiceCharacteristics;
    // For backward compatibility with old voice fields
    if (!profileData.voicePitch && profileData.voiceTone) document.getElementById('charVoicePitch').value = profileData.voiceTone;
    if (!profileData.speakingStyle && profileData.speechStyle) document.getElementById('charSpeakingStyle').value = profileData.speechStyle;
    
    // Section 13: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    if (profileData.uniqueTraits) document.getElementById('charUniqueTraits').value = profileData.uniqueTraits;
    if (profileData.specialEffects) document.getElementById('charSpecialEffects').value = profileData.specialEffects;
    
    // Section 14: ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
    if (profileData.realismType) document.getElementById('charRealismType').value = profileData.realismType;
    // For backward compatibility with storyRole/theme
    if (!profileData.realismType && (profileData.storyRole || profileData.theme)) {
        // Try to map old values to new realism types
        const oldValue = profileData.storyRole || profileData.theme;
        if (oldValue.toLowerCase().includes('realistic') || oldValue.toLowerCase().includes('photo')) {
            document.getElementById('charRealismType').value = 'Photorealistic Human';
        }
    }
    
    // ‡∏´‡∏≤ action buttons div
    const actionsDiv = modal.querySelector('.template-actions');
    if (actionsDiv) {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        actionsDiv.innerHTML = `
            <button class="generate-from-template-btn" onclick="window.saveEditedCharacter()">
                üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
            <button class="cancel-btn" onclick="window.cancelEditCharacter()">
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
        `;
    }
}

// Save edited character
function saveEditedCharacter() {
    console.log('saveEditedCharacter called');
    console.log('window.editingCharacter:', window.editingCharacter);
    
    if (!window.editingCharacter) {
        console.error('No character being edited');
        alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
        return;
    }
    
    // Get form data - support 14 fields format
    // Character Type
    const charType = document.getElementById('charType')?.value || 'human';
    const species = document.getElementById('charSpecies')?.value.trim() || '';
    
    // Section 1: ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    const name = document.getElementById('charName')?.value.trim() || '';
    const nickname = document.getElementById('charNickname')?.value.trim() || '';
    const role = document.getElementById('charRole')?.value.trim() || '';
    
    // Section 2: ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥
    const gender = document.getElementById('charGender')?.value.trim() || '';
    const age = document.getElementById('charAge')?.value.trim() || '';
    const ethnicity = document.getElementById('charEthnicity')?.value.trim() || '';
    
    // Section 3: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß
    const body = document.getElementById('charBody')?.value.trim() || '';
    const heightWeight = document.getElementById('charHeightWeight')?.value.trim() || '';
    const skin = document.getElementById('charSkin')?.value.trim() || '';
    
    // Section 4: ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    const faceShape = document.getElementById('charFaceShape')?.value.trim() || '';
    const faceFeatures = document.getElementById('charFaceFeatures')?.value.trim() || '';
    
    // Section 5: ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß
    const eyes = document.getElementById('charEyes')?.value.trim() || '';
    const eyebrows = document.getElementById('charEyebrows')?.value.trim() || '';
    
    // Section 6: ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å
    const lips = document.getElementById('charLips')?.value.trim() || '';
    
    // Section 7: ‡∏ú‡∏°
    const hairStyle = document.getElementById('charHairStyle')?.value.trim() || '';
    const hairColor = document.getElementById('charHairColor')?.value.trim() || '';
    const hairDetails = document.getElementById('charHairDetails')?.value.trim() || '';
    
    // Section 8: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
    const shirt = document.getElementById('charShirt')?.value.trim() || '';
    const bottoms = document.getElementById('charBottoms')?.value.trim() || '';
    const outerwear = document.getElementById('charOuterwear')?.value.trim() || '';
    const shoes = document.getElementById('charShoes')?.value.trim() || '';
    const fabric = document.getElementById('charFabric')?.value.trim() || '';
    
    // Section 9: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
    const headAccessories = document.getElementById('charHeadAccessories')?.value.trim() || '';
    const jewelry = document.getElementById('charJewelry')?.value.trim() || '';
    const otherAccessories = document.getElementById('charOtherAccessories')?.value.trim() || '';
    
    // Section 10: ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
    const personalityTraits = document.getElementById('charPersonalityTraits')?.value.trim() || '';
    const confidence = document.getElementById('charConfidence')?.value.trim() || '';
    const cameraPresence = document.getElementById('charCameraPresence')?.value.trim() || '';
    
    // Section 11: ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const initialPose = document.getElementById('charInitialPose')?.value.trim() || '';
    const bodyLanguage = document.getElementById('charBodyLanguage')?.value.trim() || '';
    
    // Section 12: ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    const voicePitch = document.getElementById('charVoicePitch')?.value.trim() || '';
    const speakingStyle = document.getElementById('charSpeakingStyle')?.value.trim() || '';
    const accent = document.getElementById('charAccent')?.value.trim() || '';
    const voiceCharacteristics = document.getElementById('charVoiceCharacteristics')?.value.trim() || '';
    
    // Section 13: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    const uniqueTraits = document.getElementById('charUniqueTraits')?.value.trim() || '';
    const specialEffects = document.getElementById('charSpecialEffects')?.value.trim() || '';
    
    // Section 14: ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
    const realismType = document.getElementById('charRealismType')?.value.trim() || '';
    
    // Create updated profile using the 14-field format
    let updatedProfile = 'üìã CHARACTER IDENTITY TEMPLATE (Prompt D)\n\n';
    
    // 1. ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    if (name || nickname || role) {
        updatedProfile += 'üë§ **1. ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Name / Role)**\n';
        if (name) updatedProfile += `- ‡∏ä‡∏∑‡πà‡∏≠: ${name}\n`;
        if (nickname) updatedProfile += `- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å: ${nickname}\n`;
        if (role) updatedProfile += `- ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${role}\n`;
        updatedProfile += '\n';
    }
    
    // 2. ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ or Type / Species
    if (charType === 'human') {
        if (gender || age || ethnicity) {
            updatedProfile += 'üßë‚Äçüé® **2. ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ (Gender / Age / Ethnicity)**\n';
            if (gender) updatedProfile += `- ‡πÄ‡∏û‡∏®: ${gender}\n`;
            if (age) updatedProfile += `- ‡∏≠‡∏≤‡∏¢‡∏∏: ${age}\n`;
            if (ethnicity) updatedProfile += `- ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥: ${ethnicity}\n`;
            updatedProfile += '\n';
        }
    } else {
        // For non-human characters
        let characterTypeText = '';
        if (charType === 'animal') {
            characterTypeText = `‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${species || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
        } else if (charType === 'cartoon') {
            characterTypeText = `‡∏ï‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô/‡πÅ‡∏ü‡∏ô‡∏ï‡∏≤‡∏ã‡∏µ ${species || ''}`;
        } else if (charType === 'robot') {
            characterTypeText = `‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå/AI ${species || ''}`;
        } else if (charType === 'creature') {
            characterTypeText = `‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ${species || ''}`;
        }
        
        updatedProfile += 'üßë‚Äçüé® **2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó / ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ (Type / Gender / Age)**\n';
        updatedProfile += `- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${characterTypeText}\n`;
        if (species) updatedProfile += `- ‡∏ä‡∏ô‡∏¥‡∏î/‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå: ${species}\n`;
        if (gender) updatedProfile += `- ‡πÄ‡∏û‡∏®: ${gender}\n`;
        if (age) updatedProfile += `- ‡∏≠‡∏≤‡∏¢‡∏∏: ${age}\n`;
        updatedProfile += '\n';
    }
    
    // 3. ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß
    if (body || heightWeight || skin) {
        updatedProfile += 'üíÉ **3. ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß (Body / Skin)**\n';
        if (body) updatedProfile += `- ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á: ${body}\n`;
        if (heightWeight) updatedProfile += `- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á & ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${heightWeight}\n`;
        if (skin) updatedProfile += `- ‡∏™‡∏µ‡∏ú‡∏¥‡∏ß: ${skin}\n`;
        updatedProfile += '\n';
    }
    
    // 4. ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    if (faceShape || faceFeatures) {
        updatedProfile += 'üë§ **4. ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Face)**\n';
        if (faceShape) updatedProfile += `- ‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤: ${faceShape}\n`;
        if (faceFeatures) updatedProfile += `- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡∏ô‡πâ‡∏≤: ${faceFeatures}\n`;
        updatedProfile += '\n';
    }
    
    // 5. ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß
    if (eyes || eyebrows) {
        updatedProfile += 'üëÅÔ∏è **5. ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß (Eyes / Eyebrows)**\n';
        if (eyes) updatedProfile += `- ‡∏î‡∏ß‡∏á‡∏ï‡∏≤: ${eyes}\n`;
        if (eyebrows) updatedProfile += `- ‡∏Ñ‡∏¥‡πâ‡∏ß: ${eyebrows}\n`;
        updatedProfile += '\n';
    }
    
    // 6. ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å
    if (lips) {
        updatedProfile += 'üëÑ **6. ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å (Lips)**\n';
        updatedProfile += `- ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å: ${lips}\n`;
        updatedProfile += '\n';
    }
    
    // 7. ‡∏ú‡∏°
    if (hairStyle || hairColor || hairDetails) {
        updatedProfile += 'üíá‚Äç‚ôÄÔ∏è **7. ‡∏ú‡∏° (Hair)**\n';
        if (hairStyle) updatedProfile += `- ‡∏ó‡∏£‡∏á‡∏ú‡∏°: ${hairStyle}\n`;
        if (hairColor) updatedProfile += `- ‡∏™‡∏µ‡∏ú‡∏°: ${hairColor}\n`;
        if (hairDetails) updatedProfile += `- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏°: ${hairDetails}\n`;
        updatedProfile += '\n';
    }
    
    // 8. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢
    if (shirt || bottoms || outerwear || shoes || fabric) {
        updatedProfile += 'üëó **8. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢ (Outfit)**\n';
        if (shirt) updatedProfile += `- ‡πÄ‡∏™‡∏∑‡πâ‡∏≠: ${shirt}\n`;
        if (bottoms) updatedProfile += `- ‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á/‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á: ${bottoms}\n`;
        if (outerwear) updatedProfile += `- ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°: ${outerwear}\n`;
        if (shoes) updatedProfile += `- ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤: ${shoes}\n`;
        if (fabric) updatedProfile += `- ‡∏ß‡∏±‡∏™‡∏î‡∏∏/‡∏ú‡πâ‡∏≤: ${fabric}\n`;
        updatedProfile += '\n';
    }
    
    // 9. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
    if (headAccessories || jewelry || otherAccessories) {
        updatedProfile += 'üíé **9. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö (Accessories)**\n';
        if (headAccessories) updatedProfile += `- ‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞: ${headAccessories}\n`;
        if (jewelry) updatedProfile += `- ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${jewelry}\n`;
        if (otherAccessories) updatedProfile += `- ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ${otherAccessories}\n`;
        updatedProfile += '\n';
    }
    
    // 10. ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
    if (personalityTraits || confidence || cameraPresence) {
        updatedProfile += 'üé≠ **10. ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û (Personality)**\n';
        if (personalityTraits) updatedProfile += `- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ô‡∏¥‡∏™‡∏±‡∏¢: ${personalityTraits}\n`;
        if (confidence) updatedProfile += `- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${confidence}\n`;
        if (cameraPresence) updatedProfile += `- ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${cameraPresence}\n`;
        updatedProfile += '\n';
    }
    
    // 11. ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (initialPose || bodyLanguage) {
        updatedProfile += 'üï¥Ô∏è **11. ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Starting Pose)**\n';
        if (initialPose) updatedProfile += `- ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${initialPose}\n`;
        if (bodyLanguage) updatedProfile += `- ‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏¢: ${bodyLanguage}\n`;
        updatedProfile += '\n';
    }
    
    // 12. ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (voicePitch || speakingStyle || accent || voiceCharacteristics) {
        updatedProfile += 'üéôÔ∏è **12. ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Voice Tone)**\n';
        if (voicePitch) updatedProfile += `- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${voicePitch}\n`;
        if (speakingStyle) updatedProfile += `- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: ${speakingStyle}\n`;
        if (accent) updatedProfile += `- ‡∏™‡∏≥‡πÄ‡∏ô‡∏µ‡∏¢‡∏á: ${accent}\n`;
        if (voiceCharacteristics) updatedProfile += `- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${voiceCharacteristics}\n`;
        updatedProfile += '\n';
    }
    
    // 13. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    if (uniqueTraits || specialEffects) {
        updatedProfile += '‚ú® **13. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© (Special Features)**\n';
        if (uniqueTraits) updatedProfile += `- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞: ${uniqueTraits}\n`;
        if (specialEffects) updatedProfile += `- ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${specialEffects}\n`;
        updatedProfile += '\n';
    }
    
    // 14. ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
    if (realismType) {
        updatedProfile += 'üñºÔ∏è **14. ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (Visual Style)**\n';
        updatedProfile += `- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á: ${realismType}\n`;
    }
    
    // Log the profile
    console.log('Updated profile:', updatedProfile);
    console.log('Profile length:', updatedProfile.length);
    
    // Make sure we have some content
    if (!updatedProfile || updatedProfile.trim() === 'üìã CHARACTER IDENTITY TEMPLATE\n\n') {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á');
        return;
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢
    console.log('Saving character directly...');
    
    ensureUserId();
    const characterId = window.editingCharacter.id;
    const characterName = window.editingCharacter.name;
    
    fetch(`${API_URL}/characters/${characterId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'X-User-ID': userId
        },
        body: JSON.stringify({
            name: characterName,
            profile: updatedProfile,
            preview: updatedProfile.substring(0, 500)
        })
    })
    .then(response => {
        console.log('Response status:', response.status);
        if (response.ok) {
            // ‡∏õ‡∏¥‡∏î modal
            closeCharacterTemplate();
            
            // Clear data
            window.editingCharacter = null;
            window.tempUpdatedProfile = null;
            
            // ‡πÇ‡∏´‡∏•‡∏î library ‡πÉ‡∏´‡∏°‡πà
            loadCharacterLibrary();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            showNotification('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        } else {
            return response.text().then(text => {
                throw new Error(`Failed: ${response.status} - ${text}`);
            });
        }
    })
    .catch(error => {
        console.error('Error saving:', error);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: ' + error.message);
    });
}

// Cancel edit character
function cancelEditCharacter() {
    // Close modal
    closeCharacterTemplate();
    
    // Clear editing data
    window.editingCharacter = null;
    
    // Restore original button
    const modal = document.getElementById('characterTemplateModal');
    const actionsDiv = modal.querySelector('.template-actions');
    if (actionsDiv) {
        actionsDiv.innerHTML = `
            <button class="generate-from-template-btn" onclick="generateFromCharacterTemplate()">
                ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile
            </button>
        `;
    }
}

// Update character  
async function updateCharacter() {
    console.log('=== updateCharacter called ===');
    console.log('window.editingCharacter:', window.editingCharacter);
    console.log('window.tempUpdatedProfile:', window.tempUpdatedProfile?.substring(0, 100) + '...');
    
    if (!window.editingCharacter) {
        console.error('No editing character in updateCharacter');
        alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
        return;
    }
    
    // Use the profile from saveEditedCharacter if available
    const updatedProfile = window.tempUpdatedProfile || '';
    
    if (!updatedProfile) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£');
        return;
    }
    
    // Direct update without name dialog
    try {
        ensureUserId();
        console.log('Updating character ID:', window.editingCharacter.id);
        console.log('User ID:', userId);
        console.log('Character name:', window.editingCharacter.name);
        
        const requestBody = {
            name: window.editingCharacter.name, // Keep existing name
            profile: updatedProfile,
            preview: updatedProfile.substring(0, 500)
        };
        console.log('Request body:', requestBody);
        console.log('Fetch URL:', `${API_URL}/characters/${window.editingCharacter.id}`);
        
        const response = await fetch(`${API_URL}/characters/${window.editingCharacter.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-User-ID': userId
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('Response status:', response.status);
        console.log('Response ok:', response.ok);
        
        if (response.ok) {
            // Close modal
            closeCharacterTemplate();
            
            // Clear editing data
            window.editingCharacter = null;
            window.tempUpdatedProfile = null;
            
            // Reload library
            loadCharacterLibrary();
            
            // Show success message
            showNotification('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        } else {
            throw new Error('Failed to update character');
        }
    } catch (error) {
        console.error('Error updating character:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£');
    }
}

// Confirm update character
async function confirmUpdateCharacter(updatedProfile) {
    const newName = document.getElementById('editCharacterName').value.trim();
    if (!newName) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£');
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/characters/${window.editingCharacter.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: newName,
                profile: updatedProfile,
                preview: updatedProfile.substring(0, 500)
            })
        });
        
        if (response.ok) {
            // Close modals
            document.querySelector('.modal').remove();
            closeCharacterTemplate();
            
            // Reload library
            loadCharacterLibrary();
            
            // Show success message
            showNotification('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        } else {
            throw new Error('Failed to update character');
        }
    } catch (error) {
        console.error('Error updating character:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£');
    }
    
    // Clear editing data
    window.editingCharacter = null;
}

// ========== API STATUS CHECK ==========
async function checkAPIStatus() {
    try {
        const response = await fetch(`${API_URL.replace('/api', '')}/test`);
        const data = await response.json();
        
        const statusDot = document.getElementById('statusDot');
        const statusText = document.getElementById('statusText');
        const apiStatus = document.getElementById('apiStatus');
        
        if (data.hasAssistantId && data.hasDatabase) {
            statusDot.style.background = '#10b981';
            statusText.textContent = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
            apiStatus.textContent = '‚úÖ System Ready';
        } else if (!data.hasAssistantId) {
            statusDot.style.background = '#f59e0b';
            statusText.textContent = '‡πÑ‡∏°‡πà‡∏°‡∏µ Assistant ID';
            apiStatus.textContent = '‚ö†Ô∏è No Assistant';
        } else if (!data.hasDatabase) {
            statusDot.style.background = '#f59e0b';
            statusText.textContent = '‡πÑ‡∏°‡πà‡∏°‡∏µ Database';
            apiStatus.textContent = '‚ö†Ô∏è No Database';
        } else {
            statusDot.style.background = '#f59e0b';
            statusText.textContent = 'Demo Mode';
            apiStatus.textContent = '‚ö†Ô∏è Demo Mode';
        }
    } catch (error) {
        document.getElementById('statusDot').style.background = '#ef4444';
        document.getElementById('statusText').textContent = '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
        document.getElementById('apiStatus').textContent = '‚ùå Offline';
    }
}

// ========== USAGE DISPLAY ==========
async function updateUsageDisplay() {
    try {
        const response = await fetch(`${API_URL}/usage/${userId}`);
        const data = await response.json();
        
        // Sync credits to cloud if logged in
        syncCreditsToCloud();
        
        if (data.today) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            const used = parseFloat(data.today.used) || 0;
            const limit = parseFloat(data.today.limit) || 5;
            const remaining = Math.max(0, limit - used); // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö)
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì percentage (100% = ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ï‡πá‡∏°, 0% = ‡∏´‡∏°‡∏î)
            const percentage = (remaining / limit) * 100;
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress bar
            const progressBar = document.getElementById('usageProgress');
            progressBar.style.width = percentage + '%';
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            document.getElementById('usageText').textContent = `üí∞${remaining.toFixed(2)}/${limit}`;
            
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ progress bar ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            if (percentage <= 0) {
                // ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
                progressBar.style.background = 'linear-gradient(90deg, #ef4444, #dc2626)';
            } else if (percentage <= 20) {
                // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢ - ‡∏™‡∏µ‡∏™‡πâ‡∏°
                progressBar.style.background = 'linear-gradient(90deg, #f59e0b, #d97706)';
            } else {
                // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞ - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                progressBar.style.background = 'linear-gradient(90deg, #10b981, #34d399)';
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á tooltip ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            const usageBar = document.querySelector('.usage-bar');
            if (usageBar) {
                usageBar.title = `‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${remaining.toFixed(2)} ‡∏ö‡∏≤‡∏ó ‡∏à‡∏≤‡∏Å ${limit} ‡∏ö‡∏≤‡∏ó`;
            }
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ - ‡πÉ‡∏ä‡πâ userCredits ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°
            loadUserCredits(); // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
    } catch (error) {
        console.error('Error updating usage:', error);
    }
} 
// ========== IMAGE MANAGEMENT ==========
function showImageUrlDialog() {
    document.getElementById('imageUrlDialog').style.display = 'flex';
    document.getElementById('imageUrlInput').focus();
}

function closeImageUrlDialog() {
    document.getElementById('imageUrlDialog').style.display = 'none';
    document.getElementById('imageUrlInput').value = '';
}

function addImageUrl() {
    const input = document.getElementById('imageUrlInput');
    const url = input.value.trim();
    
    if (!url) return;
    
    window.imageUrls.push({
        url: url,
        name: 'image.jpg'
    });
    
    displayImagePreview();
    closeImageUrlDialog();
}

function displayImagePreview() {
    const preview = document.getElementById('imagePreview');
    preview.innerHTML = '';
    
    window.imageUrls.forEach((img, index) => {
        const div = document.createElement('div');
        div.className = 'image-preview-item';
        div.innerHTML = `
            <img src="${img.url}" alt="${img.name}" 
                 onerror="this.src='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2260%22 height=%2260%22><text x=%2250%%22 y=%2250%%22 text-anchor=%22middle%22 dy=%22.3em%22 fill=%22%23666%22>Error</text></svg>'">
            <button class="remove-btn" onclick="removeImage(${index})">√ó</button>
        `;
        preview.appendChild(div);
    });
}

function removeImage(index) {
    window.imageUrls.splice(index, 1);
    displayImagePreview();
}

// ========== SEND MESSAGE ==========
window.sendMessage = async function() {
    if (isProcessing) return;
    
    const input = document.getElementById('messageInput');
    let message = input.value.trim();
    
    if (!message && window.imageUrls.length === 0) {
        return;
    }
    
    if (!message && window.imageUrls.length > 0) {
    if (currentMode === 'character') {
        message = `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 14 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:

üìã **CHARACTER IDENTITY TEMPLATE (Prompt D)**

üë§ **1. ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Name / Role)**
- ‡∏ä‡∏∑‡πà‡∏≠: (‡∏ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö)
- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å: ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡∏£‡∏û‡∏ô‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏î‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡πÄ‡∏î‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡∏ä‡∏≤‡∏¢", "‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô‡∏´‡∏ç‡∏¥‡∏á" ‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
- ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û/‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å

üßë‚Äçüé® **2. ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ (Gender / Age / Ethnicity)**
- ‡πÄ‡∏û‡∏®: ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®
- ‡∏≠‡∏≤‡∏¢‡∏∏: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á (‡πÄ‡∏ä‡πà‡∏ô 25-30 ‡∏õ‡∏µ)
- ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥/‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏•‡∏±‡∏á

üíÉ **3. ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß (Body / Skin)**
- ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á: ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á & ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ
- ‡∏™‡∏µ‡∏ú‡∏¥‡∏ß: ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ú‡∏¥‡∏ß

üë§ **4. ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Face)**
- ‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤: ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡∏ô‡πâ‡∏≤: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô

üëÅÔ∏è **5. ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß (Eyes / Eyebrows)**
- ‡∏î‡∏ß‡∏á‡∏ï‡∏≤: ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á ‡∏™‡∏µ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
- ‡∏Ñ‡∏¥‡πâ‡∏ß: ‡∏ó‡∏£‡∏á‡∏Ñ‡∏¥‡πâ‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤

üëÑ **6. ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å (Lips)**
- ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å: ‡∏™‡∏µ ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©

üíá‚Äç‚ôÄÔ∏è **7. ‡∏ú‡∏° (Hair)**
- ‡∏ó‡∏£‡∏á‡∏ú‡∏°: ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏ó‡∏£‡∏á‡∏ú‡∏°
- ‡∏™‡∏µ‡∏ú‡∏°: ‡∏™‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≠‡∏°
- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏°: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡∏°

üëó **8. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢ (Outfit)**
- ‡πÄ‡∏™‡∏∑‡πâ‡∏≠: ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡∏™‡∏µ
- ‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á/‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á: ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡∏™‡∏µ
- ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°: (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
- ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤: (‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ)
- ‡∏ß‡∏±‡∏™‡∏î‡∏∏/‡∏ú‡πâ‡∏≤: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏

üíé **9. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö (Accessories)**
- ‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞: ‡∏´‡∏°‡∏ß‡∏Å ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ú‡∏°
- ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ‡∏™‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π
- ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡πÅ‡∏ß‡πà‡∏ô ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ ‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î

üé≠ **10. ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û (Personality)**
- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ô‡∏¥‡∏™‡∏±‡∏¢: ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏¢
- ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡∏™‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏¥‡∏ô

üï¥Ô∏è **11. ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Starting Pose)**
- ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ
- ‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏¢: ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠ ‡∏ó‡πà‡∏≤‡∏¢‡∏∑‡∏ô

üéôÔ∏è **12. ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Voice Tone)**
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏à‡∏≤‡∏Å‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å
- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
- ‡∏™‡∏≥‡πÄ‡∏ô‡∏µ‡∏¢‡∏á: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• ‡∏ó‡∏∏‡πâ‡∏° ‡πÉ‡∏™

‚ú® **13. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© (Special Features)**
- ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞: ‡πÑ‡∏ù ‡∏£‡∏≠‡∏¢‡∏™‡∏±‡∏Å ‡∏•‡∏±‡∏Å‡∏¢‡∏¥‡πâ‡∏°
- ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©: (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°)

üñºÔ∏è **14. ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (Visual Style)**
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á: Photorealistic Human / 3D Anime Style / Semi-Real
- ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß

‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡πÑ‡∏°‡πà‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô`;
    } else {
        message = "‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ";
    }
}
    
    isProcessing = true;
    input.disabled = true;
    document.getElementById('sendButton').disabled = true;
    
    // Clean timestamp patterns from message before displaying
    let cleanedMessage = message.replace(/\d{2}:\d{2} ‚Ä¢ \d{1,2} .+? \d{4}/g, '').trim();
    
    let displayMessage = cleanedMessage;
    if (window.imageUrls.length > 0) {
        displayMessage += ` <span style="color: #a1a1aa;">(‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ ${window.imageUrls.length} ‡∏£‡∏π‡∏õ)</span>`;
    }
    addMessage(displayMessage, 'user');
    
    input.value = '';
    
    const loadingId = addLoadingMessage();

    
    try {
        // Map promptmaster to multichar for backend
        const apiMode = currentMode === 'promptmaster' ? 'multichar' : currentMode;
        
        const response = await fetch(`${API_URL}/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message,
                userId,
                images: window.imageUrls,
                mode: apiMode
            })
        });
        
        const data = await response.json();
        
        removeMessage(loadingId);
        
        if (response.ok) {
            if (currentMode === 'imagegen') {
        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡∏ô
        removeMessage(loadingId);
        generateImage(message);
        // Reset processing state for imagegen
        isProcessing = false;
        input.disabled = false;
        document.getElementById('sendButton').disabled = false;
        return;
    }
    if (currentMode === 'chat') {
        // AI Chat mode
        removeMessage(loadingId);
        sendChatMessage(message);
        // Reset processing state for chat
        isProcessing = false;
        input.disabled = false;
        document.getElementById('sendButton').disabled = false;
        return;
    }
            if (currentMode === 'character') {
                currentCharacterProfile = data.response;
                addMessage(data.response, 'assistant', false, true);
            } else {
                console.log('=== Response from AI ===');
                console.log('Response:', data.response);
                console.log('Original message:', message);
                addMessage(data.response, 'assistant', true);
            }
            
            if (data.usage && data.usage.cost) {
                showUsageInfo(data.usage.cost);
            }
            
            
            updateUsageDisplay();
            // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
loadUserCredits();
            loadTotalPurchasedCredits();
            
            window.imageUrls = [];
            displayImagePreview();
            
        } else if (response.status === 429) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô limit ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
            if (data.error === 'Insufficient credits') {
                showCreditRequiredMessage(data);
            } else {
                // Daily limit ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
                addMessage(`
                    <div style="color: #ef4444;">
                        <strong>‚ùå ${data.message}</strong><br>
                        <span style="color: #a1a1aa;">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ</span>
                    </div>
                `, 'assistant');
            }
        } else {
    // Check if it's a thread error that needs retry
    if (data.shouldRetry || data.clearThread || 
    (data.error && (data.error.includes('invalid_image_format') || 
                    data.error.includes('thread') ||
                    data.error.includes('Thread')))) {
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå thread ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const threadKey = `${userId}_${mode}`;
    userThreads.delete(threadKey);
    console.log('üîÑ Auto-clearing problematic thread');
        addMessage(`‚ö†Ô∏è Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà...`, 'assistant');
        
        // Wait a bit then retry automatically
        setTimeout(() => {
            // Re-enable input
            isProcessing = false;
            input.disabled = false;
            document.getElementById('sendButton').disabled = false;
            
            // Put the message back
            input.value = message;
            
            // Try again
            addMessage(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...`, 'assistant');
            sendMessage();
        }, 2000);
        
    } else {
        // Other errors
        addMessage(`‚ùå Error: ${data.error || 'Something went wrong'}`, 'assistant');
        
        // Re-enable input for other errors
        isProcessing = false;
        input.disabled = false;
        document.getElementById('sendButton').disabled = false;
    }
        }
    } catch (error) {
        removeMessage(loadingId);
        console.error('Error:', error);
        addMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', 'assistant');
    } finally {
        isProcessing = false;
        input.disabled = false;
        document.getElementById('sendButton').disabled = false;
        input.focus();
    }
}

// ========== MESSAGE DISPLAY ==========
function addMessage(content, type, isVeoPrompt = false, isCharacterProfile = false) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    const id = `msg-${messageId++}`;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp
    const now = new Date();
    const timeString = now.toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
    const dateString = now.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
    
    messageDiv.id = id;
    messageDiv.className = `message ${type}`;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const timestampHTML = `<div class="message-timestamp">${timeString} ‚Ä¢ ${dateString}</div>`;
    
    if (type === 'user') {
        // Preserve line breaks in user messages
        const formattedContent = content.replace(/\n/g, '<br>');
        messageDiv.innerHTML = `
            <div class="message-avatar">üë§</div>
            <div class="message-content">
                ${formattedContent}
                ${timestampHTML}
            </div>
        `;
    } else if (isCharacterProfile) {
        messageDiv.innerHTML = `
            <div class="message-avatar">ü§ñ</div>
            <div class="message-content">
                ${formatCharacterProfile(content)}
                ${timestampHTML}
            </div>
        `;
    } else if (isVeoPrompt) {
        messageDiv.innerHTML = `
            <div class="message-avatar">ü§ñ</div>
            <div class="message-content">
                ${formatVeoPrompt(content)}
                ${timestampHTML}
            </div>
        `;
    } else {
        // Preserve line breaks in assistant messages too
        const formattedContent = content.replace(/\n/g, '<br>');
        messageDiv.innerHTML = `
            <div class="message-avatar">ü§ñ</div>
            <div class="message-content">
                ${formattedContent}
                ${timestampHTML}
            </div>
        `;
    }
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // Auto-save after adding any message (both user and assistant)
    if (currentMode === 'promptmaster' || currentMode === 'multichar') {
        setTimeout(() => {
            PromptStorage.save('multichar');
        }, 100);
    } else if (currentMode === 'image') {
        setTimeout(() => {
            ImagePromptStorage.save();
        }, 100);
    }
    
    return id;
}

function formatCharacterProfile(response) {
    const formattedResponse = response
        .replace(/\n\n/g, '<br><br>')
        .replace(/\n/g, '<br>')
        .replace(/\*\s/g, '‚Ä¢ ');
    
    return `
        <div>‚ú® Character Profile ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</div>
        <div class="character-profile">
            <div class="prompt-header">üë§ Character Profile:</div>
            <div class="prompt-content">${formattedResponse}</div>
            <div class="profile-actions">
                <button class="copy-btn" onclick="copyPrompt(this)">üìã Copy Profile</button>
                <button class="save-btn" onclick="showSaveDialog()">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£</button>
            </div>
        </div>
    `;
}

function formatVeoPrompt(response) {
    // Generate unique ID for this prompt
    const promptId = 'prompt_' + Date.now();
    
    // Store prompt data
    lastPromptData = {
        promptId: promptId,
        promptText: document.querySelector('.message.user:last-child .message-content').textContent,
        responseText: response,
        mode: currentMode
    };
    
    const formattedResponse = response
        .replace(/\n\n/g, '<br><br>')
        .replace(/\n/g, '<br>')
        .replace(/\*\s/g, '‚Ä¢ ');
    
    const isFav = isFavorited(response);
    
    // Check if this is image mode
    if (currentMode === 'image') {
        return `
        <div>‚ú® Image Prompt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</div>
        <div class="veo3-prompt">
            <div class="prompt-header">üñºÔ∏è Image Prompt:</div>
            <div class="prompt-content" id="promptContent-${promptId}">${formattedResponse}</div>
            <div class="prompt-actions">
                <button class="copy-btn" onclick="copyPrompt(this)">üìã Copy Prompt</button>
                <button class="favorite-btn ${isFav ? 'favorited' : ''}" id="favBtn-${promptId}" onclick="toggleFavorite('${promptId}')">
                    ${isFav ? '‚≠ê Favorited' : '‚≠ê Add to Favorites'}
                </button>
                <button class="share-btn" onclick="sharePromptById('${promptId}')">
                    üì§ Share
                </button>
                <button class="image-gen-internal-btn" onclick="switchToImageGen()">
                    üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
                </button>
                <button class="image-gen-external-btn" onclick="openExternalImageGen()">
                    üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
                </button>
            </div>
        </div>
        `;
    }
    
    // Default format for other modes
    return `
    <div>‚ú® Veo Prompt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</div>
    <div class="veo3-prompt">
        <div class="prompt-header">üé¨ Veo Prompt:</div>
        <div class="prompt-content" id="promptContent-${promptId}">${formattedResponse}</div>
        <div class="prompt-actions">
            <button class="copy-btn" onclick="copyPrompt(this)">üìã Copy Prompt</button>
            <button class="favorite-btn ${isFav ? 'favorited' : ''}" id="favBtn-${promptId}" onclick="toggleFavorite('${promptId}')">
                ${isFav ? '‚≠ê Favorited' : '‚≠ê Add to Favorites'}
            </button>
            <button class="share-btn" onclick="sharePromptById('${promptId}')">
                üì§ Share
            </button>
            <button class="json-btn" onclick="requestJSON('${promptId}')">
                üìÑ JSON
            </button>
            <button class="continue-btn" onclick="continueScene('${promptId}')">
                üé¨ ‡∏ï‡πà‡∏≠‡∏â‡∏≤‡∏Å
            </button>
        </div>
        <!-- Rating ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô veo3-prompt -->
        <div class="rating-section" id="rating-${promptId}">
            <div class="rating-header">‚≠ê ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Prompt ‡∏ô‡∏µ‡πâ:</div>
            <div class="star-rating" onmouseleave="resetStarPreview('${promptId}')">
                ${[1,2,3,4,5].map(star => `
                    <span class="star" data-rating="${star}" 
                          onclick="ratePrompt('${promptId}', ${star})"
                          onmouseover="previewStars('${promptId}', ${star})"
                          title="${star} ‡∏î‡∏≤‡∏ß">
                        ‚òÜ
                    </span>
                `).join('')}
            </div>
            <div class="rating-labels">
                <span>‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å</span>
                <span>‡πÅ‡∏¢‡πà</span>
                <span>‡∏û‡∏≠‡πÉ‡∏ä‡πâ</span>
                <span>‡∏î‡∏µ</span>
                <span>‡∏î‡∏µ‡∏°‡∏≤‡∏Å</span>
            </div>
            <textarea 
                id="feedback-${promptId}"
                class="rating-feedback"
                placeholder="‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                rows="2"
                style="display: none;"
            ></textarea>
        </div>
    </div>  <!-- ‡∏õ‡∏¥‡∏î veo3-prompt -->
`;
}

function toggleFavorite(promptId) {
    const promptElement = document.getElementById(`promptContent-${promptId}`);
    const favBtn = document.getElementById(`favBtn-${promptId}`);
    
    if (!promptElement) return;
    
    const promptText = promptElement.innerHTML
        .replace(/<br><br>/g, '\n\n')
        .replace(/<br>/g, '\n')
        .replace(/‚Ä¢ /g, '* ')
        .replace(/<[^>]*>/g, '');
    
    if (isFavorited(promptText)) {
        // Remove from favorites
        const favorites = loadFavorites();
        const filtered = favorites.filter(fav => fav.prompt !== promptText);
        saveFavorites(filtered);
        
        favBtn.classList.remove('favorited');
        favBtn.innerHTML = '‚≠ê Add to Favorites';
        showNotification('‚ùå ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Favorites ‡πÅ‡∏•‡πâ‡∏ß', 'info');
    } else {
        // Add to favorites
        addToFavorites(promptText);
        favBtn.classList.add('favorited');
        favBtn.innerHTML = '‚≠ê Favorited';
    }
}

function sharePromptById(promptId) {
    const promptElement = document.getElementById(`promptContent-${promptId}`);
    if (!promptElement) return;
    
    const promptText = promptElement.innerHTML
        .replace(/<br><br>/g, '\n\n')
        .replace(/<br>/g, '\n')
        .replace(/‚Ä¢ /g, '* ')
        .replace(/<[^>]*>/g, '');
    
    sharePrompt(promptText);
}

// Close modals on click outside
window.onclick = function(event) {
    if (event.target.classList.contains('templates-modal')) {
        event.target.style.display = 'none';
    }
}

function copyPrompt(button) {
    // ‡∏´‡∏≤ prompt content ‡∏à‡∏≤‡∏Å parent element
    let promptElement = null;
    const parent = button.closest('.veo3-prompt, .character-profile');
    
    if (parent) {
        promptElement = parent.querySelector('.prompt-content');
    }
    
    if (!promptElement) {
        console.error('Cannot find prompt content');
        return;
    }
    
    // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å browser
    let fullText = '';
    
    // Clone element ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö DOM ‡∏à‡∏£‡∏¥‡∏á
    const clonedElement = promptElement.cloneNode(true);
    
    // Check if this is image mode prompt
    if (currentMode === 'image' && promptElement.innerHTML.includes('üá∫üá∏ **English Prompt')) {
        // Extract only English prompt for image mode
        const html = promptElement.innerHTML;
        const text = promptElement.textContent;
        
        // Try to find the English section using different patterns
        const englishStart = text.indexOf('üá∫üá∏ **English Prompt');
        const thaiStart = text.indexOf('üáπüá≠ **‡∏û‡πâ‡∏≠‡∏°');
        
        if (englishStart !== -1 && thaiStart !== -1) {
            // Get text between English and Thai sections
            let englishSection = text.substring(englishStart, thaiStart).trim();
            
            // Remove the header and bullet
            englishSection = englishSection
                .replace(/üá∫üá∏\s*\*\*English Prompt\*[\*‚Ä¢]?\s*/g, '')
                .replace(/^1\.\s*/, '') // Remove numbering if present
                .trim();
            
            // Remove the divider line and any trailing numbers
            englishSection = englishSection
                .replace(/---\s*$/m, '')
                .replace(/---\s*\d+\.?\s*$/m, '')
                .trim();
            
            fullText = englishSection;
        } else {
            // Fallback to original method
            fullText = text;
        }
    } else {
        // Original method for other modes
        const text = promptElement.textContent || promptElement.innerText || '';
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON format ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏µ ```json)
        if (text.includes('```json') && text.includes('```')) {
            // Extract JSON content
            const jsonStart = text.indexOf('```json');
            const jsonEnd = text.lastIndexOf('```');
            
            if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
                // Get HTML content to preserve formatting
                const htmlContent = promptElement.innerHTML;
                
                // Try to extract formatted JSON from HTML
                const jsonPattern = /```json([\s\S]*?)```/;
                const match = htmlContent.match(jsonPattern);
                
                if (match && match[1]) {
                    // Clean up HTML tags but preserve line breaks
                    let jsonContent = match[1]
                        .replace(/<br\s*\/?>/gi, '\n')
                        .replace(/<\/?(div|p|span)[^>]*>/gi, '')
                        .replace(/&nbsp;/g, ' ')
                        .replace(/&quot;/g, '"')
                        .replace(/&lt;/g, '<')
                        .replace(/&gt;/g, '>')
                        .replace(/&amp;/g, '&')
                        .trim();
                    
                    fullText = '```json\n' + jsonContent + '\n```';
                } else {
                    // Fallback: extract from text
                    fullText = text.substring(jsonStart, jsonEnd + 3).trim();
                }
            } else {
                // Fallback ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ JSON block ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
                fullText = text;
            }
        } else {
            // ‡πÅ‡∏õ‡∏•‡∏á br tags ‡πÄ‡∏õ‡πá‡∏ô newlines
            const brElements = clonedElement.getElementsByTagName('br');
            for (let i = brElements.length - 1; i >= 0; i--) {
                const br = brElements[i];
                const textNode = document.createTextNode('\n');
                br.parentNode.replaceChild(textNode, br);
            }
            
            // ‡∏î‡∏∂‡∏á text content
            fullText = clonedElement.textContent || clonedElement.innerText || '';
            
            // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î text
            fullText = fullText
                .replace(/‚Ä¢\s/g, '* ')
                .replace(/\n{3,}/g, '\n\n')
                .trim();
        }
    }
    
    let finalPrompt = '';
    
    // If we already have the full text for image mode, use it
    if (currentMode === 'image' && fullText && !fullText.includes('VEO3 MULTI-CHARACTER SCENE')) {
        finalPrompt = fullText;
    } else if (fullText.includes('```json')) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON format ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fullText ‡∏ó‡∏µ‡πà extract ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        finalPrompt = fullText;
    } else {
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Prompt Master format ‡πÉ‡∏´‡∏°‡πà
    if (fullText.includes('VEO3 MULTI-CHARACTER SCENE') || 
        fullText.includes('SETTING & ENVIRONMENT') ||
        fullText.includes('CHARACTER ROSTER')) {
        
        console.log('Detected new Prompt Master format');
        
        // ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (emoji üé¨ ‡∏´‡∏£‡∏∑‡∏≠ VEO3)
        const startIndex = fullText.search(/üé¨|VEO3 MULTI-CHARACTER SCENE/);
        
        // ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏´‡∏•‡∏±‡∏á VISUAL EFFECTS ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
        const visualEffectsIndex = fullText.lastIndexOf('VISUAL EFFECTS');
        let endIndex = fullText.length;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ``` (code block) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const codeBlockEnd = fullText.lastIndexOf('```');
        if (codeBlockEnd !== -1 && codeBlockEnd > visualEffectsIndex) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ code block ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏±‡πâ‡∏ô
            endIndex = codeBlockEnd + 3; // +3 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏° ``` ‡∏î‡πâ‡∏ß‡∏¢
        }
        
        if (visualEffectsIndex !== -1) {
            // ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á VISUAL EFFECTS
            const afterVisualEffects = fullText.substring(visualEffectsIndex);
            const lines = afterVisualEffects.split('\n');
            
            // ‡∏ô‡∏±‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á)
            let contentLines = 0;
            let lastContentIndex = 0;
            
            for (let i = 0; i < lines.length; i++) {
                if (lines[i].trim().length > 0) {
                    contentLines++;
                    lastContentIndex = i;
                }
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
                if (lines[i].match(/[\u0E00-\u0E7F]|‡∏™‡∏£‡∏∏‡∏õ|Summary/)) {
                    break;
                }
            }
            
            // ‡∏ï‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            const cutLines = lines.slice(0, lastContentIndex + 1).join('\n');
            endIndex = visualEffectsIndex + cutLines.length;
        }
        
        if (startIndex !== -1) {
            finalPrompt = fullText.substring(startIndex, endIndex).trim();
        }
        
    } else if (currentMode === 'multichar' || fullText.includes('[Scene Setup]') || fullText.includes('[Settings / Scene]')) {
        // Format ‡πÄ‡∏Å‡πà‡∏≤
        const thaiIndex = fullText.search(/[\u0E00-\u0E7F]/);
        const summaryIndex = fullText.search(/(\*\*)?‡∏™‡∏£‡∏∏‡∏õ|Summary|üìå|üìΩÔ∏è|üé¨|‚è±Ô∏è/i);
        
        let cutoffIndex = fullText.length;
        
        if (thaiIndex !== -1) {
            cutoffIndex = Math.min(cutoffIndex, thaiIndex);
        }
        if (summaryIndex !== -1) {
            cutoffIndex = Math.min(cutoffIndex, summaryIndex);
        }
        
        finalPrompt = fullText.substring(0, cutoffIndex).trim();
        
    } else if (fullText.includes('Professional Music Video Prompt') || fullText.includes('[Visual Style]')) {
        // Music Video format
        const visualStyleEnd = fullText.lastIndexOf('[Visual Style]');
        if (visualStyleEnd !== -1) {
            const nextSectionStart = fullText.indexOf('\n\n', visualStyleEnd + 100);
            finalPrompt = fullText.substring(0, nextSectionStart > 0 ? nextSectionStart : fullText.length).trim();
        } else {
            const thaiIndex = fullText.search(/[‡∏Å-‡πô]/);
            finalPrompt = thaiIndex > 0 ? fullText.substring(0, thaiIndex).trim() : fullText;
        }
    } else {
        // General format
        const veoPromptMatch = fullText.match(/Veo 3 Prompt:[\s\S]*?(?=\n{1,2}(?:üìΩÔ∏è|üé¨|‚è±Ô∏è|üìå|\*\*‡∏™‡∏£‡∏∏‡∏õ|‡∏™‡∏£‡∏∏‡∏õ))/);
        if (veoPromptMatch) {
            finalPrompt = veoPromptMatch[0].trim();
        } else {
            const stopPatterns = [/üìΩÔ∏è/, /üé¨/, /‚è±Ô∏è/, /üìå/, /[‡∏Å-‡πô]/];
            let cutoffIndex = fullText.length;
            
            for (const pattern of stopPatterns) {
                const match = fullText.search(pattern);
                if (match !== -1 && match < cutoffIndex) {
                    cutoffIndex = match;
                }
            }
            
            finalPrompt = fullText.substring(0, cutoffIndex).trim();
        }
    }
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prompt Master - ‡∏ï‡∏±‡∏î‡∏ó‡∏µ‡πà "All dialogue is AUDIO ONLY" + ```
    if (currentMode === 'promptmaster' || finalPrompt.includes('AUDIO ONLY')) {
        const audioOnlyIndex = finalPrompt.indexOf('All dialogue is AUDIO ONLY');
        if (audioOnlyIndex !== -1) {
            // ‡∏´‡∏≤ ``` ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å AUDIO ONLY
            const afterAudioOnly = finalPrompt.substring(audioOnlyIndex);
            const codeBlockIndex = afterAudioOnly.indexOf('```');
            
            if (codeBlockIndex !== -1) {
                // ‡∏ï‡∏±‡∏î‡∏ó‡∏µ‡πà ``` (‡∏£‡∏ß‡∏° ``` ‡∏î‡πâ‡∏ß‡∏¢)
                finalPrompt = finalPrompt.substring(0, audioOnlyIndex + codeBlockIndex + 3);
            }
        }
    }
    
    // ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢
    finalPrompt = finalPrompt.replace(/\n\s*\n\s*$/g, '\n');
    
    if (!finalPrompt || finalPrompt.length === 0) {
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞ copy', 'error');
        return;
    }
    
    // Copy to clipboard
    navigator.clipboard.writeText(finalPrompt).then(() => {
        const originalText = button.innerHTML;
        button.innerHTML = '‚úÖ Copied!';
        
        showNotification(`üìã Copied prompt (${finalPrompt.length} chars)`, 'success');
        
        setTimeout(() => {
            button.innerHTML = originalText;
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy:', err);
        
        // Fallback method
        const textArea = document.createElement('textarea');
        textArea.value = finalPrompt;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            const originalText = button.innerHTML;
            button.innerHTML = '‚úÖ Copied!';
            
            showNotification(`üìã Copied prompt (${finalPrompt.length} chars)`, 'success');
            
            setTimeout(() => {
                button.innerHTML = originalText;
            }, 2000);
        } catch (err) {
            console.error('Fallback copy failed:', err);
            showNotification('‚ùå Failed to copy', 'error');
        }
        
        document.body.removeChild(textArea);
    });
}

function addLoadingMessage() {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    const id = `msg-${messageId++}`;
    
    messageDiv.id = id;
    messageDiv.className = 'message assistant';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ mode
    let loadingText;
    switch(currentMode) {
        case 'chat':
            loadingText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...';
            break;
        case 'character':
            loadingText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...';
            break;
        case 'image':
            loadingText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Image Prompt ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...';
            break;
        case 'imagegen':
            loadingText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° prompt ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...';
            break;
        default:
            loadingText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Cinematic Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vdo ‡∏Ç‡∏±‡πâ‡∏ô‡πÄ‡∏ó‡∏û...';
    }
    
    messageDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div class="typing-indicator">
                <span></span><span></span><span></span>
            </div>
            ${loadingText}
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return id;
}

function removeMessage(msgId) {
    const message = document.getElementById(msgId);
    if (message) message.remove();
}

function showUsageInfo(cost) {
    const messagesContainer = document.getElementById('chatMessages');
    const infoDiv = document.createElement('div');
    infoDiv.style.cssText = `
        text-align: center;
        padding: 8px 16px;
        margin: 8px auto;
        background: rgba(147, 51, 234, 0.1);
        border-radius: 8px;
        font-size: 14px;
        color: #a1a1aa;
    `;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const used = parseFloat(cost.today_total);
    const limit = parseFloat(cost.daily_limit);
    const remaining = Math.max(0, limit - used);
    
    infoDiv.innerHTML = `
        üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: <strong style="color: #9333ea;">‡∏ø${cost.this_request}</strong> | 
        ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <strong style="color: ${remaining > 0 ? '#10b981' : '#ef4444'};">‡∏ø${remaining.toFixed(2)}/${limit}</strong>
    `;
    messagesContainer.appendChild(infoDiv);
}

// ========== SAVE CHARACTER DIALOG ==========
function showSaveDialog() {
    document.getElementById('saveCharacterDialog').style.display = 'flex';
    document.getElementById('characterNameInput').focus();
}

function closeSaveDialog() {
    document.getElementById('saveCharacterDialog').style.display = 'none';
    document.getElementById('characterNameInput').value = '';
}

async function saveCharacter() {
    const nameInput = document.getElementById('characterNameInput');
    const name = nameInput.value.trim();
    
    if (!name) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£');
        return;
    }
    
    if (!currentCharacterProfile) {
        alert('‡πÑ‡∏°‡πà‡∏°‡∏µ Character Profile ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
        return;
    }
    
    const profileText = currentCharacterProfile
        .replace(/<br><br>/g, '\n\n')
        .replace(/<br>/g, '\n')
        .replace(/‚Ä¢ /g, '* ')
        .replace(/<[^>]*>/g, '');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á structured data ‡∏à‡∏≤‡∏Å characterTemplateData (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let structuredData = null;
    if (characterTemplateData && Object.keys(characterTemplateData).length > 0) {
        structuredData = {
            ...characterTemplateData
        };
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview
    let previewText = profileText;
    if (structuredData && structuredData.nickname) {
        previewText = `${structuredData.nickname} - ${structuredData.gender || 'N/A'}, ${structuredData.age || 'N/A'}`;
        if (structuredData.role) {
            previewText += ` (${structuredData.role})`;
        }
    } else {
        // ‡πÉ‡∏ä‡πâ 300 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô preview
        previewText = profileText.substring(0, 300) + '...';
    }
    
    try {
        const response = await fetch(`${API_URL}/characters`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                name,
                profile: profileText,
                preview: previewText,
                structuredData: structuredData // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
            })
        });
        
        if (response.ok) {
            closeSaveDialog();
            loadCharacterLibrary();
            
            const messagesContainer = document.getElementById('chatMessages');
            const successDiv = document.createElement('div');
            successDiv.style.cssText = `
                text-align: center;
                padding: 12px 20px;
                margin: 12px auto;
                background: rgba(16, 185, 129, 0.1);
                border: 1px solid rgba(16, 185, 129, 0.3);
                border-radius: 8px;
                color: #10b981;
            `;
            successDiv.innerHTML = `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ "${name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`;
            messagesContainer.appendChild(successDiv);
            
            currentCharacterProfile = null;
            characterTemplateData = {}; // Clear template data
        } else {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
        }
    } catch (error) {
        console.error('Error saving character:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
    }
}

// ========== RATING FUNCTIONS ==========
async function ratePrompt(promptId, rating) {
    if (!lastPromptData || lastPromptData.promptId !== promptId) {
        console.error('Prompt data not found');
        return;
    }
    
    // Save selected rating
    const ratingSection = document.getElementById(`rating-${promptId}`);
    ratingSection.dataset.selectedRating = rating;
    
    // Update UI
    const stars = ratingSection.querySelectorAll('.star');
    
    // Highlight stars
    stars.forEach((star, index) => {
        if (index < rating) {
            star.textContent = '‚òÖ';
            star.style.color = '#f59e0b';
            star.classList.add('selected');
        } else {
            star.textContent = '‚òÜ';
            star.style.color = '#666';
            star.classList.remove('selected');
        }
    });
    
    // Show feedback box
    const feedbackBox = document.getElementById(`feedback-${promptId}`);
    feedbackBox.style.display = 'block';
    
    // Add submit button if not exists
    if (!ratingSection.querySelector('.submit-rating')) {
        const submitBtn = document.createElement('button');
        submitBtn.className = 'submit-rating';
        submitBtn.textContent = '‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô';
        submitBtn.onclick = () => submitRating(promptId, rating);
        feedbackBox.after(submitBtn);
    }
}

function previewStars(promptId, rating) {
    const ratingSection = document.getElementById(`rating-${promptId}`);
    const stars = ratingSection.querySelectorAll('.star');
    
    stars.forEach((star, index) => {
        if (index < rating) {
            star.classList.add('preview');
            star.textContent = '‚òÖ';
        } else {
            star.classList.remove('preview');
            star.textContent = '‚òÜ';
        }
    });
}

function resetStarPreview(promptId) {
    const ratingSection = document.getElementById(`rating-${promptId}`);
    const stars = ratingSection.querySelectorAll('.star');
    
    // Reset ‡∏ó‡∏∏‡∏Å‡∏î‡∏≤‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (!ratingSection.dataset.selectedRating) {
        stars.forEach(star => {
            star.classList.remove('preview');
            star.textContent = '‚òÜ';
        });
    }
}

async function submitRating(promptId, rating) {
    const feedback = document.getElementById(`feedback-${promptId}`).value;
    
    try {
        const response = await fetch(`${API_URL}/ratings`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId: userId,
                promptId: promptId,
                promptText: lastPromptData.promptText,
                responseText: lastPromptData.responseText,
                rating: rating,
                feedback: feedback,
                mode: lastPromptData.mode
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            
            // Update UI to show thank you
            const ratingSection = document.getElementById(`rating-${promptId}`);
            ratingSection.innerHTML = `
                <div class="rating-thanks">
                    ‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô! 
                    <span style="color: #f59e0b;">
                        ${'‚òÖ'.repeat(rating)}${'‚òÜ'.repeat(5-rating)}
                    </span>
                    ${data.averageRating ? `<br>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${data.averageRating.toFixed(1)}/5` : ''}
                </div>
            `;
        }
    } catch (error) {
        console.error('Error submitting rating:', error);
    }
}

// Voice Recognition Variables
let recognition = null;
let isListening = false;
let voiceTimeout = null;
let finalTranscript = '';

// Initialize Voice Recognition
function initVoiceRecognition() {
    // Check browser support
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        console.log('Browser does not support speech recognition');
        document.getElementById('voiceButton').style.display = 'none';
        return false;
    }
    
    // Create recognition instance
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    
    // Configure recognition
    recognition.continuous = true;          // Keep listening
    recognition.interimResults = true;      // Show results while speaking
    recognition.lang = 'th-TH';            // Thai language
    recognition.maxAlternatives = 1;
    recognition.interimMaxAlternatives = 1;
    recognition.continuous = true;  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô true
    
    // Recognition event handlers
    recognition.onstart = () => {
        console.log('Voice recognition started');
        isListening = true;
        updateVoiceUI(true);
    };
    
    recognition.onresult = (event) => {
        let interimTranscript = '';
        
        // Process results
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            
            if (event.results[i].isFinal) {
                finalTranscript += transcript + ' ';
            } else {
                interimTranscript += transcript;
            }
        }
        
        // Update textarea with current text
        const messageInput = document.getElementById('messageInput');
        messageInput.value = finalTranscript + interimTranscript;
        
        // Auto-resize textarea
        messageInput.style.height = 'auto';
        messageInput.style.height = messageInput.scrollHeight + 'px';
        
    };
    
    recognition.onerror = (event) => {
        console.error('Voice recognition error:', event.error);
        
         // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô no-speech ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏ï‡πà‡∏≠
    if (event.error === 'no-speech') {
        console.log('No speech detected, continuing...');
        return; // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡∏ü‡∏±‡∏á‡∏ï‡πà‡∏≠
    }
    
    if (event.error === 'not-allowed') {
        showVoicePermissionDialog();
    } else {
        showVoiceError(getErrorMessage(event.error));
    }
    
    stopVoiceInput();
};
    
    recognition.onend = () => {
        console.log('Voice recognition ended');
        isListening = false;
        updateVoiceUI(false);
    };
    
    return true;
}

// Toggle Voice Input
function toggleVoiceInput() {
    if (!recognition) {
        if (!initVoiceRecognition()) {
            alert('‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Chrome ‡∏´‡∏£‡∏∑‡∏≠ Edge');
            return;
        }
    }
    
    if (isListening) {
        stopVoiceInput();
    } else {
        startVoiceInput();
    }
}

// Start Voice Input
function startVoiceInput() {
    try {
        // Clear previous transcript
        finalTranscript = document.getElementById('messageInput').value || '';
        if (finalTranscript && !finalTranscript.endsWith(' ')) {
            finalTranscript += ' ';
        }
        
        recognition.start();
        
    } catch (error) {
        console.error('Error starting voice input:', error);
        showVoiceError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    }
}

// Stop Voice Input
function stopVoiceInput() {
    if (recognition && isListening) {
        recognition.stop();
        clearTimeout(voiceTimeout);
    }
}

// Update Voice UI
function updateVoiceUI(listening) {
    const voiceButton = document.getElementById('voiceButton');
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å voice status ‡∏ï‡∏≤‡∏° mode
    let voiceStatus;
    
    if (currentMode === 'chat') {
        // Chat mode ‡πÉ‡∏ä‡πâ voiceStatusChat (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
        voiceStatus = document.getElementById('voiceStatusChat');
    } else if (currentMode === 'image') {
        // Image mode ‡πÉ‡∏ä‡πâ voiceStatusImage
        voiceStatus = document.getElementById('voiceStatusImage');
    } else {
        // ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ (general, character, multichar) ‡πÉ‡∏ä‡πâ voiceStatus ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        voiceStatus = document.getElementById('voiceStatus');
    }
    
    if (!voiceStatus) return;
    
    if (listening) {
        voiceButton.classList.add('listening');
        voiceButton.innerHTML = 'üî¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á...';
        voiceButton.disabled = true;
        voiceStatus.style.display = 'flex';
    } else {
        voiceButton.classList.remove('listening');
        voiceButton.innerHTML = 'üé§ ‡∏û‡∏π‡∏î‡πÄ‡∏•‡∏¢';
        voiceButton.disabled = false;
        voiceStatus.style.display = 'none';
    }
}

// Show Voice Permission Dialog
function showVoicePermissionDialog() {
    const dialog = document.createElement('div');
    dialog.className = 'voice-permission-dialog';
    dialog.innerHTML = `
        <h3>üé§ ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô</h3>
        <p>
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô<br>
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏π‡∏î‡πÅ‡∏ó‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå
        </p>
        <button onclick="this.parentElement.remove()">‡∏ï‡∏Å‡∏•‡∏á</button>
    `;
    document.body.appendChild(dialog);
}

// Show Voice Error
function showVoiceError(message) {
    const messagesContainer = document.getElementById('chatMessages');
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = `
        text-align: center;
        padding: 12px 20px;
        margin: 12px auto;
        background: rgba(239, 68, 68, 0.1);
        border: 1px solid rgba(239, 68, 68, 0.3);
        border-radius: 8px;
        color: #ef4444;
    `;
    errorDiv.innerHTML = `‚ö†Ô∏è ${message}`;
    messagesContainer.appendChild(errorDiv);
    
    // Remove after 5 seconds
    setTimeout(() => errorDiv.remove(), 5000);
}

// Get Error Message
function getErrorMessage(error) {
    const errorMessages = {
        'not-allowed': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô',
        'no-speech': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
        'audio-capture': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô',
        'network': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï',
        'aborted': '‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    };
    
    return errorMessages[error] || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
}

// Voice Commands (Bonus Feature!)
function processVoiceCommands(text) {
    const commands = {
        '‡∏™‡πà‡∏á': () => sendMessage(),
        '‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î': () => { document.getElementById('messageInput').value = ''; },
        '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£': () => switchMode('character'),
        '‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£': () => switchMode('library'),
        '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©': () => { recognition.lang = 'en-US'; },
        '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢': () => { recognition.lang = 'th-TH'; }
    };
    
    // Check for commands
    for (const [command, action] of Object.entries(commands)) {
        if (text.includes(command)) {
            action();
            return true;
        }
    }
    
    return false;
}

// Function to switch to Image Gen mode
function switchToImageGen() {
    switchMode('imagegen');
}

// Function to open external image generation
function openExternalImageGen() {
    window.open('https://aistudio.google.com/app/prompts/new_image', '_blank');
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
    // Slip upload handler
    const slipInput = document.getElementById('slipFileInput');
    if (slipInput) {
        slipInput.addEventListener('change', handleSlipSelect);
    }
    
    // Store PromptPay ID globally
    window.PROMPTPAY_ID = '090-246-2826'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ñ‡∏∏‡∏ì
    // Check if browser supports voice
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        console.log('Voice recognition supported');
    } else {
        console.log('Voice recognition not supported');
        // Hide voice button
        const voiceBtn = document.getElementById('voiceButton');
        if (voiceBtn) voiceBtn.style.display = 'none';
    }
});

// Add keyboard shortcut (Spacebar to toggle voice)
document.addEventListener('keydown', (e) => {
    // Only if not typing in input
    if (e.code === 'Space' && e.ctrlKey && !e.target.matches('input, textarea')) {
        e.preventDefault();
        toggleVoiceInput();
    }
});

// Clean up on page unload
window.addEventListener('beforeunload', () => {
    if (recognition && isListening) {
        recognition.stop();
    }
});
// Function ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å library (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)
function backToChat() {
    const library = document.getElementById('characterLibrary');
    const chatPanel = document.querySelector('.chat-panel');
    
    library.classList.remove('active');
    library.style.cssText = '';
    chatPanel.style.display = '';
    
    switchMode('general');
}

// ========== IMAGE GENERATION FUNCTION ==========
async function generateImage(prompt) {
    const model = getSelectedImageModel();
    const ratio = getSelectedRatio();
    
    // ‡πÅ‡∏™‡∏î‡∏á loading message
    const loadingId = addMessage('üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û... ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 5-30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ', 'assistant');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° loading animation
    const messagesContainer = document.getElementById('chatMessages');
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'image-loading';
    loadingDiv.innerHTML = `
        <div class="image-loading-spinner"></div>
        <div class="progress-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ${model}...</div>
    `;
    messagesContainer.appendChild(loadingDiv);
    
    try {
        const response = await fetch(`${API_URL}/generate-image`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                prompt: prompt,
                userId: userId,
                model: model,
                aspectRatio: ratio
            })
        });
        
        const data = await response.json();
        
        // Debug response
        console.log('API Response:', {
            ok: response.ok,
            status: response.status,
            data: data
        });
        
        // Remove loading
        removeMessage(loadingId);
        loadingDiv.remove();
        
        if (response.ok && data.imageUrl) {
    // Debug
    console.log('Full response:', data);
    console.log('Image URL type:', typeof data.imageUrl);
    console.log('Image URL value:', data.imageUrl);
    
    // ‡∏ñ‡πâ‡∏≤ imageUrl ‡πÄ‡∏õ‡πá‡∏ô array ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    let imageUrl = data.imageUrl;
    if (Array.isArray(imageUrl)) {
        console.log('imageUrl is array, taking first element');
        imageUrl = imageUrl[0];
    }
    
    // Ensure it's a string
    if (typeof imageUrl !== 'string') {
        console.error('imageUrl is not a string after processing:', typeof imageUrl, imageUrl);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ
    displayGeneratedImage(imageUrl, prompt, model, data.cost);
            
            // Update usage ‡πÅ‡∏•‡∏∞ credits
            updateUsageDisplay();
            loadUserCredits();
            loadTotalPurchasedCredits();
            
        } else if (response.status === 429) {
            // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏û‡∏≠
            if (data.error === 'Insufficient credits') {
                showCreditRequiredMessage(data);
            } else {
                addMessage(`‚ùå ${data.message || 'Daily limit exceeded'}`, 'assistant');
            }
        } else {
            // Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            addMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.error || 'Failed to generate image'}`, 'assistant');
        }
        
    } catch (error) {
        removeMessage(loadingId);
        if (loadingDiv) loadingDiv.remove();
        console.error('Image generation error:', error);
        addMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server ‡πÑ‡∏î‡πâ', 'assistant');
    } finally {
        // Reset processing state
        isProcessing = false;
        const input = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        if (input) input.disabled = false;
        if (sendButton) sendButton.disabled = false;
    }
}

// Function ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ model ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
function getModelDisplayName(modelId) {
    const modelNames = {
        'flux-schnell': 'Express Mode',
        'flux-dev': 'Premium Mode',
        'flux-pro': 'üî• Ultra Mode'
    };
    return modelNames[modelId] || modelId;
}

// Function ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
function displayGeneratedImage(imageUrl, prompt, model, cost) {
    const messageId = `img-${Date.now()}`;
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    
    // Ensure imageUrl is a string
    if (typeof imageUrl !== 'string') {
        console.error('Invalid imageUrl type:', typeof imageUrl, imageUrl);
        imageUrl = String(imageUrl);
    }
    
    // Escape quotes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô HTML attributes
    const escapedUrl = imageUrl.replace(/'/g, "\\'");
    const escapedPrompt = prompt.replace(/'/g, "\\'");
    const altText = prompt.replace(/"/g, '&quot;');
    
    messageDiv.className = 'message assistant';
    messageDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div>‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!</div>
            <div class="generated-image" style="margin-top: 16px;">
                <img src="${imageUrl}" 
                     alt="${altText}" 
                     style="width: 100%; max-width: 512px; height: auto; border-radius: 12px; display: block; cursor: zoom-in;"
                     onclick="openImageModal('${escapedUrl}')"
                     onerror="this.src='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%22400%22 height=%22300%22><rect fill=%22%23333%22 width=%22400%22 height=%22300%22/><text x=%2250%%22 y=%2250%%22 text-anchor=%22middle%22 fill=%22%23999%22>Image Load Error</text></svg>';">
            </div>
            <div class="image-actions">
                <button class="download-btn" onclick="downloadImage('${imageUrl.replace(/'/g, "\\'")}', '${prompt.substring(0, 50).replace(/'/g, "\\'")}')">
    üíæ Download
</button>
                <button class="retry-btn" onclick="retryGeneration('${escapedPrompt}')">
                    üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                </button>
            </div>
            
            <div style="margin-top: 12px; font-size: 14px; color: var(--text-secondary);">
                üìä Model: ${getModelDisplayName(model)} | üí∞ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: ${cost}
            </div>
            <div style="margin-top: 8px; font-size: 12px; color: var(--text-secondary); word-break: break-all;">
                üîó URL: ${imageUrl}
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // Debug log (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
    console.log('Image URL:', imageUrl);
}

// Helper functions
// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà function downloadImage ‡πÄ‡∏î‡∏¥‡∏°
function downloadImage(url, filename) {
    // Clean filename - ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    const cleanFilename = filename
        .replace(/[^a-z0-9\u0E00-\u0E7F]/gi, '-') // ‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '') // ‡∏•‡∏ö - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á
        .toLowerCase()
        .substring(0, 50); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á link element
    const a = document.createElement('a');
    a.href = url;
    a.download = `veo-${cleanFilename || 'image'}.png`;
    a.target = '_blank';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° link ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    showNotification('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î...', 'success');
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÉ‡∏™‡πà‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å downloadImage)
function retryGeneration(prompt) {
    // ‡πÅ‡∏™‡∏î‡∏á popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const modal = document.createElement('div');
    modal.className = 'confirmation-modal';
    modal.innerHTML = `
        <div class="confirmation-content">
            <h3>‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà</h3>
            <p>‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
            <p style="color: #f59e0b; font-size: 14px;">
                ‚ö° ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ${getSelectedImageModel() === 'flux-schnell' ? '0.15' : '0.20'} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
            </p>
            <div class="confirmation-buttons">
                <button onclick="confirmRetry('${encodeURIComponent(prompt)}')" class="confirm-btn">
                    ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                </button>
                <button onclick="closeConfirmation()" class="cancel-btn">
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

function confirmRetry(encodedPrompt) {
    closeConfirmation();
    const prompt = decodeURIComponent(encodedPrompt);
    document.getElementById('messageInput').value = prompt;
    sendMessage();
}

function closeConfirmation() {
    const modal = document.querySelector('.confirmation-modal');
    if (modal) modal.remove();
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function openImageModal(imageUrl) {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    
    if (modal && modalImg) {
        modal.style.display = 'flex';
        modalImg.src = imageUrl;
        document.body.style.overflow = 'hidden';
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function closeImageModal(event) {
    if (!event || event.target.id === 'imageModal' || event.target.className === 'image-modal-close') {
        const modal = document.getElementById('imageModal');
        if (modal) {
            modal.style.display = 'none';
            document.body.style.overflow = '';
        }
    }
}

function favoriteImage(imageUrl, prompt) {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô localStorage
    const imageHistory = JSON.parse(localStorage.getItem('veoImageHistory') || '[]');
    imageHistory.unshift({
        id: Date.now(),
        url: imageUrl,
        prompt: prompt,
        date: new Date().toISOString()
    });
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡∏£‡∏π‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (imageHistory.length > 50) {
        imageHistory.length = 50;
    }
    
    localStorage.setItem('veoImageHistory', JSON.stringify(imageHistory));
    showNotification('‚≠ê ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!', 'success');
}

// ========== AI CHAT FUNCTIONS ==========
async function sendChatMessage(message) {
    const model = getSelectedChatModel();
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (!message && window.imageUrls.length > 0) {
        message = "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢";
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    let loadingText = 'üí≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...';
    if (window.imageUrls.length > 0) {
        loadingText = 'üñºÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ...';
    }
    const loadingId = addMessage(loadingText, 'assistant');
    
    try {
        const response = await fetch(`${API_URL}/ai-chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: message,
                userId: userId,
                model: model,
                images: window.imageUrls, // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                history: getChatModeHistory()
            })
        });
        
        const data = await response.json();
        
        // Remove loading
        removeMessage(loadingId);
        
        if (response.ok && data.success) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            displayChatResponse(data.response, data.model, data.cost);
            
            // Update usage ‡πÅ‡∏•‡∏∞ credits
            updateUsageDisplay();
            loadUserCredits();
            loadTotalPurchasedCredits();
            
            // Clear images
            window.imageUrls = [];
            displayImagePreview();
            
        } else if (response.status === 429) {
            // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏û‡∏≠
            if (data.error === 'Insufficient credits') {
                showCreditRequiredMessage(data);
            } else {
                addMessage(`‚ùå ${data.message || 'Daily limit exceeded'}`, 'assistant');
            }
        } else {
            // Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÅ‡∏™‡∏î‡∏á userMessage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const errorMsg = data.userMessage || `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.error || 'Failed to send message'}`;
            addMessage(errorMsg, 'assistant');
        }
        
    } catch (error) {
        removeMessage(loadingId);
        console.error('Chat error:', error);
        addMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server ‡πÑ‡∏î‡πâ', 'assistant');
    } finally {
        // Reset processing state
        isProcessing = false;
        const input = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        if (input) input.disabled = false;
        if (sendButton) sendButton.disabled = false;
    }
}

// Get selected chat model
function getSelectedChatModel() {
    const selected = document.querySelector('input[name="chatModel"]:checked');
    return selected ? selected.value : 'gpt-3.5-turbo';
}

// Get chat history for current conversation
function getChatModeHistory() {
    const messages = [];
    const chatElements = document.querySelectorAll('#chatMessages .message');
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (5 ‡∏Ñ‡∏π‡πà)
    const recentMessages = Array.from(chatElements).slice(-10);
    
    recentMessages.forEach(elem => {
        const isUser = elem.classList.contains('user');
        const content = elem.querySelector('.message-content').textContent;
        
        // ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤ welcome message ‡πÅ‡∏•‡∏∞ error messages
        if (!content.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö') && !content.includes('‚ùå')) {
            messages.push({
                role: isUser ? 'user' : 'assistant',
                content: content
            });
        }
    });
    
    return messages;
}

// Update chat model and description
function updateChatModel(model) {
    const descriptions = {
        'gpt-3.5-turbo': '<strong>GPT-3.5 Turbo:</strong> ‡πÄ‡∏£‡πá‡∏ß ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        'gpt-4o-mini': '<strong>GPT-4o Mini:</strong> ‡∏â‡∏•‡∏≤‡∏î‡∏Å‡∏ß‡πà‡∏≤ ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤ ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
        'gpt-4o': '<strong>GPT-4o:</strong> ‡∏â‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô',
        'gemini-1.5-flash': '<strong>Gemini Flash:</strong> ‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å by Google',
        'gemini-1.5-pro': '<strong>Gemini Pro:</strong> ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
    };
    
    const descElement = document.getElementById('modelDescription');
    if (descElement && descriptions[model]) {
        descElement.innerHTML = descriptions[model];

        syncChatModelSelection(model);
    }
}

function getSelectedChatModel() {
    // Always return gpt-4o-mini as it's the only model now
    return 'gpt-4o-mini';
}

// Sync desktop ‡πÅ‡∏•‡∏∞ mobile model selection (no longer needed)
function syncChatModelSelection(model) {
    // Do nothing as we only have one model now
}

// Export function
window.updateChatModel = updateChatModel;

// Display chat response
// Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format markdown ‡πÄ‡∏õ‡πá‡∏ô HTML
function formatMarkdown(text) {
    // ‡πÅ‡∏õ‡∏•‡∏á markdown ‡πÄ‡∏õ‡πá‡∏ô HTML
    return text
        // Headers
        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
        // Bold
        .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
        // Lists
        .replace(/^\* (.+)$/gim, '<li>$1</li>')
        .replace(/^- (.+)$/gim, '<li>$1</li>')
        // Wrap lists
        .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
        // Line breaks
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>')
        // Wrap in paragraphs
        .replace(/^(.+)$/gm, '<p>$1</p>')
        // Clean up
        .replace(/<p><h/g, '<h')
        .replace(/<\/h(\d)><\/p>/g, '</h$1>')
        .replace(/<p><ul>/g, '<ul>')
        .replace(/<\/ul><\/p>/g, '</ul>');
}

function displayChatResponse(response, model, cost) {
    const messageId = `chat-${Date.now()}`;
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cost ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠ number
    let costDisplay = '';
    if (cost && typeof cost === 'object') {
        {
            costDisplay = `${cost.this_request || '0.000'} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`;
        }
    } else if (typeof cost === 'number') {
        costDisplay = `${cost.toFixed(3)} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`;
    } else {
        costDisplay = '0.000 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï';
    }
    
    messageDiv.className = 'message assistant';
    messageDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div>${formatMarkdown(response)}</div>
            
            <!-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á -->
            <div class="chat-model-info">
                <span style="font-size: 11px; color: #64748b;">
                    ${getModelDisplayName(model)}
                </span>
                <span style="font-size: 11px; color: #64748b;">
                    ${costDisplay}
                </span>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Display chat response from history (with saved model data)
function displayChatResponseFromHistory(content, modelData) {
    const messageId = `chat-history-${Date.now()}`;
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cost ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö history
    let costDisplay = '0.000 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï';
    if (modelData.cost) {
        if (typeof modelData.cost === 'number') {
            costDisplay = `${modelData.cost.toFixed(3)} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`;
        } else if (modelData.cost === 0) {
            costDisplay = 'üÜì ‡∏ü‡∏£‡∏µ';
        }
    }
    
    messageDiv.className = 'message assistant';
    messageDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div>${formatMarkdown(content)}</div>
            
            <!-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á -->
            <div class="chat-model-info">
                <span style="font-size: 11px; color: #64748b;">
                    ${modelData.model}
                </span>
                <span style="font-size: 11px; color: #64748b;">
                    ${costDisplay}
                </span>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
}

// Get model display name
function getModelDisplayName(modelId) {
    const modelNames = {
        'gpt-3.5-turbo': 'GPT-3.5 Turbo',
        'gpt-4o-mini': 'GPT-4o Mini',
        'gpt-4o': 'GPT-4o',
        'gemini-1.5-flash': 'Gemini Flash',
        'gemini-1.5-pro': 'Gemini Pro'
    };
    return modelNames[modelId] || modelId;
}

// ========== SLIP UPLOAD FUNCTIONS ==========

let selectedSlipFile = null;
let selectedPackageData = null;

// Handle slip file selection
function handleSlipSelect(event) {
    console.log('handleSlipSelect called', event);
    const file = event.target.files[0];
    console.log('Selected file:', file);
    if (!file) return;
    
    // Check file type
    if (!file.type.startsWith('image/')) {
        showNotification('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', 'error');
        return;
    }
    
    // Check file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
        showNotification('‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB', 'error');
        return;
    }
    
    selectedSlipFile = file;
    
    // Preview image
    const reader = new FileReader();
    reader.onerror = function(error) {
        console.error('FileReader error:', error);
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ', 'error');
    };
    
    reader.onload = function(e) {
        console.log('FileReader loaded');
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ elements ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô modal ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        const modal = document.querySelector('.credit-modal');
        console.log('Modal exists:', !!modal);
        
        if (!modal) {
            console.error('Modal disappeared!');
            showNotification('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà', 'error');
            return;
        }
        
        const slipImage = modal.querySelector('#slipImage');
        const slipPreview = modal.querySelector('#slipPreview');
        const uploadArea = modal.querySelector('.upload-area');
        
        console.log('Elements found:', {
            slipImage: !!slipImage,
            slipPreview: !!slipPreview,
            uploadArea: !!uploadArea
        });
        
        if (slipImage) {
            slipImage.src = e.target.result;
            console.log('Image src set');
        }
        
        if (slipPreview) {
            slipPreview.style.display = 'block';
            console.log('Preview display set to block');
            
            // Force reflow
            slipPreview.offsetHeight;
        }
        
        if (uploadArea) {
            uploadArea.style.display = 'none';
            console.log('Upload area hidden');
        }
        
        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô preview
        if (slipPreview) {
            slipPreview.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    };
    
    console.log('Starting to read file...');
    reader.readAsDataURL(file);
}

// Upload slip function
async function uploadSlip() {
    if (!selectedSlipFile) {
        showNotification('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ', 'error');
        return;
    }
    
    if (!selectedPackageData) {
        showNotification('üíù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô', 'error');
        return;
    }
    
    // Disable button and show loading
    const confirmBtn = document.getElementById('confirmUploadBtn');
    if (confirmBtn) {
        confirmBtn.disabled = true;
        confirmBtn.style.opacity = '0.6';
        confirmBtn.style.cursor = 'not-allowed';
        confirmBtn.innerHTML = '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...';
    }
    
    // Show loading status with animation
    const statusDiv = document.getElementById('uploadStatus');
    statusDiv.className = 'upload-status checking';
    statusDiv.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: center; gap: 10px;">
            <div class="spinner" style="
                width: 20px;
                height: 20px;
                border: 3px solid rgba(147, 51, 234, 0.3);
                border-top: 3px solid #9333ea;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            "></div>
            <span>üéÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô...</span>
        </div>
    `;
    statusDiv.style.display = 'block';
    
    // Add spinning animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
    
    // Hide preview
    document.getElementById('slipPreview').style.display = 'none';
    
    try {
        // Create FormData
        const formData = new FormData();
        formData.append('slip', selectedSlipFile);
        formData.append('userId', userId);
        formData.append('packageId', selectedPackageData.id);
        formData.append('expectedAmount', selectedPackageData.price);
        
        // Upload to server
        const response = await fetch('/api/verify-slip', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        console.log('Slip verification response:', data);
        
        if (response.ok && data.success && !data.isDuplicate) {
            // Success!
            statusDiv.className = 'upload-status success';
            statusDiv.innerHTML = `
                üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!<br>
                üíñ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å<br>
                ‚ú® ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${data.newBalance} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
            `;
            
            // Update credit display
            userCredits = data.newBalance;
            updateCreditDisplay();
            
            // Close modal after 3 seconds
            setTimeout(() => {
                closeCreditModal();
                showNotification('üéÜ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ñ‡πà‡∏∞!', 'success');
            }, 3000);
            
        } else if (data.isDuplicate) {
            // ‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥
            const duplicateMessage = `
                ‚ö†Ô∏è ‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß<br>
                <small style="color: #a1a1aa;">
                    ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(data.verifiedAt).toLocaleString('th-TH')}<br>
                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ${data.transactionRef}
                </small>
            `;
            
            statusDiv.className = 'upload-status error';
            statusDiv.innerHTML = duplicateMessage;
            
            showNotification('‚ö†Ô∏è ‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà', 'error');
            
            // Enable button again
            const confirmBtn = document.getElementById('confirmUploadBtn');
            if (confirmBtn) {
                confirmBtn.disabled = false;
                confirmBtn.style.opacity = '1';
                confirmBtn.style.cursor = 'pointer';
                confirmBtn.innerHTML = '‚ú® ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô';
            }
            
            // Reset upload area
            setTimeout(() => {
                resetUploadArea();
            }, 5000);
            
        } else {
            // Error - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error
            let errorMessage = '';
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (data.isDuplicate || data.error?.includes('‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß') || data.error?.includes('duplicate')) {
                errorMessage = '‚ö†Ô∏è ‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà';
            } else if (data.error?.includes('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á')) {
                errorMessage = `‚ùå ${data.error}`;
            } else if (data.error?.includes('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')) {
                errorMessage = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô';
            } else if (data.error?.includes('‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')) {
                errorMessage = '‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô';
            } else {
                errorMessage = `‚ùå ${data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'}`;
            }
            
            statusDiv.className = 'upload-status error';
            statusDiv.innerHTML = errorMessage;
            
            // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏î‡πâ‡∏ß‡∏¢
            showNotification(errorMessage, 'error');
            
            // Enable button again
            if (confirmBtn) {
                confirmBtn.disabled = false;
                confirmBtn.style.opacity = '1';
                confirmBtn.style.cursor = 'pointer';
                confirmBtn.innerHTML = '‚ú® ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô';
            }
            
            // Reset upload area
            setTimeout(() => {
                resetUploadArea();
            }, 5000);
        }
        
    } catch (error) {
        console.error('Upload error:', error);
        statusDiv.className = 'upload-status error';
        
        let errorMessage = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        if (error.message.includes('Failed to fetch')) {
            errorMessage = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï';
        }
        
        statusDiv.innerHTML = errorMessage;
        showNotification(errorMessage, 'error');
        
        // Enable button again
        if (confirmBtn) {
            confirmBtn.disabled = false;
            confirmBtn.style.opacity = '1';
            confirmBtn.style.cursor = 'pointer';
            confirmBtn.innerHTML = '‚ú® ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô';
        }
        
        setTimeout(() => {
            resetUploadArea();
        }, 5000);
    }
}

// Reset upload area
function resetUploadArea() {
    document.getElementById('slipPreview').style.display = 'none';
    document.querySelector('.upload-area').style.display = 'block';
    document.getElementById('uploadStatus').style.display = 'none';
    document.getElementById('slipFileInput').value = '';
    selectedSlipFile = null;
}

// Generate QR Code
async function generateQRCode(amount) {
    try {
        const response = await fetch('/api/generate-qr', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                amount: amount,
                promptpayId: window.PROMPTPAY_ID
            })
        });
        
        const data = await response.json();
        
        if (data.qrCode) {
            const qrSection = document.getElementById('qrSection');
            const qrDisplay = document.getElementById('qrCodeDisplay');
            
            qrDisplay.innerHTML = `<img src="${data.qrCode}" alt="QR Code" style="max-width: 300px;">`;
            qrSection.style.display = 'block';
        }
    } catch (error) {
        console.error('QR Code error:', error);
    }
}

// ========== GLOBAL FUNCTION EXPORTS ==========
window.switchMode = switchMode;
window.removeImage = removeImage;
window.copyPrompt = copyPrompt;
window.showImageUrlDialog = showImageUrlDialog;
window.closeImageUrlDialog = closeImageUrlDialog;
window.addImageUrl = addImageUrl;
window.useCharacter = useCharacter;
window.deleteCharacter = deleteCharacter;
window.showSaveDialog = showSaveDialog;
window.closeSaveDialog = closeSaveDialog;
window.saveCharacter = saveCharacter;
window.ratePrompt = ratePrompt;
window.submitRating = submitRating;
window.toggleVoiceInput = toggleVoiceInput;
window.startVoiceInput = startVoiceInput;
window.stopVoiceInput = stopVoiceInput;
window.backToChat = backToChat;
window.showCreditPackages = showCreditPackages;
window.closeCreditModal = closeCreditModal;
window.uploadSlip = uploadSlip;
window.handleSlipSelect = handleSlipSelect;
window.resetUploadArea = resetUploadArea;
window.generateQRCode = generateQRCode;
window.selectPackage = selectPackage;
window.showTemplates = showTemplates;
window.closeTemplates = closeTemplates;
window.filterTemplates = filterTemplates;
window.showFavorites = showFavorites;
window.closeFavorites = closeFavorites;
window.removeFromFavorites = removeFromFavorites;
window.useFavorite = useFavorite;
window.shareFavorite = shareFavorite;
window.toggleFavorite = toggleFavorite;
window.sharePromptById = sharePromptById;
window.closeAnnouncement = closeAnnouncement;
window.previewStars = previewStars;
window.resetStarPreview = resetStarPreview;
window.showSceneBuilder = showSceneBuilder;
window.closeSceneBuilder = closeSceneBuilder;
window.setCharacterCount = setCharacterCount;
window.updateCharacter = updateCharacter;
window.setMood = setMood;
window.setDuration = setDuration;
window.generateFromBuilder = generateFromBuilder;
window.showCourse = showCourse;
window.closeCourse = closeCourse;
window.continueScene = continueScene;
window.toggleExpand = toggleExpand;
window.openFullEditor = openFullEditor;
window.closeEditor = closeEditor;
window.applyEditorChanges = applyEditorChanges;
window.clearPlaceholders = clearPlaceholders;
window.formatPrompt = formatPrompt;
window.downloadImage = downloadImage;
window.retryGeneration = retryGeneration;
window.favoriteImage = favoriteImage;
window.openImageModal = openImageModal;
window.closeImageModal = closeImageModal;
window.retryGeneration = retryGeneration;
window.confirmRetry = confirmRetry;
window.closeConfirmation = closeConfirmation;
window.displayChatResponseFromHistory = displayChatResponseFromHistory;

// 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Scene Builder
function showSceneBuilder() {
    const modal = document.createElement('div');
    modal.className = 'scene-modal';
    modal.innerHTML = `
        <div class="scene-modal-content">
            <button class="close-modal" onclick="closeSceneBuilder()">‚úï</button>
            <h2>üé≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt master</h2>
            
            <div class="scene-form">
                <!-- 1. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà -->
                <div class="form-section">
                    <h3>üìç 1. ‡∏â‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô?</h3>
                    <input type="text" id="sceneLocation" 
                           placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î, ‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü, ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®" 
                           class="scene-input">
                    <small>üí° ‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÄ‡∏ä‡πà‡∏ô "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ ‡∏°‡∏µ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏™‡πà‡∏≠‡∏á"</small>
                </div>

                <!-- 1.5 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå -->
                <div class="form-section">
                    <h3>üé≠ 1.5 ‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå/‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∞‡πÑ‡∏£?</h3>
                    <input type="text" id="sceneSituation" 
                           placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏±‡∏ö, ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô" 
                           class="scene-input">
                    <small>üí° ‡∏ö‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á‡∏â‡∏≤‡∏Å</small>
                </div>
                
                <!-- 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô -->
                <div class="form-section">
                    <h3>üë• 2. ‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏â‡∏≤‡∏Å?</h3>
                    <div class="character-count-buttons">
                        <button onclick="setCharacterCount(2)" class="count-btn active">2 ‡∏Ñ‡∏ô</button>
                        <button onclick="setCharacterCount(3)" class="count-btn">3 ‡∏Ñ‡∏ô</button>
                        <button onclick="setCharacterCount(4)" class="count-btn">4 ‡∏Ñ‡∏ô</button>
                        <button onclick="setCharacterCount(5)" class="count-btn">5 ‡∏Ñ‡∏ô</button>
                    </div>
                </div>
                
                <!-- 3. ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (Dynamic) -->
                <div class="form-section" id="charactersSection">
                    <h3>üë§ 3. ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£?</h3>
                    <div id="characterInputs">
                        <!-- ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ setCharacterCount -->
                    </div>
                </div>
                
                <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°... -->
                <!-- 4. ‡∏û‡∏π‡∏î‡∏≠‡∏∞‡πÑ‡∏£ -->
                <div class="form-section">
                    <h3>üí¨ 4. ‡∏û‡∏π‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ô? (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</h3>
                    <textarea id="sceneDialogue" 
                              placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:&#10;‡∏ô‡∏±‡∏Å‡∏Ç‡πà‡∏≤‡∏ß: ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏•‡∏∏‡∏á‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∞?&#10;‡∏•‡∏∏‡∏á: ‡πÇ‡∏≠‡πâ‡∏¢ ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏∞ ‡∏™‡∏±‡∏Å 20 ‡∏õ‡∏µ‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏á&#10;‡∏ô‡∏±‡∏Å‡∏Ç‡πà‡∏≤‡∏ß: ‡∏ß‡πâ‡∏≤‡∏ß ‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞" 
                              class="scene-textarea"></textarea>
                </div>
                
                <!-- 5. ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏â‡∏≤‡∏Å -->
                <div class="form-section">
                    <h3>üé¨ 5. ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏≤‡∏Å</h3>
                    <div class="mood-buttons">
                        <button onclick="setMood('casual')" class="mood-btn active">
                            üòä ‡∏™‡∏ö‡∏≤‡∏¢‡πÜ
                        </button>
                        <button onclick="setMood('serious')" class="mood-btn">
                            ü§î ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á
                        </button>
                        <button onclick="setMood('funny')" class="mood-btn">
                            üòÑ ‡∏ï‡∏•‡∏Å‡∏Ç‡∏≥‡∏Ç‡∏±‡∏ô
                        </button>
                        <button onclick="setMood('dramatic')" class="mood-btn">
                            üò± ‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤
                        </button>
                    </div>
                </div>
                
                <!-- 6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß -->
                <div class="form-section">
                    <h3>‚è±Ô∏è 6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏â‡∏≤‡∏Å</h3>
                    <div class="duration-buttons">
                        <button onclick="setDuration('short')" class="duration-btn active">
                            ‡∏™‡∏±‡πâ‡∏ô (5-6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                        </button>
                        <button onclick="setDuration('medium')" class="duration-btn">
                            ‡∏Å‡∏•‡∏≤‡∏á (7-8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="modal-actions">
                <button onclick="generateFromBuilder()" class="generate-btn">
                    ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt Master
                </button>
                <button onclick="closeSceneBuilder()" class="cancel-btn">
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setCharacterCount ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 2 ‡∏Ñ‡∏ô
    setTimeout(() => {
        setCharacterCount(2);
        document.getElementById('sceneLocation').focus();
    }, 100);
}

// 3. Scene Builder Data & Functions
let sceneData = {
    location: '',
    situation: '',
    characterCount: 2,
    characters: ['', ''],
    dialogue: '',
    mood: 'casual',
    duration: 'short'
};

function setCharacterCount(count) {
    sceneData.characterCount = count;
    
    // Update UI
    document.querySelectorAll('.count-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    // ‡πÉ‡∏ä‡πâ currentTarget ‡πÅ‡∏ó‡∏ô event.target ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const clickedBtn = document.querySelector(`.count-btn:nth-child(${count-1})`);
    if (clickedBtn) clickedBtn.classList.add('active');
    
    // Update character inputs
    const container = document.getElementById('characterInputs');
    if (!container) return;
    
    container.innerHTML = '';
    sceneData.characters = new Array(count).fill('');
    
    for (let i = 0; i < count; i++) {
        const charDiv = document.createElement('div');
        charDiv.className = 'char-input-group';
        charDiv.innerHTML = `
            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                <label style="flex: 1;">‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ${i+1}:</label>
                <button type="button" class="my-char-btn" 
                        onclick="openCharacterPicker('sceneChar${i}')" 
                        title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å My Characters">
                    üìö My Character
                </button>
            </div>
            <input type="text" 
                   id="sceneChar${i}"
                   placeholder="‡∏ö‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏û‡∏® ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß" 
                   class="scene-input"
                   data-index="${i}"
                   onchange="updateCharacter(${i}, this.value)">
        `;
        container.appendChild(charDiv);
    }
}

function updateCharacter(index, value) {
    sceneData.characters[index] = value;
}

function setMood(mood) {
    sceneData.mood = mood;
    document.querySelectorAll('.mood-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
}

function setDuration(duration) {
    sceneData.duration = duration;
    document.querySelectorAll('.duration-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
}

// 4. Generate from builder
function generateFromBuilder() {
    // Collect data
    sceneData.location = document.getElementById('sceneLocation').value;
    sceneData.situation = document.getElementById('sceneSituation').value;
    sceneData.dialogue = document.getElementById('sceneDialogue').value;
    
    // Collect characters
    const charInputs = document.querySelectorAll('#characterInputs input');
    charInputs.forEach(input => {
        const index = parseInt(input.dataset.index);
        sceneData.characters[index] = input.value;
    });
    
    // Validation
if (!sceneData.location && !sceneData.situation) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á');
    return;
}
    
    // Build message
    let message = `‡∏™‡∏£‡πâ‡∏≤‡∏á Multi-Character Scene ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å:\n\n`;
    message += `üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${sceneData.location}\n`;
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
if (sceneData.situation) {
    message += `üé≠ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${sceneData.situation}\n`;
}
    message += `üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${sceneData.characterCount} ‡∏Ñ‡∏ô\n\n`;
    
    message += `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n`;
    sceneData.characters.forEach((char, i) => {
        if (char) {
            message += `${i+1}. ${char}\n`;
        } else {
            message += `${i+1}. (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ - ‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏â‡∏≤‡∏Å)\n`;
        }
    });
    
    if (sceneData.dialogue) {
        message += `\nüí¨ ‡∏ö‡∏ó‡∏û‡∏π‡∏î:\n${sceneData.dialogue}\n`;
    } else {
        message += `\nüí¨ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏û‡∏π‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏â‡∏≤‡∏Å\n`;
    }
    
    message += `\nüé≠ ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ${getMoodText(sceneData.mood)}`;
    message += `\n‚è±Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${sceneData.duration === 'short' ? '5-6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ' : '7-8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'}`;
    
    message += `\n\n‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ scene setting ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å (props, background, lighting)
- ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤, ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤, ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á)
- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏ó‡∏û‡∏π‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà timing ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- Camera angles ‡πÅ‡∏•‡∏∞ movements
- Audio layers (dialogue, ambient, effects)
- ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏û‡∏∏‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏ó‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢`;
    
    // Close modal
    closeSceneBuilder();
    
    // Set message and send
    document.getElementById('messageInput').value = message;
    sendMessage();
}

function getMoodText(mood) {
    const moods = {
        casual: '‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á',
        serious: '‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£',
        funny: '‡∏ï‡∏•‡∏Å‡∏Ç‡∏≥‡∏Ç‡∏±‡∏ô ‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô',
        dramatic: '‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤ ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô'
    };
    return moods[mood] || mood;
}

function closeSceneBuilder() {
    document.querySelector('.scene-modal')?.remove();
}

// 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° styles
const multicharStyles = `
/* Scene Modal */
.scene-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3000;
    padding: 20px;
    overflow-y: auto;
}

.scene-modal-content {
    background: #1a1a1a;
    border-radius: 24px;
    padding: 32px;
    max-width: 700px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
}

.close-modal {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    color: #666;
    font-size: 28px;
    cursor: pointer;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease;
}

.close-modal:hover {
    background: #262626;
    color: #fff;
}

.scene-form {
    margin-top: 24px;
}

.form-section {
    margin-bottom: 32px;
    padding: 20px;
    background: #262626;
    border-radius: 12px;
}

.form-section h3 {
    font-size: 18px;
    margin-bottom: 16px;
    color: #9333ea;
}

.form-section small {
    display: block;
    margin-top: 8px;
    color: #666;
    font-size: 13px;
}

.scene-input {
    width: 100%;
    padding: 12px 16px;
    background: #1a1a1a;
    border: 1px solid #404040;
    border-radius: 8px;
    color: white;
    font-size: 16px;
    margin-bottom: 8px;
    font-family: 'Kanit', sans-serif;
}

.scene-input:focus {
    outline: none;
    border-color: #9333ea;
}

.scene-textarea {
    width: 100%;
    min-height: 150px;
    padding: 12px 16px;
    background: #1a1a1a;
    border: 1px solid #404040;
    border-radius: 8px;
    color: white;
    font-size: 16px;
    resize: vertical;
    font-family: 'Kanit', sans-serif;
    line-height: 1.5;
}

.character-count-buttons,
.mood-buttons,
.duration-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 12px;
}

.count-btn,
.mood-btn,
.duration-btn {
    padding: 12px 20px;
    background: #1a1a1a;
    border: 1px solid #404040;
    border-radius: 8px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Kanit', sans-serif;
}

.count-btn:hover,
.mood-btn:hover,
.duration-btn:hover {
    border-color: #9333ea;
    transform: translateY(-1px);
}

.count-btn.active,
.mood-btn.active,
.duration-btn.active {
    background: #9333ea;
    border-color: #9333ea;
}

.char-input-group {
    margin-bottom: 12px;
}

.char-input-group label {
    display: block;
    margin-bottom: 4px;
    color: #a1a1aa;
    font-size: 14px;
}

.modal-actions {
    display: flex;
    gap: 12px;
    margin-top: 32px;
}

.generate-btn {
    flex: 1;
    padding: 16px;
    background: linear-gradient(135deg, #9333ea, #ec4899);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    font-family: 'Kanit', sans-serif;
    transition: all 0.3s ease;
}

.generate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(147, 51, 234, 0.4);
}

.cancel-btn {
    padding: 16px 32px;
    background: #262626;
    color: white;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-family: 'Kanit', sans-serif;
}

/* Mobile adjustments */
@media (max-width: 768px) {
    .scene-modal-content {
        padding: 24px 20px;
        margin: 20px 0;
    }
    
    .form-section {
        padding: 16px;
    }
    
    .mood-buttons,
    .duration-buttons {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .modal-actions {
        flex-direction: column;
    }
    
    .cancel-btn {
        width: 100%;
    }
}
    /* Highlight situation field */
#sceneSituation {
    border-left: 3px solid #f59e0b;
}

#sceneSituation:focus {
    border-color: #f59e0b;
    box-shadow: 0 0 0 2px rgba(245, 158, 11, 0.2);
}
`;

// Add styles to page
if (!document.getElementById('multichar-styles')) {
    const styleSheet = document.createElement('style');
    styleSheet.id = 'multichar-styles';
    styleSheet.textContent = multicharStyles;
    document.head.appendChild(styleSheet);
}

// ========== COURSE MODAL FUNCTIONS ==========
function showCourse() {
    document.getElementById('courseModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeCourse() {
    document.getElementById('courseModal').style.display = 'none';
    document.body.style.overflow = '';
}

// Close on click outside
document.addEventListener('click', (e) => {
    const courseModal = document.getElementById('courseModal');
    if (e.target === courseModal) {
        closeCourse();
    }
});

// Generate Calendar for June 2025
function generateCalendar() {
    const calendar = document.getElementById('courseCalendar');
    if (!calendar) return;
    
    calendar.innerHTML = '';
    
    // Days header
    const days = ['‡∏≠‡∏≤', '‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™'];
    days.forEach(day => {
        const header = document.createElement('div');
        header.className = 'calendar-header';
        header.textContent = day;
        calendar.appendChild(header);
    });
    
    // June 2025 starts on Sunday (0)
    const firstDay = 0;
    const daysInMonth = 30;
    const today = new Date();
    const currentDate = today.getDate();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    // Empty cells before month starts
    for (let i = 0; i < firstDay; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day other-month';
        calendar.appendChild(emptyDay);
    }
    
    // Days of month
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = day;
        
        const dayOfWeek = (firstDay + day - 1) % 7;
        
        // Check availability
        if (dayOfWeek === 0 || dayOfWeek === 6) {
            // Weekend - available
            dayElement.classList.add('available');
            
            // Special case: Sunday June 22
            if (day === 22) {
                dayElement.classList.remove('available');
                dayElement.classList.add('busy');
            }
        } else {
            // Weekday - busy
            dayElement.classList.add('busy');
        }
        
        calendar.appendChild(dayElement);
    }
}

// Update showCourse function
const originalShowCourse = window.showCourse || function() {};
window.showCourse = function() {
    document.getElementById('courseModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
    generateCalendar();
};

// ========== IMAGE UPLOAD FUNCTIONS ==========
// Toggle feature flag for image upload
const ENABLE_DIRECT_UPLOAD = false; // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î feature ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

// Show/hide upload button based on feature flag
window.addEventListener('DOMContentLoaded', () => {
    if (ENABLE_DIRECT_UPLOAD) {
        const uploadBtn = document.querySelector('.upload-local-btn');
        if (uploadBtn) uploadBtn.style.display = 'inline-flex';
    }
});

// Open file picker
function openImageUpload() {
    document.getElementById('localImageUpload').click();
}

// Handle local image upload
async function handleLocalImageUpload(event) {
    const files = event.target.files;
    if (!files || files.length === 0) return;
    
    // Show loading state
    showNotification('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ...', 'info');
    
    try {
        for (const file of files) {
            // Validate file
            if (!file.type.startsWith('image/')) {
                showNotification('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', 'error');
                continue;
            }
            
            // Check file size (max 10MB)
            if (file.size > 10 * 1024 * 1024) {
                showNotification('‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB', 'error');
                continue;
            }
            
            // Convert to base64 directly (skip ImgBB)
            const imageUrl = await convertToBase64(file);
            console.log('Base64 length:', imageUrl.length); // Debug
            
            if (imageUrl) {
                // Ensure imageUrls array exists
                if (!window.imageUrls) {
                    window.imageUrls = [];
                }
                
                // Add to image array same as URL method
                window.imageUrls.push(imageUrl);
                console.log('Added base64 image to array'); // Debug
                
                displayImagePreview();
                showNotification('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
            } else {
                showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ', 'error');
            }
        }
    } catch (error) {
        console.error('Upload error:', error);
        showNotification('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ URL ‡πÅ‡∏ó‡∏ô', 'error');
    }
    
    // Reset input
    event.target.value = '';
}

// Upload to ImgBB service
async function uploadToImgBB(file) {
    try {
        const formData = new FormData();
        formData.append('image', file);
        
        const response = await fetch(`https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}`, {
            method: 'POST',
            body: formData,
            mode: 'cors'
        });
        
        if (!response.ok) {
            throw new Error('Upload failed');
        }
        
        const data = await response.json();
        console.log('ImgBB Response:', data); // Debug log
        
        if (data.success && data.data) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö structure ‡∏Ç‡∏≠‡∏á response
            const imageUrl = data.data.display_url || data.data.url || data.data.image?.url;
            console.log('Image URL:', imageUrl); // Debug log
            
            if (imageUrl) {
                return imageUrl;
            } else {
                console.error('No URL found in response:', data);
                throw new Error('No URL in response');
            }
        } else {
            throw new Error(data.error?.message || 'Upload failed');
        }
    } catch (error) {
        console.error('ImgBB upload error:', error);
        // Fallback to base64 if ImgBB fails
        return await convertToBase64(file);
    }
}

// Convert to base64 as fallback
async function convertToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

// ========== JSON REQUEST FUNCTION ==========
async function requestJSON(promptId) {
    // ‡∏´‡∏≤ prompt element
    const promptElement = document.getElementById(`promptContent-${promptId}`);
    if (!promptElement) return;
    
    // ‡πÅ‡∏õ‡∏•‡∏á HTML ‡πÄ‡∏õ‡πá‡∏ô text
    const originalPrompt = promptElement.innerHTML
        .replace(/<br><br>/g, '\n\n')
        .replace(/<br>/g, '\n')
        .replace(/‚Ä¢ /g, '* ')
        .replace(/<[^>]*>/g, '');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠ JSON
    const jsonRequest = `‡∏Ç‡∏≠‡πÅ‡∏ö‡∏ö json`;
    
    // ‡πÉ‡∏™‡πà‡πÉ‡∏ô textarea
    const messageInput = document.getElementById('messageInput');
    messageInput.value = jsonRequest;
    
    // Auto resize textarea
    messageInput.style.height = 'auto';
    messageInput.style.height = messageInput.scrollHeight + 'px';
    
    // ‡πÅ‡∏™‡∏î‡∏á notification
    showNotification('üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠ JSON...', 'info');
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    await sendMessage();
}

// ========== SCENE CONTINUITY FUNCTIONS ==========
function continueScene(promptId) {
    // ‡∏´‡∏≤ prompt element
    const promptElement = document.getElementById(`promptContent-${promptId}`);
    if (!promptElement) return;
    
    // ‡πÅ‡∏õ‡∏•‡∏á HTML ‡πÄ‡∏õ‡πá‡∏ô text
    const originalPrompt = promptElement.innerHTML
        .replace(/<br><br>/g, '\n\n')
        .replace(/<br>/g, '\n')
        .replace(/‚Ä¢ /g, '* ')
        .replace(/<[^>]*>/g, '');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Character Identity ‡∏à‡∏≤‡∏Å prompt
    let characterDetails = '';
    
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å prompt ‡πÄ‡∏î‡∏¥‡∏°
    const characterMatches = originalPrompt.match(/Character[^:]*:[\s\S]*?(?=\n\n|\n[A-Z]|$)/gi);
    if (characterMatches) {
        characterDetails = '\n\n[Character Identity - ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°]\n' + characterMatches.join('\n');
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ characterTemplateData ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô
    if (characterTemplateData && Object.keys(characterTemplateData).length > 0) {
        characterDetails = '\n\n[Character Identity from Template]\n';
        
        const data = characterTemplateData;
        if (data.nickname) characterDetails += `Nickname: ${data.nickname}\n`;
        if (data.gender) characterDetails += `Gender: ${data.gender}\n`;
        if (data.age) characterDetails += `Age: ${data.age}\n`;
        if (data.ethnicity) characterDetails += `Ethnicity: ${data.ethnicity}\n`;
        if (data.body) characterDetails += `Body type: ${data.body}\n`;
        if (data.skin) characterDetails += `Skin: ${data.skin}\n`;
        if (data.hair) characterDetails += `Hair: ${data.hair}\n`;
        if (data.face) characterDetails += `Face features: ${data.face}\n`;
        if (data.glasses) characterDetails += `Glasses: ${data.glasses}\n`;
        if (data.shirt) characterDetails += `Shirt: ${data.shirt}\n`;
        if (data.jacket) characterDetails += `Jacket/Suit: ${data.jacket}\n`;
        if (data.pants) characterDetails += `Pants/Skirt: ${data.pants}\n`;
        if (data.shoes) characterDetails += `Shoes: ${data.shoes}\n`;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡πà‡∏≠‡∏â‡∏≤‡∏Å
    const continuationText = `
[‡∏ï‡πà‡∏≠‡∏â‡∏≤‡∏Å‡∏à‡∏≤‡∏Å Scene ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤]
=========================
${originalPrompt}
=========================
${characterDetails}

[Scene ‡∏ï‡πà‡∏≠‡πÑ‡∏õ - ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô]:
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á: [‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà]
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô action: [‡∏£‡∏∞‡∏ö‡∏∏ action ‡πÉ‡∏´‡∏°‡πà]
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏û‡∏π‡∏î: [‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏ó‡∏û‡∏π‡∏î‡πÉ‡∏´‡∏°‡πà]

‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: 
- ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏î‡∏¥‡∏° 100% (‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
- ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°, ‡πÅ‡∏™‡∏á‡πÄ‡∏î‡∏¥‡∏°, ‡πÅ‡∏•‡∏∞ style ‡πÄ‡∏î‡∏¥‡∏°
- Character Identity ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á prompt!`;
    
    // ‡πÉ‡∏™‡πà‡πÉ‡∏ô textarea
    const messageInput = document.getElementById('messageInput');
    messageInput.value = continuationText;

    // Auto resize textarea
    autoResize();
    
    // Scroll ‡πÑ‡∏õ‡∏ó‡∏µ‡πà input
    messageInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
    messageInput.focus();
    
    // ‡πÅ‡∏™‡∏î‡∏á notification
    showNotification('üìã Scene ‡∏ï‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£! ‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‚ú®"', 'success');
}

// ========== EXPANDABLE TEXTAREA FUNCTIONS ==========
let isExpanded = false;

function toggleExpand() {
    const textarea = document.getElementById('messageInput');
    const btn = document.getElementById('expandBtn');
    
    isExpanded = !isExpanded;
    
    if (isExpanded) {
        textarea.classList.add('expanded');
        btn.innerHTML = '‚äü ‡∏¢‡πà‡∏≠';
    } else {
        textarea.classList.remove('expanded');
        btn.innerHTML = '‚õ∂ ‡∏Ç‡∏¢‡∏≤‡∏¢';
    }
}

// Auto-resize textarea
function autoResize() {
    const textarea = document.getElementById('messageInput');
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 400) + 'px';
}

// Full screen editor
function openFullEditor() {
    const content = document.getElementById('messageInput').value;
    document.getElementById('fullEditor').value = content;
    document.getElementById('editorModal').style.display = 'flex';
    
    // Focus ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å text ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ
    setTimeout(() => {
        const editor = document.getElementById('fullEditor');
        editor.focus();
        
        // ‡∏´‡∏≤ [‡∏£‡∏∞‡∏ö‡∏∏...] ‡πÄ‡∏û‡∏∑‡πà‡∏≠ highlight
        const start = content.indexOf('[‡∏£‡∏∞‡∏ö‡∏∏');
        if (start !== -1) {
            const end = content.indexOf('‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å') || content.length;
            editor.setSelectionRange(start, end);
        }
    }, 100);
}

function closeEditor() {
    document.getElementById('editorModal').style.display = 'none';
}

function applyEditorChanges() {
    const content = document.getElementById('fullEditor').value;
    document.getElementById('messageInput').value = content;
    closeEditor();
    
    // Update height
    autoResize();
}

// ‡πÅ‡∏™‡∏î‡∏á Quick Edit Bar ‡πÄ‡∏°‡∏∑‡πà‡∏≠ focus ‡∏ó‡∏µ‡πà textarea
document.getElementById('messageInput').addEventListener('focus', () => {
    const bar = document.getElementById('quickEditBar');
    const input = document.getElementById('messageInput');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
    if (input.value.length > 50) {
        bar.style.display = 'flex';
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Clear Placeholders
function clearPlaceholders() {
    const input = document.getElementById('messageInput');
    input.value = input.value.replace(/\[.*?\]/g, '');
    showNotification('üßπ ‡∏•‡∏ö placeholders ‡πÅ‡∏•‡πâ‡∏ß!', 'success');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Format Prompt
function formatPrompt() {
    const input = document.getElementById('messageInput');
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    input.value = input.value
        .replace(/\n{3,}/g, '\n\n') // ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô
        .replace(/\s+/g, ' ') // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥
        .trim();
    
    autoResize();
    showNotification('‚ú® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß!', 'success');
}

// Image Modal Functions
function openImageModal(imageUrl) {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    modal.style.display = 'flex';
    modalImg.src = imageUrl;
    document.body.style.overflow = 'hidden';
}

function closeImageModal(event) {
    if (!event || event.target.id === 'imageModal' || event.target.className === 'image-modal-close') {
        const modal = document.getElementById('imageModal');
        modal.style.display = 'none';
        document.body.style.overflow = '';
    }
}

// ========== MOBILE FIX OVERRIDE ==========
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Character Library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠

// Override switchMode function for mobile
const originalSwitchMode = window.switchMode;
window.switchMode = function(mode) {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    originalSwitchMode(mode);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö library mode ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
    if (mode === 'library' && window.innerWidth <= 968) {
        const library = document.getElementById('characterLibrary');
        const header = document.querySelector('.header');
        const chatPanel = document.querySelector('.chat-panel');
        const statusBar = document.querySelector('.status-bar');
        
        // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if (header) header.style.display = 'none';
        if (chatPanel) chatPanel.style.display = 'none';
        if (statusBar) statusBar.style.display = 'none';
        
        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ library ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        if (library) {
            library.style.cssText = `
                display: block !important;
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                width: 100% !important;
                height: 100% !important;
                z-index: 9999 !important;
                background: #0f0f0f !important;
                overflow-y: auto !important;
                padding: 20px !important;
            `;
        }
    }
};

// Override backToChat function
const originalBackToChat = window.backToChat;
window.backToChat = function() {
    const library = document.getElementById('characterLibrary');
    const header = document.querySelector('.header');
    const chatPanel = document.querySelector('.chat-panel');
    const statusBar = document.querySelector('.status-bar');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    if (header) header.style.display = '';
    if (chatPanel) chatPanel.style.display = '';
    if (statusBar) statusBar.style.display = '';
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    if (originalBackToChat) {
        originalBackToChat();
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        if (library) {
            library.classList.remove('active');
            library.style.cssText = '';
        }
        switchMode('general');
    }
};

console.log('‚úÖ Mobile fixes applied!');

// ========== MOBILE ENHANCEMENTS ==========

// Toggle Mobile Info
function toggleMobileInfo() {
    const content = document.getElementById('mobileInfoContent');
    const button = document.querySelector('.mobile-info-toggle');
    
    if (content.classList.contains('show')) {
        content.classList.remove('show');
        button.innerHTML = '‚ÑπÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ ‚ñº';
    } else {
        content.classList.add('show');
        button.innerHTML = '‚ÑπÔ∏è ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚ñ≤';
        
        // Load content based on current mode
        loadMobileInfo(currentMode);
    }
}

// Load info content for mobile
function loadMobileInfo(mode) {
    const content = document.getElementById('mobileInfoContent');
    let infoHTML = '';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Quick Actions ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    const quickActionsHTML = `
        <div style="
            display: flex;
            gap: 8px;
            margin-bottom: 16px;
            padding-bottom: 16px;
            border-bottom: 1px solid #404040;
        ">
            <button onclick="showTemplates(); toggleMobileInfo();" style="
                flex: 1;
                padding: 12px;
                background: #262626;
                border: 1px solid #404040;
                border-radius: 8px;
                color: white;
                cursor: pointer;
                font-size: 14px;
                font-family: 'Kanit', sans-serif;
            ">
                üìö Templates
            </button>
            <button onclick="showFavorites(); toggleMobileInfo();" style="
                flex: 1;
                padding: 12px;
                background: #262626;
                border: 1px solid #404040;
                border-radius: 8px;
                color: white;
                cursor: pointer;
                font-size: 14px;
                font-family: 'Kanit', sans-serif;
            ">
                ‚≠ê Favorites
            </button>
        </div>
    `;
    
    switch(mode) {
        case 'general':
            infoHTML = quickActionsHTML + `
                <h4>‚ú® ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ General Prompt</h4>
                <p>‚Ä¢ ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ AI ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏´‡πâ</p>
                <p>‚Ä¢ ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ reference ‡πÑ‡∏î‡πâ</p>
                <p>‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©: "‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏è‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå", "‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏û"</p>
            `;
            break;
            
        case 'character':
            infoHTML = quickActionsHTML + `
                <h4>üßô ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Character Creator</h4>
                <p>‚Ä¢ ‡∏ö‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ AI ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile</p>
                <p>‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ</p>
                <p>‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡∏ö‡∏´‡∏ç‡∏¥‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå cyberpunk"</p>
            `;
            break;
            
        case 'promptmaster':
        case 'multichar':
            infoHTML = quickActionsHTML + `
                <h4>üé≠ Prompt Master</h4>
                <div style="margin: 16px 0;">
                    <button onclick="showSceneBuilder(); toggleMobileInfo();" style="
                        width: 100%;
                        padding: 16px;
                        background: linear-gradient(135deg, #9333ea, #ec4899);
                        color: white;
                        border: none;
                        border-radius: 12px;
                        font-size: 16px;
                        font-weight: 600;
                        cursor: pointer;
                        font-family: 'Kanit', sans-serif;
                    ">
                        üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt Master
                    </button>
                </div>
                <p style="font-size: 13px; color: #a1a1aa;">
                    ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2-5 ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏ó‡∏û‡∏π‡∏î<br>
                    ‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏â‡∏≤‡∏Å‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                </p>
            `;
            break;
            
        case 'image':
    infoHTML = quickActionsHTML + `
        <h4>üñºÔ∏è Image Prompt</h4>
        <p>‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞</p>
        <p>‚Ä¢ ‡∏ö‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ AI ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</p>
        <p>‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
    `;
    break;
    
        case 'imagegen':
    infoHTML = quickActionsHTML + `
        <h4>üé® Image Generator</h4>
        
        <div style="margin: 16px 0;">
            <label style="display: block; margin-bottom: 8px; color: #9333ea; font-weight: 600;">
                ‚ú® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Model:
            </label>
            
            <div style="display: flex; flex-direction: column; gap: 8px;">
                <label style="
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    background: #262626;
                    border: 2px solid #9333ea;
                    border-radius: 8px;
                    cursor: pointer;
                ">
                    <input type="radio" name="mobileImageModel" value="flux-schnell" checked style="margin-right: 12px;">
                    <div>
                        <div style="font-weight: 600;">Express Mode</div>
                        <div style="font-size: 12px; color: #a1a1aa;">üí∞ 0.15 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï | ‚ö° ‡πÄ‡∏£‡πá‡∏ß 5-8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</div>
                    </div>
                </label>
                
                <label style="
                    display: flex;
                    align-items: center;
                    padding: 12px;
                    background: #262626;
                    border: 2px solid #404040;
                    border-radius: 8px;
                    cursor: pointer;
                ">
                    <input type="radio" name="mobileImageModel" value="flux-dev" style="margin-right: 12px;">
                    <div>
                        <div style="font-weight: 600;">Premium Mode</div>
                        <div style="font-size: 12px; color: #a1a1aa;">üí∞ 0.20 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï | ‚ú® ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á</div>
                    </div>
                </label>
        
        <div style="margin: 16px 0;">
            <label style="display: block; margin-bottom: 8px; color: #9333ea; font-weight: 600;">
                üìê Aspect Ratio:
            </label>
            <div style="display: flex; gap: 6px; flex-wrap: wrap;">
                <button onclick="setMobileRatio('1:1')" class="mobile-ratio-btn" style="
                    padding: 8px 16px;
                    background: #9333ea;
                    border: 1px solid #404040;
                    border-radius: 6px;
                    color: white;
                    cursor: pointer;
                    font-size: 14px;
                ">1:1</button>
                <button onclick="setMobileRatio('16:9')" class="mobile-ratio-btn" style="
                    padding: 8px 16px;
                    background: #262626;
                    border: 1px solid #404040;
                    border-radius: 6px;
                    color: white;
                    cursor: pointer;
                    font-size: 14px;
                ">16:9</button>
                <button onclick="setMobileRatio('9:16')" class="mobile-ratio-btn" style="
                    padding: 8px 16px;
                    background: #262626;
                    border: 1px solid #404040;
                    border-radius: 6px;
                    color: white;
                    cursor: pointer;
                    font-size: 14px;
                ">9:16</button>
                <button onclick="setMobileRatio('4:3')" class="mobile-ratio-btn" style="
                    padding: 8px 16px;
                    background: #262626;
                    border: 1px solid #404040;
                    border-radius: 6px;
                    color: white;
                    cursor: pointer;
                    font-size: 14px;
                ">4:3</button>
                <button onclick="setMobileRatio('3:4')" class="mobile-ratio-btn" style="
                    padding: 8px 16px;
                    background: #262626;
                    border: 1px solid #404040;
                    border-radius: 6px;
                    color: white;
                    cursor: pointer;
                    font-size: 14px;
                ">3:4</button>
            </div>
        </div>
    `;
    break;
            
        case 'library':
            infoHTML = quickActionsHTML + `
                <h4>üóÇÔ∏è My Character Library</h4>
                <p>‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥</p>
                <p>‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
                <p>‚Ä¢ ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß</p>
            `;
            break;

            case 'chat':
    infoHTML = quickActionsHTML + `
        <h4>üí¨ AI Chat Assistant</h4>
        
        <div style="margin: 16px 0; padding: 12px; background: rgba(147, 51, 234, 0.1); border-radius: 8px;">
            <div style="color: #9333ea; font-weight: 600; margin-bottom: 4px;">
                ü§ñ Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            </div>
            <div style="font-size: 14px;">
                <strong>‚ö° GPT-4o-mini</strong>
            </div>
        </div>
        
        <div style="margin-top: 16px;">
            <h5 style="color: #9333ea; margin-bottom: 8px;">üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:</h5>
            <p style="font-size: 13px;">‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ</p>
            <p style="font-size: 13px;">‚Ä¢ ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</p>
            <p style="font-size: 13px;">‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</p>
            <p style="font-size: 13px;">‚Ä¢ AI ‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!!</p>
        </div>
    `;
    break;
    }
    
    content.innerHTML = infoHTML;
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile image settings
let mobileImageRatio = '1:1';

function setMobileRatio(ratio) {
    mobileImageRatio = ratio;
    
    // Update button styles
    document.querySelectorAll('.mobile-ratio-btn').forEach(btn => {
        if (btn.textContent === ratio) {
            btn.style.background = '#9333ea';
        } else {
            btn.style.background = '#262626';
        }
    });
}

// Override getSelectedImageModel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile
const originalGetSelectedImageModel = window.getSelectedImageModel;
window.getSelectedImageModel = function() {
    if (window.innerWidth <= 768) {
        const mobileSelected = document.querySelector('input[name="mobileImageModel"]:checked');
        if (mobileSelected) {
            return mobileSelected.value;
        }
    }
    return originalGetSelectedImageModel();
};

// Override getSelectedRatio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile
const originalGetSelectedRatio = window.getSelectedRatio;
window.getSelectedRatio = function() {
    if (window.innerWidth <= 768) {
        return mobileImageRatio;
    }
    return originalGetSelectedRatio();
};

// Export functions
window.toggleMobileInfo = toggleMobileInfo;
window.setMobileRatio = setMobileRatio;
// ========== END MOBILE ENHANCEMENTS ==========
// FAB Tools Menu Toggle
function toggleToolsMenu() {
    const menu = document.getElementById('fabToolsMenu');
    const isOpen = menu.style.display === 'flex';
    
    if (isOpen) {
        menu.style.display = 'none';
    } else {
        menu.style.display = 'flex';
        
        // ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
        setTimeout(() => {
            document.addEventListener('click', closeToolsMenu);
        }, 100);
    }
}

function closeToolsMenu(e) {
    const menu = document.getElementById('fabToolsMenu');
    const button = document.querySelector('.fab-tools');
    
    if (!menu.contains(e.target) && !button.contains(e.target)) {
        menu.style.display = 'none';
        document.removeEventListener('click', closeToolsMenu);
    }
}

// Export functions
window.toggleToolsMenu = toggleToolsMenu;
window.closeToolsMenu = closeToolsMenu;

// ========== RESET THREAD FUNCTION ==========
function resetCurrentThread() {
    // ‡πÅ‡∏™‡∏î‡∏á confirmation
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Reset ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ error ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á')) {
        return;
    }
    
    try {
        // 1. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå thread
        const threadKey = `${userId}_${currentMode}`;
        if (userThreads.has(threadKey)) {
            userThreads.delete(threadKey);
            console.log('‚úÖ Thread cleared:', threadKey);
        }
        
        // 2. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå chat history
        if (chatHistory[currentMode]) {
            chatHistory[currentMode] = '';
        }
        
        // 3. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ chat
        const chatMessages = document.getElementById('chatMessages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
        }
        
        // 4. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á
        window.imageUrls = [];
        const imagePreview = document.getElementById('imagePreview');
        if (imagePreview) {
            imagePreview.innerHTML = '';
        }
        
        // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
        addWelcomeMessage(currentMode);
        
        // 6. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        showNotification('‚úÖ Reset ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', 'success');
        
    } catch (error) {
        console.error('Reset error:', error);
        // ‡∏ñ‡πâ‡∏≤ reset ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ reload ‡∏´‡∏ô‡πâ‡∏≤
        location.reload();
    }
}

// Export function
window.resetCurrentThread = resetCurrentThread;

// ========== ENHANCE PROMPT FUNCTION ==========
async function enhancePrompt() {
    const input = document.getElementById('messageInput');
    const enhanceBtn = document.getElementById('enhanceBtn');
    const enhanceStatus = document.getElementById('enhanceStatus');
    const prompt = input.value.trim();
    
    if (!prompt) {
        showNotification('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î prompt ‡∏Å‡πà‡∏≠‡∏ô', 'warning');
        return;
    }
    
    // Disable button ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á loading
    enhanceBtn.disabled = true;
    enhanceBtn.style.display = 'none';
    enhanceStatus.style.display = 'flex';
    
    try {
        const response = await fetch(`${API_URL}/enhance-prompt`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                prompt: prompt,
                userId: userId
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.enhancedPrompt) {
            // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà prompt ‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
            input.value = data.enhancedPrompt;
            
            // Auto resize textarea
            input.style.height = 'auto';
            input.style.height = input.scrollHeight + 'px';
            
            showNotification('‚ú® ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!', 'success');
            
            // Update usage ‡πÅ‡∏•‡∏∞ credits ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (data.usage) {
                updateUsageDisplay();
                loadUserCredits();
            }
            
        } else if (response.status === 429) {
            // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏û‡∏≠
            if (data.error === 'Insufficient credits') {
                showCreditRequiredMessage(data);
            } else {
                showNotification('‚ùå ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô', 'error');
            }
        } else {
            showNotification(`‚ùå ${data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}`, 'error');
        }
        
    } catch (error) {
        console.error('Enhance error:', error);
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ server', 'error');
    } finally {
        // Enable button ‡∏Å‡∏•‡∏±‡∏ö
        enhanceBtn.disabled = false;
        enhanceBtn.style.display = '';
        enhanceStatus.style.display = 'none';
    }
}

// Export function
window.enhancePrompt = enhancePrompt;

// Clear chat history
function clearChatHistory() {
    if (currentMode === 'chat') {
        if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            chatHistory.chat = '';
            clearChat();
            addWelcomeMessage('chat');
            showNotification('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
}

// Export function
window.clearChatHistory = clearChatHistory;

// ========== CHAT LOCALSTORAGE SYSTEM ==========

// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Chat
const ChatStorage = {
    MAX_MESSAGES: 100,  // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    STORAGE_KEY: `veo_chat_history`,
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    save: function() {
        if (currentMode !== 'chat') return;
        
        try {
            const messages = [];
            const chatElements = document.querySelectorAll('#chatMessages .message');
            
            chatElements.forEach(elem => {
                const isUser = elem.classList.contains('user');
                const contentElem = elem.querySelector('.message-content');
                if (!contentElem) return;
                
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° model info)
                let mainContent = '';
                let htmlContent = '';
                const contentDiv = contentElem.querySelector('div:first-child');
                
                if (isUser) {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user message ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                    if (contentDiv) {
                        mainContent = contentDiv.textContent.trim();
                    } else {
                        mainContent = contentElem.textContent.trim();
                    }
                    // Clean timestamp patterns from stored content
                    mainContent = mainContent.replace(/\d{2}:\d{2} ‚Ä¢ \d{1,2} .+? \d{4}/g, '').trim();
                } else {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assistant message ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô HTML ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ format
                    if (contentDiv) {
                        mainContent = contentDiv.textContent.trim();
                        htmlContent = contentDiv.innerHTML;
                    } else {
                        mainContent = contentElem.textContent.trim();
                        htmlContent = contentElem.innerHTML;
                    }
                    
                    // ‡∏•‡∏ö model info ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å htmlContent ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = htmlContent;
                    const modelInfoElem = tempDiv.querySelector('.chat-model-info');
                    if (modelInfoElem) {
                        modelInfoElem.remove();
                    }
                    htmlContent = tempDiv.innerHTML;
                }
                
                // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö loading, error, ‡∏´‡∏£‡∏∑‡∏≠ welcome message
                if (mainContent.includes('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...') || 
                    mainContent.includes('‚ùå') || 
                    mainContent.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant')) {
                    return;
                }
                
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• model ‡πÅ‡∏•‡∏∞ cost ‡∏à‡∏≤‡∏Å chat-model-info (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
let modelData = null;
const modelInfo = contentElem.querySelector('.chat-model-info');
if (modelInfo && !isUser) {
    const spans = modelInfo.querySelectorAll('span');
    if (spans.length >= 2) {
        const modelText = spans[0].textContent.trim();
        const costText = spans[1].textContent.trim();
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤
        if (!modelText.includes('undefined') && !costText.includes('undefined')) {
            modelData = {
                model: modelText,
                cost: parseFloat(costText.replace(' ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï', ''))
            };
        }
    }
}
                
                messages.push({
                    role: isUser ? 'user' : 'assistant',
                    content: mainContent,
                    htmlContent: htmlContent,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° HTML content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assistant
                    timestamp: new Date().toISOString(),
                    modelData: modelData  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• model
                });
            });
            
            // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            const recentMessages = messages.slice(-this.MAX_MESSAGES);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
            const key = `${this.STORAGE_KEY}_${userId}`;
            localStorage.setItem(key, JSON.stringify({
                messages: recentMessages,
                lastUpdated: new Date().toISOString(),
                model: getSelectedChatModel()
            }));
            
            console.log(`üíæ Saved ${recentMessages.length} messages to LocalStorage`);
            
        } catch (error) {
            console.error('Failed to save chat:', error);
            if (error.name === 'QuotaExceededError') {
                // localStorage ‡πÄ‡∏ï‡πá‡∏° - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
                this.cleanup();
            }
        }
    },
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    load: function() {
        try {
            const key = `${this.STORAGE_KEY}_${userId}`;
            const saved = localStorage.getItem(key);
            
            if (!saved) return [];
            
            const data = JSON.parse(saved);
            console.log(`üìÇ Loaded ${data.messages.length} messages from LocalStorage`);
            
            return data.messages || [];
            
        } catch (error) {
            console.error('Failed to load chat:', error);
            return [];
        }
    },
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô UI
    display: function() {
        const messages = this.load();
        
        // Clear current chat ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        
        if (messages.length === 0) {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÅ‡∏™‡∏î‡∏á welcome message
            addWelcomeMessage('chat');
            return;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        messages.forEach(msg => {
            if (msg.role === 'assistant') {
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assistant ‡πÉ‡∏ä‡πâ HTML content ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                if (msg.htmlContent) {
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢ HTML format ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                    const messageId = `msg-${Date.now()}-${Math.random()}`;
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message assistant';
                    messageDiv.innerHTML = `
                        <div class="message-avatar">ü§ñ</div>
                        <div class="message-content">
                            <div>${msg.htmlContent}</div>
                            ${msg.modelData ? `
                            <div class="chat-model-info">
                                <span>${msg.modelData.model}</span>
                                <span>${msg.modelData.cost} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</span>
                            </div>` : ''}
                        </div>
                    `;
                    chatMessages.appendChild(messageDiv);
                } else if (msg.modelData) {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• model ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ HTML (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤)
                    displayChatResponseFromHistory(msg.content, msg.modelData);
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
                    addMessage(msg.content, msg.role);
                }
            } else {
                // User message ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ - clean timestamps first
                const cleanedContent = msg.content.replace(/\d{2}:\d{2} ‚Ä¢ \d{1,2} .+? \d{4}/g, '').trim();
                addMessage(cleanedContent, msg.role);
            }
        });
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å local
        const infoDiv = document.createElement('div');
        infoDiv.style.cssText = `
            text-align: center;
            padding: 8px;
            margin: 8px auto;
            background: rgba(59, 130, 246, 0.1);
            border-radius: 8px;
            font-size: 12px;
            color: #64748b;
        `;
        infoDiv.innerHTML = `üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ${messages.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
        chatMessages.insertBefore(infoDiv, chatMessages.firstChild);
    },
    
    // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    clear: function() {
        try {
            const key = `${this.STORAGE_KEY}_${userId}`;
            localStorage.removeItem(key);
            console.log('üóëÔ∏è Chat history cleared');
        } catch (error) {
            console.error('Failed to clear chat:', error);
        }
    },
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î localStorage (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤)
    cleanup: function() {
        try {
            const allKeys = Object.keys(localStorage);
            const chatKeys = allKeys.filter(key => key.startsWith(this.STORAGE_KEY));
            
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° lastUpdated ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
            const items = chatKeys.map(key => ({
                key,
                data: JSON.parse(localStorage.getItem(key))
            })).sort((a, b) => 
                new Date(b.data.lastUpdated) - new Date(a.data.lastUpdated)
            );
            
            // ‡∏•‡∏ö‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            const toDelete = items.slice(Math.floor(items.length / 2));
            toDelete.forEach(item => {
                localStorage.removeItem(item.key);
            });
            
            console.log(`üßπ Cleaned up ${toDelete.length} old chat histories`);
            
        } catch (error) {
            console.error('Cleanup failed:', error);
        }
    },
    
    // ‡∏î‡∏π‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    getSize: function() {
        try {
            const key = `${this.STORAGE_KEY}_${userId}`;
            const data = localStorage.getItem(key) || '';
            const sizeInBytes = new Blob([data]).size;
            const sizeInKB = (sizeInBytes / 1024).toFixed(2);
            return `${sizeInKB} KB`;
        } catch (error) {
            return '0 KB';
        }
    }
};

// ========== UPDATE EXISTING FUNCTIONS ==========

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç sendChatMessage - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
const originalSendChatMessage = window.sendChatMessage;
window.sendChatMessage = async function(message) {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å function ‡πÄ‡∏î‡∏¥‡∏°
    await originalSendChatMessage(message);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    setTimeout(() => {
        ChatStorage.save();
    }, 500);
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç clearChatHistory - ‡∏•‡∏ö localStorage ‡∏î‡πâ‡∏ß‡∏¢
const originalClearChatHistory = window.clearChatHistory;
window.clearChatHistory = function() {
    if (currentMode === 'chat') {
        if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            chatHistory.chat = '';
            clearChat();
            addWelcomeMessage('chat');
            ChatStorage.clear(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
            showNotification('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç switchMode - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î
const originalSwitchMode2 = window.switchMode;
window.switchMode = function(mode) {
    // Save current mode history before switching
    if (currentMode === 'promptmaster' || currentMode === 'multichar' || currentMode === 'image') {
        PromptStorage.save(currentMode);
    } else if (currentMode === 'chat') {
        ChatStorage.save();
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å function ‡πÄ‡∏î‡∏¥‡∏° (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadChatHistory ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    originalSwitchMode2(mode);
};

// ========== AUTO SAVE ==========

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(() => {
    if (currentMode === 'chat') {
        ChatStorage.save();
    }
}, 30000);

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
window.addEventListener('beforeunload', () => {
    if (currentMode === 'chat') {
        ChatStorage.save();
    }
});

// ========== UTILITY FUNCTIONS ==========

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ storage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
window.showChatStorageInfo = function() {
    const size = ChatStorage.getSize();
    const messages = ChatStorage.load();
    console.log(`
üìä Chat Storage Info:
- User: ${userId}
- Messages: ${messages.length}
- Size: ${size}
- Max allowed: ~5-10 MB
    `);
};

console.log('‚úÖ Chat LocalStorage System loaded');

// ========== PROMPT STORAGE SYSTEM ==========
// Storage system for general and multichar (prompt master) modes
const PromptStorage = {
    MAX_MESSAGES: 50,  // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏´‡∏°‡∏î
    STORAGE_KEYS: {
        promptmaster: 'veo_promptmaster_history',
        multichar: 'veo_multichar_history'
    },
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    save: function(mode) {
        if (mode !== 'promptmaster' && mode !== 'multichar') return;
        
        // ‡πÉ‡∏ä‡πâ userId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ChatStorage
        console.log(`üîµ PromptStorage.save called for ${mode} mode, userId: ${userId}`);
        
        if (!userId) {
            console.error('‚ùå PromptStorage.save: userId is not set!');
            return;
        }
        
        try {
            const messages = [];
            const chatElements = document.querySelectorAll('#chatMessages .message');
            console.log(`üîµ Found ${chatElements.length} elements to save`);
            
            chatElements.forEach(elem => {
                const isUser = elem.classList.contains('user');
                const contentElem = elem.querySelector('.message-content');
                if (!contentElem) return;
                
                let content = '';
                
                if (isUser) {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user message ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á <br> ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô \n ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = contentElem.innerHTML;
                    // ‡∏•‡∏ö timestamp ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    const timestampElem = tempDiv.querySelector('.message-timestamp');
                    if (timestampElem) {
                        timestampElem.remove();
                    }
                    // ‡πÅ‡∏õ‡∏•‡∏á <br> ‡πÄ‡∏õ‡πá‡∏ô \n
                    let html = tempDiv.innerHTML;
                    html = html.replace(/<br\s*\/?>/gi, '\n');
                    // ‡πÅ‡∏õ‡∏•‡∏á HTML entities ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                    tempDiv.innerHTML = html;
                    content = tempDiv.textContent.trim();
                } else {
                    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assistant message ‡πÄ‡∏Å‡πá‡∏ö innerHTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    content = contentElem.innerHTML;
                }
                
                // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö loading, error messages
                if (content.includes('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á') || 
                    content.includes('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î') ||
                    content.includes('‚ùå') || 
                    content.includes('‚ö†Ô∏è Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏') ||
                    content.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠')) {
                    return;
                }
                
                messages.push({
                    role: isUser ? 'user' : 'assistant',
                    content: content,
                    timestamp: new Date().toISOString(),
                    hasPrompt: !isUser && (content.includes('veo3-prompt') || content.includes('character-profile'))
                });
            });
            
            // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            const recentMessages = messages.slice(-this.MAX_MESSAGES);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
            const key = `${this.STORAGE_KEYS[mode]}_${userId}`;
            localStorage.setItem(key, JSON.stringify({
                messages: recentMessages,
                lastUpdated: new Date().toISOString(),
                mode: mode
            }));
            
            console.log(`üíæ Saved ${recentMessages.length} messages for ${mode} mode`);
            console.log(`üîµ Saved to key: ${key}`);
            
        } catch (error) {
            console.error(`Failed to save ${mode} history:`, error);
            if (error.name === 'QuotaExceededError') {
                this.cleanup(mode);
            }
        }
    },
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    load: function(mode) {
        if (mode !== 'general' && mode !== 'multichar') return [];
        
        try {
            const key = `${this.STORAGE_KEYS[mode]}_${userId}`;
            console.log(`üü° Loading from key: ${key}`);
            const saved = localStorage.getItem(key);
            
            if (!saved) return [];
            
            const data = JSON.parse(saved);
            console.log(`üìÇ Loaded ${data.messages.length} messages for ${mode} mode`);
            
            return data.messages || [];
            
        } catch (error) {
            console.error(`Failed to load ${mode} history:`, error);
            return [];
        }
    },
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô UI
    display: function(mode) {
        if (mode !== 'general' && mode !== 'multichar') return;
        
        const messages = this.load(mode);
        
        // Clear current chat
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        
        if (messages.length === 0) {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÅ‡∏™‡∏î‡∏á welcome message
            addWelcomeMessage(mode);
            return;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        messages.forEach(msg => {
            if (msg.role === 'user') {
                // Clean timestamp patterns from user messages before displaying
                const cleanedContent = msg.content.replace(/\d{2}:\d{2} ‚Ä¢ \d{1,2} .+? \d{4}/g, '').trim();
                // Pass the cleaned content with newlines preserved
                addMessage(cleanedContent, 'user');
            } else {
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assistant message ‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà HTML ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
                const messageId = `msg-${Date.now()}-${Math.random()}`;
                const messageDiv = document.createElement('div');
                messageDiv.id = messageId;
                messageDiv.className = 'message assistant';
                
                // ‡πÉ‡∏ä‡πâ HTML ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                messageDiv.innerHTML = `
                    <div class="message-avatar">ü§ñ</div>
                    <div class="message-content">${msg.content}</div>
                `;
                
                chatMessages.appendChild(messageDiv);
            }
        });
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å local
        const infoDiv = document.createElement('div');
        infoDiv.style.cssText = `
            text-align: center;
            padding: 8px;
            margin: 8px auto;
            background: rgba(147, 51, 234, 0.1);
            border-radius: 8px;
            font-size: 12px;
            color: #a1a1aa;
        `;
        infoDiv.innerHTML = `üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ${messages.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
        chatMessages.insertBefore(infoDiv, chatMessages.firstChild);
    },
    
    // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    clear: function(mode) {
        if (mode !== 'general' && mode !== 'multichar') return;
        
        // ‡πÉ‡∏ä‡πâ userId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ChatStorage
        try {
            const key = `${this.STORAGE_KEYS[mode]}_${userId}`;
            localStorage.removeItem(key);
            console.log(`üóëÔ∏è ${mode} history cleared`);
        } catch (error) {
            console.error(`Failed to clear ${mode} history:`, error);
        }
    },
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î localStorage
    cleanup: function(mode) {
        // ‡πÉ‡∏ä‡πâ userId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ChatStorage
        try {
            const key = `${this.STORAGE_KEYS[mode]}_${userId}`;
            const saved = localStorage.getItem(key);
            
            if (saved) {
                const data = JSON.parse(saved);
                // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                const halfMessages = data.messages.slice(Math.floor(data.messages.length / 2));
                
                localStorage.setItem(key, JSON.stringify({
                    messages: halfMessages,
                    lastUpdated: new Date().toISOString(),
                    mode: mode
                }));
                
                console.log(`üßπ Cleaned up ${mode} history, kept ${halfMessages.length} messages`);
            }
        } catch (error) {
            console.error(`Cleanup failed for ${mode}:`, error);
        }
    },
    
    // ‡∏î‡∏π‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    getSize: function(mode) {
        // ‡πÉ‡∏ä‡πâ userId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ChatStorage
        try {
            const key = `${this.STORAGE_KEYS[mode]}_${userId}`;
            const data = localStorage.getItem(key) || '';
            const sizeInBytes = new Blob([data]).size;
            const sizeInKB = (sizeInBytes / 1024).toFixed(2);
            return `${sizeInKB} KB`;
        } catch (error) {
            return '0 KB';
        }
    }
};

// ========== UPDATE SAVE AND LOAD FUNCTIONS ==========

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç saveChatHistory function ‡πÄ‡∏î‡∏¥‡∏°
const originalSaveChatHistory = window.saveChatHistory;
window.saveChatHistory = function(mode) {
    if (mode === 'chat') {
        // ‡πÉ‡∏ä‡πâ ChatStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö chat mode
        originalSaveChatHistory(mode);
    } else if (mode === 'promptmaster' || mode === 'multichar') {
        // ‡πÉ‡∏ä‡πâ PromptStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö promptmaster ‡πÅ‡∏•‡∏∞ multichar
        PromptStorage.save(mode);
    } else if (mode === 'image') {
        // ‡πÉ‡∏ä‡πâ ImagePromptStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image mode
        ImagePromptStorage.save();
    } else {
        // ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
        originalSaveChatHistory(mode);
    }
};

// loadChatHistory ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á override

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç clearModeChat function
const originalClearModeChat = window.clearModeChat;
window.clearModeChat = function(mode) {
    if (mode === 'promptmaster' || mode === 'multichar') {
        const modeName = mode === 'promptmaster' ? 'Prompt Master' : 'Prompt Master';
        if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ${modeName} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            PromptStorage.clear(mode);
            chatHistory[mode] = '';
            if (currentMode === mode) {
                clearChat();
                addWelcomeMessage(mode);
            }
            showNotification('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    } else if (mode === 'image') {
        if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Image Prompt ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            ImagePromptStorage.clear();
            chatHistory[mode] = '';
            if (currentMode === mode) {
                clearChat();
                addWelcomeMessage(mode);
            }
            showNotification('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    } else {
        originalClearModeChat(mode);
    }
};


// Auto save ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(() => {
    if (currentMode === 'promptmaster' || currentMode === 'multichar') {
        PromptStorage.save('multichar');
    } else if (currentMode === 'image') {
        ImagePromptStorage.save();
    }
}, 30000);

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
window.addEventListener('beforeunload', () => {
    if (currentMode === 'promptmaster' || currentMode === 'multichar') {
        PromptStorage.save('multichar');
    } else if (currentMode === 'image') {
        ImagePromptStorage.save();
    }
});

// Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• storage
window.showPromptStorageInfo = function() {
    const promptmasterSize = PromptStorage.getSize('promptmaster');
    const multicharSize = PromptStorage.getSize('multichar');
    const imageSize = PromptStorage.getSize('image');
    const promptmasterMessages = PromptStorage.load('promptmaster');
    const multicharMessages = PromptStorage.load('multichar');
    const imageMessages = PromptStorage.load('image');
    
    console.log(`
üìä Prompt Storage Info:
- User: ${userId}
- Prompt Master Mode: ${promptmasterMessages.length} messages (${promptmasterSize})
- Multichar Mode: ${multicharMessages.length} messages (${multicharSize})
- Image Mode: ${imageMessages.length} messages (${imageSize})
- Max allowed: ~5-10 MB per mode
    `);
};

console.log('‚úÖ Prompt Storage System loaded');

// ========== IMAGE PROMPT STORAGE SYSTEM ==========
const ImagePromptStorage = {
    MAX_MESSAGES: 30,
    STORAGE_KEY: 'veo_image_prompt_history',
    
    save: function() {
        if (currentMode !== 'image') return;
        
        console.log(`üîµ ImagePromptStorage.save called, userId: ${userId}`);
        
        if (!userId) {
            console.error('‚ùå ImagePromptStorage.save: userId is not set!');
            return;
        }
        
        try {
            const messages = [];
            const chatElements = document.querySelectorAll('#chatMessages .message');
            
            chatElements.forEach(elem => {
                const isUser = elem.classList.contains('user');
                const content = elem.querySelector('.message-content');
                
                if (content) {
                    messages.push({
                        type: isUser ? 'user' : 'assistant',
                        content: content.innerHTML,
                        timestamp: Date.now()
                    });
                }
            });
            
            const trimmedMessages = messages.slice(-this.MAX_MESSAGES);
            const key = `${this.STORAGE_KEY}_${userId}`;
            localStorage.setItem(key, JSON.stringify(trimmedMessages));
            console.log(`‚úÖ Saved ${trimmedMessages.length} messages to image prompt storage`);
        } catch (error) {
            console.error('‚ùå Error saving image prompt history:', error);
        }
    },
    
    load: function() {
        try {
            const key = `${this.STORAGE_KEY}_${userId}`;
            const saved = localStorage.getItem(key);
            
            if (saved) {
                const messages = JSON.parse(saved);
                console.log(`üìò Loaded ${messages.length} messages from image prompt storage`);
                return messages;
            }
        } catch (error) {
            console.error('‚ùå Error loading image prompt history:', error);
        }
        return [];
    },
    
    display: function() {
        const messages = this.load();
        const chatMessages = document.getElementById('chatMessages');
        
        // Clear current messages
        chatMessages.innerHTML = '';
        
        // Add welcome message only if no messages
        if (messages.length === 0) {
            addWelcomeMessage('image');
        } else {
            // Add saved messages
            messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${msg.type}`;
                
                // Add avatar for assistant messages
                if (msg.type === 'assistant') {
                    messageDiv.innerHTML = `
                        <div class="message-avatar">ü§ñ</div>
                        <div class="message-content">${msg.content}</div>
                    `;
                } else {
                    // Clean timestamp patterns from user messages before displaying
                    let cleanedContent = msg.content.replace(/\d{2}:\d{2} ‚Ä¢ \d{1,2} .+? \d{4}/g, '').trim();
                    // If it's plain text (user message), preserve line breaks
                    if (!cleanedContent.includes('<')) {
                        cleanedContent = cleanedContent.replace(/\n/g, '<br>');
                    }
                    messageDiv.innerHTML = `<div class="message-content">${cleanedContent}</div>`;
                }
                
                chatMessages.appendChild(messageDiv);
            });
        }
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        console.log(`‚úÖ Displayed ${messages.length} messages from image prompt storage`);
    },
    
    clear: function() {
        try {
            const key = `${this.STORAGE_KEY}_${userId}`;
            localStorage.removeItem(key);
            console.log('‚úÖ Image prompt history cleared');
        } catch (error) {
            console.error('‚ùå Error clearing image prompt history:', error);
        }
    }
};

console.log('‚úÖ Image Prompt Storage System loaded');

// Debug function to check localStorage
window.checkPromptStorage = function() {
    console.log('=== Checking Prompt Storage ===');
    console.log('Current userId:', userId);
    console.log('Current mode:', currentMode);
    
    const generalKey = `veo_general_history_${userId}`;
    const multicharKey = `veo_multichar_history_${userId}`;
    
    console.log('\nGeneral Storage:');
    const generalData = localStorage.getItem(generalKey);
    if (generalData) {
        const parsed = JSON.parse(generalData);
        console.log(`- Key: ${generalKey}`);
        console.log(`- Messages: ${parsed.messages.length}`);
        console.log(`- Last updated: ${parsed.lastUpdated}`);
    } else {
        console.log('- No data found');
    }
    
    console.log('\nMultichar Storage:');
    const multicharData = localStorage.getItem(multicharKey);
    if (multicharData) {
        const parsed = JSON.parse(multicharData);
        console.log(`- Key: ${multicharKey}`);
        console.log(`- Messages: ${parsed.messages.length}`);
        console.log(`- Last updated: ${parsed.lastUpdated}`);
    } else {
        console.log('- No data found');
    }
    
    console.log('\nAll localStorage keys:');
    Object.keys(localStorage).forEach(key => {
        if (key.includes('veo_')) {
            console.log(`- ${key}`);
        }
    });
};

// Function to clear current mode history
window.clearCurrentModeHistory = function() {
    if (currentMode === 'promptmaster' || currentMode === 'multichar' || currentMode === 'image') {
        const modeName = currentMode === 'promptmaster' ? 'Prompt Master' : 
                        currentMode === 'multichar' ? 'Prompt Master' :
                        'Image Prompt';
        if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ${modeName} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£`)) {
            PromptStorage.clear(currentMode);
            chatHistory[currentMode] = '';
            clearChat();
            addWelcomeMessage(currentMode);
            showNotification('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
};

// ========== FIX FAB BUTTONS ==========
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° FAB ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function showAllFABButtons() {
    const fabAnnouncement = document.querySelector('.fab-announcement');
    const fabCourse = document.querySelector('.fab-course');
    const fabTools = document.querySelector('.fab-tools');
    const fabToolsMenu = document.getElementById('fabToolsMenu');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
    if (fabAnnouncement) {
        fabAnnouncement.style.display = 'flex';
        fabAnnouncement.style.visibility = 'visible';
        fabAnnouncement.style.opacity = '1';
        fabAnnouncement.style.position = 'fixed';
        fabAnnouncement.style.bottom = '20px';
        fabAnnouncement.style.right = '20px';
        fabAnnouncement.style.zIndex = '999';
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    if (fabCourse) {
        fabCourse.style.display = 'flex';
        fabCourse.style.visibility = 'visible';
        fabCourse.style.opacity = '1';
        fabCourse.style.position = 'fixed';
        fabCourse.style.bottom = '90px';
        fabCourse.style.right = '20px';
        fabCourse.style.zIndex = '999';
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Tools
    if (fabTools) {
        fabTools.style.display = 'flex';
        fabTools.style.visibility = 'visible';
        fabTools.style.opacity = '1';
        fabTools.style.position = 'fixed';
        fabTools.style.bottom = '160px';
        fabTools.style.right = '20px';
        fabTools.style.zIndex = '999';
    }
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏ô‡∏π tools ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    if (fabToolsMenu) {
        fabToolsMenu.style.display = 'none';
    }
}

// Export function
window.showAllFABButtons = showAllFABButtons;
// ========== END FIX FAB BUTTONS ==========
window.syncChatModelSelection = syncChatModelSelection;

// ========== MUSIC VIDEO TEMPLATE SYSTEM ==========

// ‡πÄ‡∏û‡∏¥‡πà‡∏° template ‡πÉ‡∏ô promptTemplates
const musicVideoTemplates = {
    isaanTrap: {
        emoji: "üé§",
        title: "Isaan Trap Music Video", 
        category: "musicvideo",
        defaultValues: {
            singer: `A man in his late 50s from Isaan, Thailand. He has a warm, kind, and heavily wrinkled face from years of working in the sun, with tan to dark skin and high cheekbones. His face and arms are smudged with a bit of dried mud and dust. His most defining feature is a chipped or broken upper front tooth (the right incisor), visible when he smiles.

Outfit: A heavily worn, faded indigo-blue mor hom cotton farmer's shirt, unbuttoned at the top with rolled-up sleeves. Three-quarter length dark brown wrap-around fisherman pants (kang-keng le). A worn woven cloth shoulder bag (yaam) across his chest and a simple fishing net over one shoulder.`,
            
            lyrics: "Yo! Woke up at dawn, sun on my face! King of this field, ain't no other place. Sticky rice power, that's the morning grace. Me and my dog, we runnin' this space!",
            
            musicStyle: "LOUD, energetic Isaan Trap music with prominent Phin (lute) melody and heavy hip-hop beat",
            
            background: "A vast, green rice paddy field in Isaan, Thailand during early morning. Soft, diffused sunrise light with gentle mist. The sun is low and partially hidden by morning haze, creating a subtle warm glow. Water-filled paddies reflect the soft sky. A few water buffalo visible in the distance",
            
            tone: "Vibrant, warm, golden hour tones. High contrast. Ultra realistic, cinematic music video with gritty, authentic feel"
        }
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Music Video Form
function showMusicVideoForm() {
    const template = musicVideoTemplates.isaanTrap;
    
    const modal = document.createElement('div');
    modal.className = 'music-template-modal';
    modal.innerHTML = `
        <div class="music-template-content">
            <button class="close-btn" onclick="closeMusicVideoForm()">‚úï</button>
            
            <h2>üéµ ‡∏™‡∏£‡πâ‡∏≤‡∏á Music Video Prompt</h2>
            <p class="template-subtitle">‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MV ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û - ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ</p>
            
            <div class="template-form">
                <div class="form-group">
                    <label>üé§ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ô‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏á/‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:</label>
                    <textarea id="mvSinger" rows="4" placeholder="‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤ ‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô...">${template.defaultValues.singer}</textarea>
                    <small>üí° ‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ‡∏ú‡∏¥‡∏ß ‡∏ó‡∏£‡∏á‡∏ú‡∏° ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö</small>
                </div>
                
                <div class="form-group">
                    <label>üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ):</label>
                    <textarea id="mvLyrics" rows="3" placeholder="Yo! Check it out...">${template.defaultValues.lyrics}</textarea>
                    <small>üí° ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß bot ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ</small>
                </div>
                
                <div class="form-group">
                    <label>üéµ ‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á/‡∏î‡∏ô‡∏ï‡∏£‡∏µ:</label>
                    <input type="text" id="mvMusicStyle" value="${template.defaultValues.musicStyle}">
                    <small>üí° ‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏´‡∏•‡∏±‡∏Å ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞</small>
                </div>
                
                <div class="form-group">
                    <label>üåÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®:</label>
                    <textarea id="mvBackground" rows="3" placeholder="‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏™‡∏á ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®...">${template.defaultValues.background}</textarea>
                    <small>üí° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∏‡πà‡∏á‡∏ô‡∏≤ ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ ‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å ‡πÅ‡∏™‡∏á‡∏ó‡∏≠‡∏á</small>
                </div>
                
                <div class="form-group">
                    <label>üé® ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ/‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û:</label>
                    <input type="text" id="mvTone" value="${template.defaultValues.tone}">
                    <small>üí° ‡πÄ‡∏ä‡πà‡∏ô warm tone, high contrast, cinematic</small>
                </div>
                
                <div class="advanced-options">
                    <button class="toggle-advanced" onclick="toggleAdvancedOptions()">
                        ‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‚ñº
                    </button>
                    
                    <div class="advanced-fields" style="display: none;">
                        <div class="form-group">
                            <label>üìπ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß:</label>
                            <input type="text" id="mvCamera" value="Low-angle, slow-motion dolly shot following the performer">
                        </div>
                        
                        <div class="form-group">
                            <label>üêï ‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö/Props:</label>
                            <input type="text" id="mvProps" value="A loyal brown dog trotting alongside">
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button class="generate-btn" onclick="generateMusicVideoPrompt()">
                        ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Music Video Prompt
                    </button>
                    <button class="cancel-btn" onclick="closeMusicVideoForm()">
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </button>
                </div>
                
                <div class="template-tips">
                    <h4>üí° Tips for Best Results:</h4>
                    <ul>
                        <li>‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 8 ‡∏ß‡∏¥</li>
                        <li>‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏â‡∏≤‡∏Å</li>
                        <li>‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô</li>
                        <li>‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default</li>
                        <li>‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠!!</li>
                    </ul>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt (‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
function generateMusicVideoPrompt() {
    const template = musicVideoTemplates.isaanTrap;
    
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å form
    const singer = document.getElementById('mvSinger').value.trim() || template.defaultValues.singer;
    const lyrics = document.getElementById('mvLyrics').value.trim() || template.defaultValues.lyrics;
    const musicStyle = document.getElementById('mvMusicStyle').value.trim() || template.defaultValues.musicStyle;
    const background = document.getElementById('mvBackground').value.trim() || template.defaultValues.background;
    const tone = document.getElementById('mvTone').value.trim() || template.defaultValues.tone;
    
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ advanced options
    const advancedFields = document.querySelector('.advanced-fields');
    let camera = "Low-angle, slow-motion dolly shot that follows the performer";
    let props = "";
    
    if (advancedFields && advancedFields.style.display !== 'none') {
        camera = document.getElementById('mvCamera').value.trim() || camera;
        props = document.getElementById('mvProps').value.trim();
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
    const aiPrompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á Music Video Prompt ‡πÅ‡∏ö‡∏ö Professional ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ:

üé§ ‡∏ô‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏á/‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${singer}
üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á: ${lyrics}
üéµ ‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏•‡∏á: ${musicStyle}
üåÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®: ${background}
üé® ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ/‡∏™‡πÑ‡∏ï‡∏•‡πå: ${tone}
${camera !== "Low-angle, slow-motion dolly shot that follows the performer" ? `üìπ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${camera}` : ''}
${props ? `üé≠ Props/‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö: ${props}` : ''}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Professional Music Video:
[Settings / Atmosphere]
[Characters + Appearance + Emotion] 
[Action / Pose]
[Dialogue ‚Äì with Lipsync]
[Audio & Effects]
[Visual Style]

‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏ô [Dialogue] ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏ß‡πâ ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏õ‡∏•!
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ "Lipsync to lyrics:"
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
- ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö Music Video  
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ cinematic ‡πÅ‡∏•‡∏∞ professional
- Audio ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ambient sounds ‡πÄ‡∏ö‡∏≤‡∏°‡∏≤‡∏Å`;
    
    // ‡πÉ‡∏™‡πà prompt ‡πÉ‡∏ô textarea
    document.getElementById('messageInput').value = aiPrompt;
    
    // Auto resize textarea
    const textarea = document.getElementById('messageInput');
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 400) + 'px';
    
    // ‡∏õ‡∏¥‡∏î modal
    closeMusicVideoForm();
    if (document.getElementById('templatesModal').style.display === 'flex') {
        closeTemplates();
    }
    
    // Scroll to input
    textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ user ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡∏™‡πà‡∏á
    showNotification('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', 'success');
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const sendButton = document.getElementById('sendButton');
    const originalText = sendButton.innerHTML;
    sendButton.innerHTML = 'üéµ ‡∏™‡∏£‡πâ‡∏≤‡∏á MV Prompt';
    
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
        sendButton.innerHTML = originalText;
    }, 5000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î Modal
function closeMusicVideoForm() {
    const modal = document.querySelector('.music-template-modal');
    if (modal) modal.remove();
}

// Toggle Advanced Options
function toggleAdvancedOptions() {
    const advancedFields = document.querySelector('.advanced-fields');
    const toggleBtn = document.querySelector('.toggle-advanced');
    
    if (advancedFields.style.display === 'none') {
        advancedFields.style.display = 'block';
        toggleBtn.innerHTML = '‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‚ñ≤';
    } else {
        advancedFields.style.display = 'none';
        toggleBtn.innerHTML = '‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‚ñº';
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Quick Actions Bar
function addMusicVideoButton() {
    // ‡∏´‡∏≤ Quick Actions Bar
    const quickActionsBar = document.querySelector('.quick-actions-bar');
    if (quickActionsBar && !document.getElementById('musicVideoBtn')) {
        const musicBtn = document.createElement('button');
        musicBtn.id = 'musicVideoBtn';
        musicBtn.className = 'action-btn';
        musicBtn.onclick = showMusicVideoForm;
        musicBtn.innerHTML = `
            <span class="action-icon">üéµ</span>
            <span class="action-text">Music Video</span>
        `;
        quickActionsBar.appendChild(musicBtn);
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô initialization
document.addEventListener('DOMContentLoaded', () => {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Music Video
    setTimeout(addMusicVideoButton, 1000);
});

// Export functions
window.showMusicVideoForm = showMusicVideoForm;
window.closeMusicVideoForm = closeMusicVideoForm;
window.generateMusicVideoPrompt = generateMusicVideoPrompt;
window.toggleAdvancedOptions = toggleAdvancedOptions;

// ========== TEMPLATE FORM SYSTEM ==========
let templateCharCount = 2;

// Show/Hide Template Button based on mode
function updateTemplateButton() {
    const templateSection = document.getElementById('templateButtonSection');
    
    if (currentMode === 'promptmaster' || currentMode === 'multichar' || currentMode === 'chat') {
        templateSection.style.display = 'block';
    } else {
        templateSection.style.display = 'none';
    }
}

// Show Template Form
function showTemplateForm() {
    const modal = document.getElementById('templateFormModal');
    const title = document.getElementById('templateFormTitle');
    
    modal.style.display = 'flex';
    
    if (currentMode === 'promptmaster') {
        title.innerHTML = 'üìã Prompt Master Template';
    } else if (currentMode === 'multichar') {
        title.innerHTML = 'üé≠ Prompt Master Template';
    }
    
    // Reset character count to 2
    templateCharCount = 2;
    setTemplateCharCount(2);
    
    // Clear all fields
    document.querySelectorAll('.template-input, .template-textarea, .template-select').forEach(field => {
        field.value = '';
    });
    
    // Stop any ongoing voice recognition
    if (typeof stopFieldVoice === 'function') {
        stopFieldVoice();
    }
}

// Close Template Form
function closeTemplateForm() {
    const modal = document.getElementById('templateFormModal');
    modal.style.display = 'none';
    stopFieldVoice(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    
    // Reset form
    document.querySelectorAll('.template-select, .template-input, .template-textarea').forEach(el => {
        el.value = '';
    });
}

// Close template form when clicking outside
function closeTemplateFormOnOutsideClick(event) {
    if (event.target.classList.contains('template-form-modal')) {
        closeTemplateForm();
    }
}

// Set character count in template
function setTemplateCharCount(count, buttonElement) {
    console.log('setTemplateCharCount called with count:', count);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    templateFormData.characterCount = count;
    window.templateCharCount = count; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ó‡∏µ‡πà
    
    // Update UI
    document.querySelectorAll('.char-count-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    if (buttonElement) {
        buttonElement.classList.add('active');
    }
    
    // Update character inputs
    const container = document.getElementById('characterDescriptions');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (count === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡∏ô‡∏µ‡πâ</p>';
    } else {
        for (let i = 1; i <= count; i++) {
            const charDiv = document.createElement('div');
            charDiv.className = 'form-group char-field';
            charDiv.innerHTML = `
                <label>
                    üë§ ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà ${i}
                    <button type="button" class="mic-btn" onclick="toggleFieldVoice('char${i}')" data-field="char${i}">
                        üé§
                    </button>
                    <button type="button" class="my-char-btn" onclick="openCharacterPicker('char${i}')" title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å My Characters">
                        üìö My Character
                    </button>
                </label>
                <input type="text" id="char${i}" class="template-input" 
                       placeholder="‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏û‡∏® ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß"
                       oninput="updateTemplatePreview(); saveCharacterData(${i}, this.value);">
            `;
            container.appendChild(charDiv);
        }
    }
    
    updateTemplatePreview();
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
function saveCharacterData(index, value) {
    templateFormData.characters[`char${index}`] = value;
}

// Generate prompt from template
function generateFromTemplate() {
    let prompt = '';
    
    if (currentMode === 'promptmaster') {
        // Prompt Master Template
        const videoType = document.getElementById('videoType').value;
        const cameraAngle = document.getElementById('cameraAngle').value;
        const timeOfDay = document.getElementById('timeOfDay').value;
        const visualStyle = document.getElementById('visualStyle').value;
        const duration = document.getElementById('duration').value;
        const details = document.getElementById('additionalDetails').value;
        
        // Build prompt
        prompt = '‡∏™‡∏£‡πâ‡∏≤‡∏á Cinematic Veo Prompt ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:\n\n';
        
        if (videoType) prompt += `üé¨ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getVideoTypeText(videoType)}\n`;
        if (cameraAngle) prompt += `üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${getCameraAngleText(cameraAngle)}\n`;
        if (timeOfDay) prompt += `üåÖ ‡πÅ‡∏™‡∏á/‡πÄ‡∏ß‡∏•‡∏≤: ${getTimeOfDayText(timeOfDay)}\n`;
        if (visualStyle) prompt += `üé® ‡∏™‡πÑ‡∏ï‡∏•‡πå: ${getVisualStyleText(visualStyle)}\n`;
        if (duration) prompt += `‚è±Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${duration}\n`;
        // ========== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ ==========
// Characters - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Scene Builder
const charCount = window.templateCharCount || 0;
if (charCount > 0) {
    prompt += `\nüë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${charCount} ‡∏Ñ‡∏ô\n`;
    prompt += '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n';
    
    for (let i = 1; i <= charCount; i++) {
        const charInput = document.getElementById(`char${i}`);
        if (charInput && charInput.value) {
            prompt += `${i}. ${charInput.value}\n`;
        } else {
            prompt += `${i}. (‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏â‡∏≤‡∏Å)\n`;
        }
    }
}
// ========== ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ==========
        if (details) prompt += `\nüìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${details}\n`;
        
        prompt += '\n‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î cinematography, ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á, ‡πÅ‡∏™‡∏á, ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏û‡∏∏‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©';
        
    } else if (currentMode === 'multichar') {
        // Prompt Master Template
        const videoType = document.getElementById('videoType').value;
        const sceneType = document.getElementById('sceneType').value;
        const location = document.getElementById('location').value;
        const timeOfDay = document.getElementById('timeOfDay').value;
        const visualStyle = document.getElementById('visualStyle').value;
        const mood = document.getElementById('mood').value;
        const soundType = document.getElementById('soundType').value;
        const duration = document.getElementById('duration').value;
        const dialogue = document.getElementById('dialogueText').value;
        const additionalDetails = document.getElementById('additionalDetails').value;
        
        prompt = '‡∏™‡∏£‡πâ‡∏≤‡∏á Multi-Character Scene ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å:\n\n';
        
        if (videoType) prompt += `üé¨ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${videoType}\n`;
        if (sceneType) prompt += `üé≠ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏â‡∏≤‡∏Å: ${sceneType}\n`;
        if (location) prompt += `üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${location}\n`;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        console.log('=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà) ===');
        let hasCameraAngles = false;
        let hasCameraMovements = false;
        let cameraAngleText = '';
        let cameraMovementText = '';
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á 3 ‡∏°‡∏∏‡∏°
        for (let i = 1; i <= 3; i++) {
            const angleElem = document.getElementById(`cameraAngle${i}`);
            const movementElem = document.getElementById(`cameraMovement${i}`);
            
            console.log(`‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${i}:`, {
                angle: angleElem?.value || '‡πÑ‡∏°‡πà‡∏°‡∏µ',
                movement: movementElem?.value || '‡πÑ‡∏°‡πà‡∏°‡∏µ'
            });
            
            if (angleElem && angleElem.value) {
                if (!hasCameraAngles) {
                    cameraAngleText = 'üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
                    hasCameraAngles = true;
                }
                cameraAngleText += `  ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${i}: ${getCameraAngleText(angleElem.value)}\n`;
            }
            
            if (movementElem && movementElem.value) {
                if (!hasCameraMovements) {
                    cameraMovementText = 'üé¨ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
                    hasCameraMovements = true;
                }
                cameraMovementText += `  ‡∏ä‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà ${i}: ${getCameraMovementText(movementElem.value)}\n`;
            }
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô prompt
        if (hasCameraAngles) {
            prompt += cameraAngleText;
        }
        if (hasCameraMovements) {
            prompt += cameraMovementText;
        }
        
        console.log('‡∏û‡∏ö‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:', hasCameraAngles);
        console.log('‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:', hasCameraMovements);
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á (comment out)
        /*
        const cameraAngleItems = document.querySelectorAll('.camera-angle-item');
        console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô camera angle items:', cameraAngleItems.length);
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
        if (cameraAngleItems.length === 0) {
            console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö .camera-angle-item, ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...');
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
            console.log('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:', {
                angle1: document.getElementById('cameraAngle1')?.value,
                angle2: document.getElementById('cameraAngle2')?.value,
                angle3: document.getElementById('cameraAngle3')?.value,
                movement1: document.getElementById('cameraMovement1')?.value,
                movement2: document.getElementById('cameraMovement2')?.value,
                movement3: document.getElementById('cameraMovement3')?.value
            });
            
            // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            const angle1 = document.getElementById('cameraAngle1');
            const movement1 = document.getElementById('cameraMovement1');
            
            if (angle1 && angle1.value) {
                prompt += `üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n  ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà 1: ${getCameraAngleText(angle1.value)}\n`;
            }
            if (movement1 && movement1.value) {
                prompt += `üé¨ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n  ‡∏ä‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà 1: ${getCameraMovementText(movement1.value)}\n`;
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà 2 ‡πÅ‡∏•‡∏∞ 3
            for (let i = 2; i <= 3; i++) {
                const angleElem = document.getElementById(`cameraAngle${i}`);
                const movementElem = document.getElementById(`cameraMovement${i}`);
                
                if (angleElem && angleElem.value) {
                    if (!prompt.includes('üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:')) {
                        prompt += 'üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
                    }
                    prompt += `  ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${i}: ${getCameraAngleText(angleElem.value)}\n`;
                }
                
                if (movementElem && movementElem.value) {
                    if (!prompt.includes('üé¨ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:')) {
                        prompt += 'üé¨ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
                    }
                    prompt += `  ‡∏ä‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà ${i}: ${getCameraMovementText(movementElem.value)}\n`;
                }
            }
        }
        */
        
        /* ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà comment out
        if (cameraAngleItems.length > 0) {
            let hasAngles = false;
            let hasMovements = false;
            let anglePrompt = 'üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
            let movementPrompt = 'üé¨ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
            
            cameraAngleItems.forEach((item, index) => {
                const angleSelect = item.querySelector('[id^="cameraAngle"]');
                const movementSelect = item.querySelector('[id^="cameraMovement"]');
                
                console.log(`‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${index + 1}:`, {
                    angleSelect: angleSelect ? angleSelect.id : '‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠',
                    angleValue: angleSelect ? angleSelect.value : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤',
                    movementSelect: movementSelect ? movementSelect.id : '‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠',
                    movementValue: movementSelect ? movementSelect.value : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤'
                });
                
                if (angleSelect && angleSelect.value) {
                    hasAngles = true;
                    anglePrompt += `  ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${index + 1}: ${getCameraAngleText(angleSelect.value)}\n`;
                }
                
                if (movementSelect && movementSelect.value) {
                    hasMovements = true;
                    movementPrompt += `  ‡∏ä‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà ${index + 1}: ${getCameraMovementText(movementSelect.value)}\n`;
                }
            });
            
            console.log('‡∏°‡∏µ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:', hasAngles);
            console.log('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:', hasMovements);
            
            if (hasAngles) {
                prompt += anglePrompt;
            }
            if (hasMovements) {
                prompt += movementPrompt;
            }
        }
        */
        
        if (timeOfDay) prompt += `üåÖ ‡πÅ‡∏™‡∏á/‡πÄ‡∏ß‡∏•‡∏≤: ${timeOfDay}\n`;
        if (visualStyle) prompt += `üé® ‡∏™‡πÑ‡∏ï‡∏•‡πå: ${visualStyle}\n`;
        if (mood) prompt += `üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ${mood}\n`;
        if (soundType) prompt += `üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${soundType}\n`;
        if (duration) prompt += `‚è±Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${duration}\n`;
        
        prompt += `\nüë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${templateCharCount} ‡∏Ñ‡∏ô\n`;

        // Debug - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
console.log('=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ===');
console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:', templateCharCount);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
for (let i = 1; i <= templateCharCount; i++) {
    const charInput = document.getElementById(`char${i}`);
    if (charInput) {
        console.log(`‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà ${i} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:`, charInput.value ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ');
        if (charInput.value) {
            console.log(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${charInput.value.substring(0, 50)}...`);
        }
    } else {
        console.log(`‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà ${i}: ‡πÑ‡∏°‡πà‡∏û‡∏ö element`);
    }
}
        
        // Characters
        prompt += '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n';
        // DEBUG - ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏î‡∏π
console.log('=== DEBUG Character Values ===');
for (let i = 1; i <= templateCharCount; i++) {
    const charInput = document.getElementById(`char${i}`);
    console.log(`Character ${i}:`, {
        element: charInput ? 'Found' : 'Not Found',
        hasValue: charInput?.value ? 'Yes' : 'No',
        value: charInput?.value?.substring(0, 100) || 'Empty'
    });
}
console.log('===========================');
        for (let i = 1; i <= templateCharCount; i++) {
            const charInput = document.getElementById(`char${i}`);
            if (charInput && charInput.value) {
                prompt += `${i}. ${charInput.value}\n`;
            } else {
                prompt += `${i}. (‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏â‡∏≤‡∏Å)\n`;
            }
        }
        
        // Effects
        const effects = [];
        document.querySelectorAll('.effects-checkboxes input:checked').forEach(cb => {
            const label = cb.nextElementSibling;
            if (label) {
                effects.push(label.textContent.trim());
            }
        });
        if (effects.length > 0) {
            prompt += `\n‚ú® Effects: ${effects.join(', ')}\n`;
        }
        
        if (dialogue) prompt += `\nüí¨ ‡∏ö‡∏ó‡∏û‡∏π‡∏î:\n${dialogue}\n`;
        
        if (additionalDetails) prompt += `\nüìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${additionalDetails}\n`;
        
        prompt += '\n‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ setting ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô, timing ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥, camera angles, audio layers ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏û‡∏∏‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©';
    }
    
    // Insert prompt and close modal
    document.getElementById('messageInput').value = prompt;
    
    console.log('=== Final Prompt Generated ===');
    console.log(prompt);
    console.log('=== End of Prompt ===');
    
    closeTemplateForm();
    
    // Auto resize textarea
    const textarea = document.getElementById('messageInput');
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
    
    // Scroll to input
    textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
    
    showNotification('üìã Template applied! ‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', 'success');
}

// Helper functions to get Thai text
function getVideoTypeText(type) {
    const types = {
        'cinematic': '‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á',
        'documentary': '‡∏™‡∏≤‡∏£‡∏Ñ‡∏î‡∏µ ‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á',
        'commercial': '‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤ ‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à',
        'musicvideo': '‡∏°‡∏¥‡∏ß‡∏™‡∏¥‡∏Ñ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠',
        'action': '‡πÅ‡∏≠‡πá‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡∏°‡∏±‡∏ô‡∏™‡πå‡πÜ',
        'drama': '‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤ ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå',
        'horror': '‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç ‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß',
        'comedy': '‡∏ï‡∏•‡∏Å‡∏Ç‡∏≥‡∏Ç‡∏±‡∏ô',
        'travel': '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß',
        'nature': '‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥'
    };
    return types[type] || type;
}

function getCameraAngleText(angle) {
    const angles = {
        'wide': 'Wide Shot - ‡πÄ‡∏´‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°',
        'medium': 'Medium Shot - ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á',
        'closeup': 'Close-up - ‡πÉ‡∏Å‡∏•‡πâ',
        'extreme-closeup': 'Extreme Close-up - ‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å',
        'aerial': 'Aerial/Drone - ‡∏°‡∏∏‡∏°‡∏™‡∏π‡∏á',
        'low-angle': 'Low Angle - ‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≥',
        'dutch': 'Dutch Angle - ‡∏°‡∏∏‡∏°‡πÄ‡∏≠‡∏µ‡∏¢‡∏á',
        'pov': 'POV - ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà 1',
        'tracking': 'Tracking Shot - ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°',
        'handheld': 'Handheld - ‡∏ñ‡∏∑‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á'
    };
    return angles[angle] || angle;
}

function getTimeOfDayText(time) {
    const times = {
        'golden-hour': 'Golden Hour - ‡πÅ‡∏™‡∏á‡∏ó‡∏≠‡∏á',
        'blue-hour': 'Blue Hour - ‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
        'sunrise': '‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô',
        'sunset': '‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ï‡∏Å',
        'midday': '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏™‡∏á‡∏à‡πâ‡∏≤',
        'night': '‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô',
        'overcast': '‡∏°‡∏∑‡∏î‡∏Ñ‡∏£‡∏∂‡πâ‡∏°',
        'studio': '‡πÅ‡∏™‡∏á‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠'
    };
    return times[time] || time;
}

function getVisualStyleText(style) {
    const styles = {
        'realistic': '‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á',
        'cinematic': '‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå',
        'vintage': '‡∏¢‡πâ‡∏≠‡∏ô‡∏¢‡∏∏‡∏Ñ',
        'modern': '‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô',
        'noir': 'Film Noir ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥',
        'vibrant': '‡∏™‡∏µ‡∏™‡∏î‡πÉ‡∏™',
        'desaturated': '‡∏™‡∏µ‡∏à‡∏∑‡∏î',
        'warm': '‡πÇ‡∏ó‡∏ô‡∏≠‡∏∏‡πà‡∏ô',
        'cold': '‡πÇ‡∏ó‡∏ô‡πÄ‡∏¢‡πá‡∏ô'
    };
    return styles[style] || style;
}

function getSceneTypeText(type) {
    const types = {
        'dialogue': '‡∏â‡∏≤‡∏Å‡∏™‡∏ô‡∏ó‡∏ô‡∏≤',
        'action': '‡∏â‡∏≤‡∏Å‡πÅ‡∏≠‡πá‡∏Ñ‡∏ä‡∏±‡πà‡∏ô',
        'emotional': '‡∏â‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå',
        'meeting': '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°/‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå',
        'party': '‡∏á‡∏≤‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ',
        'dining': '‡∏â‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
    };
    return types[type] || type;
}

function getCameraMovementText(movement) {
    const movements = {
        'static': '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á',
        'pan': 'Pan - ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤',
        'tilt': 'Tilt - ‡∏´‡∏°‡∏∏‡∏ô‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á',
        'dolly': 'Dolly - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å',
        'tracking': 'Tracking - ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°',
        'handheld': 'Handheld - ‡∏ñ‡∏∑‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á',
        'steadicam': 'Steadicam - ‡∏ô‡∏¥‡πà‡∏°‡∏ô‡∏ß‡∏•',
        'drone': '‡πÇ‡∏î‡∏£‡∏ô',
        '360': '‡∏°‡∏∏‡∏° 360 ‡∏≠‡∏á‡∏®‡∏≤',
        'crane': '‡πÄ‡∏Ñ‡∏£‡∏ô/‡∏ö‡∏π‡∏°',
        'whip-pan': '‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å',
        'zoom': '‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å',
        'rack-focus': '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ü‡∏Å‡∏±‡∏™',
        'gimbal': '‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•',
        'slider': '‡∏™‡πÑ‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå',
        'orbit': '‡πÇ‡∏Ñ‡∏à‡∏£‡∏£‡∏≠‡∏ö',
        'reveal': '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢',
        'push-in': '‡∏î‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤',
        'pull-out': '‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å'
    };
    return movements[movement] || movement;
}

function getMoodText(mood) {
    const moods = {
        'happy': '‡∏™‡∏î‡πÉ‡∏™ ‡∏£‡πà‡∏≤‡πÄ‡∏£‡∏¥‡∏á',
        'sad': '‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏•‡∏á',
        'serious': '‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î',
        'romantic': '‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô',
        'mysterious': '‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö ‡∏ô‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
        'energetic': '‡∏Å‡∏£‡∏∞‡∏â‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏â‡∏á ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á',
        'calm': '‡∏™‡∏á‡∏ö ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢',
        'tense': '‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡∏Å‡∏î‡∏î‡∏±‡∏ô',
        'nostalgic': '‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏≠‡∏î‡∏µ‡∏ï ‡∏¢‡πâ‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á'
    };
    return moods[mood] || mood;
}

function getSoundTypeText(soundType) {
    const sounds = {
        'dialogue': '‡∏ö‡∏ó‡∏û‡∏π‡∏î',
        'music': '‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö',
        'ambient': '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®',
        'sfx': '‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
        'silent': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
        'natural': '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥',
        'dramatic-music': '‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤',
        'upbeat-music': '‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô'
    };
    return sounds[soundType] || soundType;
}

// Update switchMode to show/hide template button
const originalSwitchMode3 = window.switchMode;
window.switchMode = function(mode) {
    originalSwitchMode3(mode);
    updateTemplateButton();
};

// Function to update form fields based on character type
function updateCharacterFormFields() {
    const charType = document.getElementById('charType').value;
    const genderLabel = document.getElementById('genderLabel');
    const genderSelect = document.getElementById('charGender');
    const ethnicityGroup = document.getElementById('ethnicityGroup');
    const speciesGroup = document.getElementById('speciesGroup');
    
    // Reset all fields visibility
    ethnicityGroup.style.display = 'block';
    speciesGroup.style.display = 'none';
    
    // Update based on character type
    if (charType === 'animal') {
        // For animals
        genderLabel.textContent = '‡πÄ‡∏û‡∏®:';
        genderSelect.innerHTML = `
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® --</option>
            <option value="Male">‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ</option>
            <option value="Female">‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏µ‡∏¢</option>
            <option value="Unknown">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
        `;
        ethnicityGroup.style.display = 'none';
        speciesGroup.style.display = 'block';
    } else if (charType === 'robot' || charType === 'creature') {
        // For robots and creatures
        genderLabel.textContent = '‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏û‡∏®:';
        genderSelect.innerHTML = `
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ --</option>
            <option value="Masculine">‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢</option>
            <option value="Feminine">‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á</option>
            <option value="Neutral">‡∏Å‡∏•‡∏≤‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏®</option>
        `;
        ethnicityGroup.style.display = 'none';
        speciesGroup.style.display = 'block';
    } else if (charType === 'cartoon') {
        // For cartoons
        genderLabel.textContent = '‡πÄ‡∏û‡∏®:';
        genderSelect.innerHTML = `
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® --</option>
            <option value="Male">‡∏ä‡∏≤‡∏¢</option>
            <option value="Female">‡∏´‡∏ç‡∏¥‡∏á</option>
            <option value="Non-binary">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
        `;
        ethnicityGroup.style.display = 'none';
        speciesGroup.style.display = 'block';
    } else {
        // Default (human)
        genderLabel.textContent = '‡πÄ‡∏û‡∏®:';
        genderSelect.innerHTML = `
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® --</option>
            <option value="Male">‡∏ä‡∏≤‡∏¢</option>
            <option value="Female">‡∏´‡∏ç‡∏¥‡∏á</option>
            <option value="Non-binary">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</option>
        `;
        ethnicityGroup.style.display = 'block';
        speciesGroup.style.display = 'none';
    }
}

// Export functions
window.showTemplateForm = showTemplateForm;
window.closeTemplateForm = closeTemplateForm;
window.setTemplateCharCount = setTemplateCharCount;
window.generateFromTemplate = generateFromTemplate;
window.closeTemplateFormOnOutsideClick = closeTemplateFormOnOutsideClick;
window.toggleFieldVoice = toggleFieldVoice;
window.stopFieldVoice = stopFieldVoice;
window.updateCharacterFormFields = updateCharacterFormFields;

// Show current account token
function showMyToken() {
    const linkedAccount = localStorage.getItem('linkedAccount');
    if (!linkedAccount) {
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ');
        return;
    }
    
    try {
        const account = JSON.parse(linkedAccount);
        const loginToken = btoa(JSON.stringify({
            username: account.username,
            hashedPassword: account.hashedPassword,
            userId: account.userId,
            createdAt: account.createdAt
        }));
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal ‡πÅ‡∏™‡∏î‡∏á token
        const tokenModal = document.createElement('div');
        tokenModal.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #1a1a1a;
            border: 2px solid var(--primary);
            border-radius: 12px;
            padding: 30px;
            z-index: 10001;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 10px 50px rgba(0,0,0,0.5);
        `;
        
        tokenModal.innerHTML = `
            <h3 style="color: var(--primary); margin: 0 0 15px 0;">üîë Login Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
            <p style="color: #888; margin-bottom: 15px;">Username: <strong style="color: white;">${account.username}</strong></p>
            <textarea id="myTokenTextarea" style="
                width: 100%;
                height: 100px;
                padding: 10px;
                background: #2a2a2a;
                border: 1px solid #444;
                border-radius: 8px;
                color: white;
                font-family: monospace;
                font-size: 12px;
                resize: none;
                margin-bottom: 15px;
            " readonly>${loginToken}</textarea>
            <div style="display: flex; gap: 10px;">
                <button onclick="
                    document.getElementById('myTokenTextarea').select();
                    document.execCommand('copy');
                    this.textContent = '‚úÖ Copied!';
                    setTimeout(() => this.textContent = 'üìã Copy Token', 2000);
                " style="
                    flex: 1;
                    padding: 10px;
                    background: var(--primary);
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                    font-family: 'Kanit', sans-serif;
                ">üìã Copy Token</button>
                <button onclick="
                    this.parentElement.parentElement.remove();
                    document.getElementById('myTokenModalOverlay').remove();
                " style="
                    flex: 1;
                    padding: 10px;
                    background: #444;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                    font-family: 'Kanit', sans-serif;
                ">‡∏õ‡∏¥‡∏î</button>
            </div>
            <p style="color: #666; font-size: 12px; margin-top: 15px; margin-bottom: 0;">
                üí° ‡πÉ‡∏ä‡πâ token ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ login ‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ login ‡∏î‡πâ‡∏ß‡∏¢ Username/Password ‡∏Å‡πá‡πÑ‡∏î‡πâ
            </p>
        `;
        
        const overlay = document.createElement('div');
        overlay.id = 'myTokenModalOverlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            z-index: 10000;
        `;
        
        document.body.appendChild(overlay);
        document.body.appendChild(tokenModal);
        
        // Auto select text
        document.getElementById('myTokenTextarea').select();
        
    } catch (error) {
        console.error('Show token error:', error);
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    }
}

window.showMyToken = showMyToken;

// Initialize on load
document.addEventListener('DOMContentLoaded', () => {
    updateTemplateButton();
});

// ========== LOGIN SYSTEM FUNCTIONS ==========

// Show error message in login modal
function showLoginError(message) {
    const errorDiv = document.getElementById('loginErrorMessage');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
}

// Show error message in link account form
function showLinkError(message) {
    const errorDiv = document.getElementById('linkErrorMessage');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        document.getElementById('linkSuccessMessage').style.display = 'none';
    }
}

// Show success message in link account form
function showLinkSuccess(message) {
    const successDiv = document.getElementById('linkSuccessMessage');
    if (successDiv) {
        successDiv.textContent = message;
        successDiv.style.display = 'block';
        document.getElementById('linkErrorMessage').style.display = 'none';
    }
}

// Show login modal
function showLoginModal() {
    const modal = document.getElementById('loginModal');
    const currentUser = ensureUserId(); // ‡πÉ‡∏ä‡πâ ensureUserId() ‡πÅ‡∏ó‡∏ô getUserId()
    
    // Update current user ID display
    document.getElementById('currentUserIdDisplay').textContent = currentUser;
    
    // Check if already logged in
    const linkedAccount = localStorage.getItem('linkedAccount');
    if (linkedAccount) {
        const account = JSON.parse(linkedAccount);
        showLoggedInView(account);
    } else {
        showLoginForm();
    }
    
    modal.style.display = 'flex';
}

// Close login modal
function closeLoginModal() {
    document.getElementById('loginModal').style.display = 'none';
}

// Show login form
function showLoginForm() {
    document.getElementById('loginForm').style.display = 'block';
    document.getElementById('linkAccountForm').style.display = 'none';
    document.getElementById('loggedInView').style.display = 'none';
    // Clear error messages
    const errorDiv = document.getElementById('loginErrorMessage');
    if (errorDiv) {
        errorDiv.style.display = 'none';
        errorDiv.textContent = '';
    }
}

// Show link account form
function showLinkAccountForm() {
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('linkAccountForm').style.display = 'block';
    document.getElementById('loggedInView').style.display = 'none';
    
    // Clear error/success messages
    const errorDiv = document.getElementById('linkErrorMessage');
    const successDiv = document.getElementById('linkSuccessMessage');
    if (errorDiv) {
        errorDiv.style.display = 'none';
        errorDiv.textContent = '';
    }
    if (successDiv) {
        successDiv.style.display = 'none';
        successDiv.textContent = '';
    }
    
    // Pre-fill current user ID
    const currentUser = ensureUserId();
    document.getElementById('currentUserIdDisplay').textContent = currentUser;
    document.getElementById('linkUserId').value = currentUser;
}

// Show logged in view
function showLoggedInView(account) {
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('linkAccountForm').style.display = 'none';
    document.getElementById('loggedInView').style.display = 'block';
    
    document.getElementById('loggedInUsername').textContent = account.username;
    document.getElementById('loggedInUserId').textContent = account.userId;
    
    // Get credits from localStorage
    const credits = parseFloat(localStorage.getItem('totalCredits') || '0');
    document.getElementById('loggedInCredits').textContent = credits.toFixed(2);
}

// Simple hash function (for demo - should use proper hashing in production)
async function simpleHash(text) {
    const encoder = new TextEncoder();
    const data = encoder.encode(text);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    return hashHex;
}

// Link account
async function linkAccount() {
    const userId = document.getElementById('linkUserId').value.trim();
    const username = document.getElementById('newUsername').value.trim().toLowerCase();
    const password = document.getElementById('newPassword').value;
    
    // Validation
    if (!userId || userId.length < 5) {
        showLinkError('‚ùå User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        return;
    }
    
    if (!username || username.length < 3) {
        showLinkError('‚ùå Username ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
        return;
    }
    
    if (!/^[a-z0-9_]+$/.test(username)) {
        showLinkError('‚ùå Username ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ a-z, 0-9, _ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return;
    }
    
    if (!password || password.length < 6) {
        showLinkError('‚ùå Password ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß');
        return;
    }
    
    try {
        showLinkSuccess('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ...');
        
        // Hash password
        const hashedPassword = await simpleHash(password);
        
        // First check in localStorage for existing accounts
        const existingAccounts = JSON.parse(localStorage.getItem('localAccounts') || '{}');
        if (existingAccounts[username]) {
            showLinkError('‚ùå Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
            return;
        }
        
        // For now, only check local storage
        // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° backend API ‡πÑ‡∏î‡πâ
        
        // Save to localStorage first
        const account = {
            username: username,
            userId: userId,
            hashedPassword: hashedPassword,
            createdAt: new Date().toISOString()
        };
        
        // Save account mapping locally
        existingAccounts[username] = {
            userId: userId,
            createdAt: account.createdAt
        };
        localStorage.setItem('localAccounts', JSON.stringify(existingAccounts));
        
        // Save user data locally
        const currentCredits = parseFloat(localStorage.getItem('totalCredits') || '0');
        const userData = {
            linkedAccount: account,
            credits: currentCredits,
            updatedAt: new Date().toISOString()
        };
        localStorage.setItem(`userData_${userId}`, JSON.stringify(userData));
        
        // Save linked account info
        localStorage.setItem('linkedAccount', JSON.stringify(account));
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á login token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≤‡∏° browser
        const loginToken = btoa(JSON.stringify({
            username: username,
            hashedPassword: hashedPassword,
            userId: userId,
            createdAt: account.createdAt
        }));
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        showLinkSuccess('‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal ‡πÅ‡∏™‡∏î‡∏á token ‡∏ó‡∏µ‡πà copy ‡πÑ‡∏î‡πâ
        setTimeout(() => {
            const tokenModal = document.createElement('div');
            tokenModal.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: #1a1a1a;
                border: 2px solid var(--primary);
                border-radius: 12px;
                padding: 30px;
                z-index: 10001;
                max-width: 500px;
                width: 90%;
                box-shadow: 0 10px 50px rgba(0,0,0,0.5);
            `;
            
            tokenModal.innerHTML = `
                <h3 style="color: var(--primary); margin: 0 0 15px 0;">üîë Login Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                <div style="background: rgba(59, 130, 246, 0.1); border: 1px solid #3b82f6; border-radius: 8px; padding: 12px; margin-bottom: 15px;">
                    <p style="margin: 0 0 8px 0; color: #3b82f6; font-size: 13px; font-weight: bold;">‚ú® Token ‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì:</p>
                    <ul style="margin: 0; padding-left: 20px; color: #aaa; font-size: 12px; line-height: 1.5;">
                        <li>Login ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢ Token ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</li>
                        <li>‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥ Username/Password</li>
                        <li>Sync ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
                    </ul>
                </div>
                <p style="color: #888; margin-bottom: 15px; font-size: 13px;">Copy token ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ login ‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô:</p>
                <textarea id="tokenTextarea" style="
                    width: 100%;
                    height: 100px;
                    padding: 10px;
                    background: #2a2a2a;
                    border: 1px solid #444;
                    border-radius: 8px;
                    color: white;
                    font-family: monospace;
                    font-size: 12px;
                    resize: none;
                    margin-bottom: 15px;
                " readonly>${loginToken}</textarea>
                <div style="display: flex; gap: 10px;">
                    <button onclick="
                        document.getElementById('tokenTextarea').select();
                        document.execCommand('copy');
                        this.textContent = '‚úÖ Copied!';
                        setTimeout(() => this.textContent = 'üìã Copy Token', 2000);
                    " style="
                        flex: 1;
                        padding: 10px;
                        background: var(--primary);
                        color: white;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                        font-family: 'Kanit', sans-serif;
                    ">üìã Copy Token</button>
                    <button onclick="
                        this.parentElement.parentElement.remove();
                        document.getElementById('tokenModalOverlay').remove();
                    " style="
                        flex: 1;
                        padding: 10px;
                        background: #444;
                        color: white;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                        font-family: 'Kanit', sans-serif;
                    ">‡∏õ‡∏¥‡∏î</button>
                </div>
                <p style="color: #666; font-size: 12px; margin-top: 15px; margin-bottom: 0;">
                    üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏ß‡∏≤‡∏á token ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Username ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Login (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà Password)
                </p>
            `;
            
            const overlay = document.createElement('div');
            overlay.id = 'tokenModalOverlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                z-index: 10000;
            `;
            
            document.body.appendChild(overlay);
            document.body.appendChild(tokenModal);
            
            // Auto select text
            document.getElementById('tokenTextarea').select();
            
            showLoggedInView(account);
        }, 1000);
        
    } catch (error) {
        console.error('Link account error:', error);
        showLinkError('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
}

// Login
async function doLogin() {
    let username = document.getElementById('loginUsername').value.trim();
    const password = document.getElementById('loginPassword').value;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (token ‡∏à‡∏∞‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
    const isToken = username.length > 50 && !password;
    
    if (!username) {
        showLoginError('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username ‡∏´‡∏£‡∏∑‡∏≠ Token');
        return;
    }
    
    if (!isToken && !password) {
        showLoginError('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Password');
        return;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà token ‡πÉ‡∏´‡πâ lowercase username
    if (!isToken) {
        username = username.toLowerCase();
    }
    
    try {
        // Clear any previous errors
        const errorDiv = document.getElementById('loginErrorMessage');
        if (errorDiv) {
            errorDiv.style.display = 'none';
        }
        
        // First check localStorage
        const localAccounts = JSON.parse(localStorage.getItem('localAccounts') || '{}');
        let accountData = null;
        
        if (!isToken && localAccounts[username]) {
            accountData = {
                userId: localAccounts[username].userId,
                hashedPassword: null // Will get from userData
            };
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô token login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (isToken) {
            try {
                const tokenData = JSON.parse(atob(username));
                if (tokenData.username && tokenData.hashedPassword && tokenData.userId) {
                    // Import account from token
                    accountData = tokenData;
                    
                    // Save to local storage
                    localAccounts[tokenData.username] = {
                        userId: tokenData.userId,
                        createdAt: tokenData.createdAt
                    };
                    localStorage.setItem('localAccounts', JSON.stringify(localAccounts));
                    
                    const userData = {
                        linkedAccount: tokenData,
                        credits: 0
                    };
                    localStorage.setItem(`userData_${tokenData.userId}`, JSON.stringify(userData));
                    
                    // Auto login with token
                    localStorage.setItem('userId', tokenData.userId);
                    localStorage.setItem('linkedAccount', JSON.stringify(tokenData));
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                    const errorDiv = document.getElementById('loginErrorMessage');
                    if (errorDiv) {
                        errorDiv.textContent = '‚úÖ Login ‡∏î‡πâ‡∏ß‡∏¢ token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...';
                        errorDiv.style.display = 'block';
                        errorDiv.style.background = 'rgba(34, 197, 94, 0.1)';
                        errorDiv.style.border = '1px solid #22c55e';
                        errorDiv.style.color = '#22c55e';
                    }
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                    return;
                }
            } catch (e) {
                showLoginError('‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                return;
            }
        }
        
        if (!accountData) {
            showLoginError('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö username ‡∏ô‡∏µ‡πâ');
            return;
        }
        
        // Get user data - first try localStorage
        let userData = null;
        const userId = accountData.userId;
        const localUserData = localStorage.getItem(`userData_${userId}`);
        
        if (localUserData) {
            userData = JSON.parse(localUserData);
        }
        
        // Verify password
        const hashedPassword = await simpleHash(password);
        let passwordValid = false;
        
        // Check password from multiple sources
        // 1. Check if accountData has hashedPassword (from token login)
        if (accountData.hashedPassword) {
            if (hashedPassword === accountData.hashedPassword) {
                passwordValid = true;
            }
        } 
        // 2. Check from userData linkedAccount
        else if (userData && userData.linkedAccount && userData.linkedAccount.hashedPassword) {
            if (hashedPassword === userData.linkedAccount.hashedPassword) {
                passwordValid = true;
                // Set hashedPassword for consistency
                accountData.hashedPassword = userData.linkedAccount.hashedPassword;
            }
        }
        
        if (!passwordValid) {
            if (!accountData.hashedPassword && (!userData || !userData.linkedAccount)) {
                showLoginError('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            } else {
                showLoginError('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
            return;
        }
        
        // Login successful - save original userId before switching
        const currentUserId = localStorage.getItem('userId');
        if (!localStorage.getItem('originalUserId')) {
            localStorage.setItem('originalUserId', currentUserId);
        }
        
        // Switch to logged in user
        localStorage.setItem('userId', userId);
        
        // Sync credits from cloud
        if (accountData.credits !== undefined) {
            localStorage.setItem('totalCredits', accountData.credits.toString());
        } else if (userData && userData.credits !== undefined) {
            localStorage.setItem('totalCredits', userData.credits.toString());
        }
        
        // Save login info
        const account = {
            username: username,
            userId: userId,
            hashedPassword: hashedPassword
        };
        localStorage.setItem('linkedAccount', JSON.stringify(account));
        
        // Login successful - no need to show success message as we're redirecting
        showLoggedInView(account);
        
        // Refresh page to update UI
        setTimeout(() => {
            location.reload();
        }, 1500);
        
    } catch (error) {
        console.error('Login error:', error);
        showLoginError('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
}

// Logout
function doLogout() {
    // Get current userId before logout
    const currentUserId = localStorage.getItem('userId');
    
    // Get the original userId (before any login) to restore it
    let originalUserId = localStorage.getItem('originalUserId');
    
    // Important: If no originalUserId saved, we cannot properly logout
    // This means user logged in before we implemented originalUserId tracking
    if (!originalUserId) {
        console.warn('No originalUserId found - generating new guest user');
        // Generate new guest user as fallback
        originalUserId = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('originalUserId', originalUserId);
    }
    
    // Clear linked account
    localStorage.removeItem('linkedAccount');
    
    // Restore to original guest userId (NOT generate new one)
    localStorage.setItem('userId', originalUserId);
    userId = originalUserId;
    
    // Log for debugging
    console.log('Logout - Restored to original userId:', originalUserId);
    
    // Check if new day for free credits reset
    const today = new Date().toDateString();
    const lastResetDate = localStorage.getItem(`freeCreditsResetDate_${originalUserId}`);
    
    let usedFreeCredits = parseFloat(localStorage.getItem(`usedFreeCredits_${originalUserId}`) || '0');
    
    // Reset if new day
    if (lastResetDate !== today) {
        usedFreeCredits = 0;
        localStorage.setItem(`usedFreeCredits_${originalUserId}`, '0');
        localStorage.setItem(`freeCreditsResetDate_${originalUserId}`, today);
    }
    
    const remainingFreeCredits = Math.max(0, 5 - usedFreeCredits);
    
    // Set credits to remaining free credits for today
    localStorage.setItem('totalCredits', remainingFreeCredits.toString());
    
    // Clear user-specific purchased credits data
    localStorage.removeItem(`userData_${currentUserId}`);
    
    // Clear character library
    characterLibrary = [];
    
    // Update UI
    updateCreditsDisplay();
    updateUserId();
    
    showNotification('üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'info');
    closeLoginModal();
    
    // Refresh page to reset everything
    setTimeout(() => {
        location.reload();
    }, 1000);
}

// Sync credits to cloud
async function syncCreditsToCloud() {
    const linkedAccount = localStorage.getItem('linkedAccount');
    if (!linkedAccount) return; // Not logged in
    
    try {
        const account = JSON.parse(linkedAccount);
        const currentCredits = parseFloat(localStorage.getItem('totalCredits') || '0');
        
        // Update credits in Firebase
        await fetch(`${window.FIREBASE_DATABASE_URL}/users/${account.userId}/credits.json`, {
            method: 'PUT',
            body: JSON.stringify(currentCredits)
        });
    } catch (error) {
        console.error('Sync credits error:', error);
    }
}

// Update cloud credits function
async function updateCloudCredits(userId, credits) {
    try {
        const response = await fetch(`${window.FIREBASE_DATABASE_URL}/users/${userId}/credits.json`, {
            method: 'PUT',
            body: JSON.stringify(credits)
        });
        
        if (!response.ok) {
            console.error('Failed to update cloud credits');
        } else {
            console.log('Cloud credits updated successfully:', credits);
        }
    } catch (error) {
        console.error('Error updating cloud credits:', error);
    }
}

// Export functions
window.showLoginModal = showLoginModal;
window.closeLoginModal = closeLoginModal;
window.showLoginForm = showLoginForm;
window.showLinkAccountForm = showLinkAccountForm;
window.linkAccount = linkAccount;
window.doLogin = doLogin;
window.doLogout = doLogout;
window.syncCreditsToCloud = syncCreditsToCloud;

// Voice input for individual fields
let fieldRecognition = null;
let currentFieldId = null;

function toggleFieldVoice(fieldId) {
    const micBtn = document.querySelector(`[data-field="${fieldId}"]`);
    
    if (micBtn.classList.contains('listening')) {
        stopFieldVoice();
    } else {
        startFieldVoice(fieldId);
    }
}

function startFieldVoice(fieldId) {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        alert('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î');
        return;
    }
    
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    stopFieldVoice();
    
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    fieldRecognition = new SpeechRecognition();
    fieldRecognition.lang = 'th-TH';
    fieldRecognition.continuous = true;
    fieldRecognition.interimResults = true;
    
    currentFieldId = fieldId;
    const field = document.getElementById(fieldId);
    const micBtn = document.querySelector(`[data-field="${fieldId}"]`);
    
    micBtn.classList.add('listening');
    
    let finalTranscript = field.value || '';
    
    fieldRecognition.onresult = function(event) {
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript + ' ';
            } else {
                interimTranscript += transcript;
            }
        }
        
        field.value = finalTranscript + interimTranscript;
    };
    
    fieldRecognition.onerror = function(event) {
        console.error('Speech recognition error', event.error);
        stopFieldVoice();
    };
    
    fieldRecognition.onend = function() {
        micBtn.classList.remove('listening');
    };
    
    fieldRecognition.start();
}

function stopFieldVoice() {
    if (fieldRecognition) {
        fieldRecognition.stop();
        fieldRecognition = null;
    }
    
    // ‡∏•‡∏ö class listening ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°
    document.querySelectorAll('.mic-btn.listening').forEach(btn => {
        btn.classList.remove('listening');
    });
}

// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î modal
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('template-form-modal')) {
        stopFieldVoice();
    }
});

// ========== CHARACTER TEMPLATE SYSTEM ==========
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå script.js

let characterTemplateData = {};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Character Template
function updateCharacterTemplateButton() {
    const charTemplateSection = document.getElementById('characterTemplateButtonSection');
    
    if (charTemplateSection) {
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î character
        if (currentMode === 'character') {
            charTemplateSection.style.display = 'inline-block';
        } else {
            charTemplateSection.style.display = 'none';
        }
    }
}

// Show Character Template Modal
function showCharacterTemplate() {
    document.getElementById('characterTemplateModal').style.display = 'flex';
    
    // Clear all fields - updated for 14 sections
    const fields = [
        // 1. Name/Role
        'charName', 'charNickname', 'charRole',
        // 2. Gender/Age/Ethnicity  
        'charGender', 'charAge', 'charEthnicity',
        // 3. Body/Skin
        'charBody', 'charHeightWeight', 'charSkin',
        // 4. Face
        'charFaceShape', 'charFaceFeatures',
        // 5. Eyes/Eyebrows
        'charEyes', 'charEyebrows',
        // 6. Lips
        'charLips',
        // 7. Hair
        'charHairStyle', 'charHairColor', 'charHairDetails',
        // 8. Outfit
        'charShirt', 'charBottoms', 'charOuterwear', 'charShoes', 'charFabric',
        // 9. Accessories
        'charHeadAccessories', 'charJewelry', 'charOtherAccessories',
        // 10. Personality
        'charPersonalityTraits', 'charConfidence', 'charCameraPresence',
        // 11. Starting Pose
        'charInitialPose', 'charBodyLanguage',
        // 12. Voice Tone
        'charVoicePitch', 'charSpeakingStyle', 'charAccent', 'charVoiceCharacteristics',
        // 13. Special Features
        'charUniqueTraits', 'charSpecialEffects',
        // 14. Visual Style
        'charRealismType'
    ];
    
    fields.forEach(id => {
        const elem = document.getElementById(id);
        if (elem) elem.value = '';
    });
}

// Close Character Template Modal
function closeCharacterTemplate() {
    const modal = document.getElementById('characterTemplateModal');
    modal.style.display = 'none';
    
    // Reset body overflow
    document.body.style.overflow = '';
    
    // Fix layout issues - force reflow
    setTimeout(() => {
        // Force browser to recalculate layout
        document.body.style.display = 'none';
        document.body.offsetHeight; // Trigger reflow
        document.body.style.display = '';
        
        // Reset chat interface styles
        const chatInterface = document.querySelector('.chat-interface');
        if (chatInterface) {
            chatInterface.style.position = '';
            chatInterface.style.zIndex = '';
            chatInterface.style.height = '';
            chatInterface.style.overflow = '';
        }
        
        // Reset chat messages container
        const chatMessages = document.querySelector('.chat-messages');
        if (chatMessages) {
            chatMessages.style.height = '';
            chatMessages.style.overflow = '';
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }, 100);
}

// Generate Character Profile from Template
function generateFromCharacterTemplate() {
    // Get character type
    const charType = document.getElementById('charType')?.value || 'human';
    const species = document.getElementById('charSpecies')?.value || '';
    
    // Collect all data for 14 sections
    const data = {
        // Character Type
        type: charType,
        species: species,
        // 1. Name/Role
        name: document.getElementById('charName')?.value || '',
        nickname: document.getElementById('charNickname')?.value || '',
        role: document.getElementById('charRole')?.value || '',
        // 2. Gender/Age/Ethnicity
        gender: document.getElementById('charGender')?.value || '',
        age: document.getElementById('charAge')?.value || '',
        ethnicity: document.getElementById('charEthnicity')?.value || '',
        // 3. Body/Skin
        body: document.getElementById('charBody')?.value || '',
        heightWeight: document.getElementById('charHeightWeight')?.value || '',
        skin: document.getElementById('charSkin')?.value || '',
        // 4. Face
        faceShape: document.getElementById('charFaceShape')?.value || '',
        faceFeatures: document.getElementById('charFaceFeatures')?.value || '',
        // 5. Eyes/Eyebrows
        eyes: document.getElementById('charEyes')?.value || '',
        eyebrows: document.getElementById('charEyebrows')?.value || '',
        // 6. Lips
        lips: document.getElementById('charLips')?.value || '',
        // 7. Hair
        hairStyle: document.getElementById('charHairStyle')?.value || '',
        hairColor: document.getElementById('charHairColor')?.value || '',
        hairDetails: document.getElementById('charHairDetails')?.value || '',
        // 8. Outfit
        shirt: document.getElementById('charShirt')?.value || '',
        bottoms: document.getElementById('charBottoms')?.value || '',
        outerwear: document.getElementById('charOuterwear')?.value || '',
        shoes: document.getElementById('charShoes')?.value || '',
        fabric: document.getElementById('charFabric')?.value || '',
        // 9. Accessories
        headAccessories: document.getElementById('charHeadAccessories')?.value || '',
        jewelry: document.getElementById('charJewelry')?.value || '',
        otherAccessories: document.getElementById('charOtherAccessories')?.value || '',
        // 10. Personality
        personalityTraits: document.getElementById('charPersonalityTraits')?.value || '',
        confidence: document.getElementById('charConfidence')?.value || '',
        cameraPresence: document.getElementById('charCameraPresence')?.value || '',
        // 11. Starting Pose
        initialPose: document.getElementById('charInitialPose')?.value || '',
        bodyLanguage: document.getElementById('charBodyLanguage')?.value || '',
        // 12. Voice Tone
        voicePitch: document.getElementById('charVoicePitch')?.value || '',
        speakingStyle: document.getElementById('charSpeakingStyle')?.value || '',
        accent: document.getElementById('charAccent')?.value || '',
        voiceCharacteristics: document.getElementById('charVoiceCharacteristics')?.value || '',
        // 13. Special Features
        uniqueTraits: document.getElementById('charUniqueTraits')?.value || '',
        specialEffects: document.getElementById('charSpecialEffects')?.value || '',
        // 14. Visual Style
        realismType: document.getElementById('charRealismType')?.value || ''
    };
    
    // Store data for later use
    characterTemplateData = data;
    
    // Build character description using new 14-section format
    let characterTypeText = '';
    if (data.type === 'animal') {
        characterTypeText = `‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${data.species || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
    } else if (data.type === 'cartoon') {
        characterTypeText = `‡∏ï‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô/‡πÅ‡∏ü‡∏ô‡∏ï‡∏≤‡∏ã‡∏µ ${data.species || ''}`;
    } else if (data.type === 'robot') {
        characterTypeText = `‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå/AI ${data.species || ''}`;
    } else if (data.type === 'creature') {
        characterTypeText = `‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ${data.species || ''}`;
    } else {
        characterTypeText = '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå';
    }
    
    let prompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á Character Profile ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${characterTypeText} ‡∏ï‡∏≤‡∏° format 14 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ:\n\n`;
    
    // 1. Name/Role
    if (data.name || data.nickname || data.role) {
        prompt += 'üë§ **1. ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Name / Role)**\n';
        if (data.name) prompt += `* Name: ${data.name}\n`;
        if (data.nickname) prompt += `* Nickname: ${data.nickname}\n`;
        if (data.role) prompt += `* Role: ${data.role}\n`;
        prompt += '\n';
    }
    
    // 2. Gender/Age/Ethnicity or Species
    prompt += 'üßë‚Äçüé® **2. ';
    if (data.type === 'human') {
        prompt += '‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ / ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥ (Gender / Age / Ethnicity)**\n';
        if (data.gender) prompt += `* Gender: ${data.gender}\n`;
        if (data.age) prompt += `* Age: ${data.age}\n`;
        if (data.ethnicity) prompt += `* Ethnicity: ${data.ethnicity}\n`;
    } else {
        prompt += `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó / ‡πÄ‡∏û‡∏® / ‡∏≠‡∏≤‡∏¢‡∏∏ (Type / Gender / Age)**\n`;
        prompt += `* Type: ${characterTypeText}\n`;
        if (data.species) prompt += `* Species: ${data.species}\n`;
        if (data.gender) prompt += `* Gender: ${data.gender}\n`;
        if (data.age) prompt += `* Age: ${data.age}\n`;
    }
    prompt += '\n';
    
    // 3. Body/Skin
    if (data.body || data.heightWeight || data.skin) {
        prompt += 'üíÉ **3. ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á / ‡∏ú‡∏¥‡∏ß (Body / Skin)**\n';
        if (data.body) prompt += `* Body type: ${data.body}\n`;
        if (data.heightWeight) prompt += `* Height & Weight: ${data.heightWeight}\n`;
        if (data.skin) prompt += `* Skin tone: ${data.skin}\n`;
        prompt += '\n';
    }
    
    // 4. Face
    if (data.faceShape || data.faceFeatures) {
        prompt += 'üë§ **4. ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Face)**\n';
        if (data.faceShape) prompt += `* Face shape: ${data.faceShape}\n`;
        if (data.faceFeatures) prompt += `* Face features: ${data.faceFeatures}\n`;
        prompt += '\n';
    }
    
    // 5. Eyes/Eyebrows
    if (data.eyes || data.eyebrows) {
        prompt += 'üëÅÔ∏è **5. ‡∏î‡∏ß‡∏á‡∏ï‡∏≤ / ‡∏Ñ‡∏¥‡πâ‡∏ß (Eyes / Eyebrows)**\n';
        if (data.eyes) prompt += `* Eyes: ${data.eyes}\n`;
        if (data.eyebrows) prompt += `* Eyebrows: ${data.eyebrows}\n`;
        prompt += '\n';
    }
    
    // 6. Lips
    if (data.lips) {
        prompt += 'üëÑ **6. ‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å (Lips)**\n';
        prompt += `* Lips: ${data.lips}\n\n`;
    }
    
    // 7. Hair
    if (data.hairStyle || data.hairColor || data.hairDetails) {
        prompt += 'üíá‚Äç‚ôÄÔ∏è **7. ‡∏ú‡∏° (Hair)**\n';
        if (data.hairStyle) prompt += `* Hair style: ${data.hairStyle}\n`;
        if (data.hairColor) prompt += `* Hair color: ${data.hairColor}\n`;
        if (data.hairDetails) prompt += `* Hair details: ${data.hairDetails}\n`;
        prompt += '\n';
    }
    
    // 8. Outfit
    if (data.shirt || data.bottoms || data.outerwear || data.shoes || data.fabric) {
        prompt += 'üëó **8. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢ (Outfit)**\n';
        if (data.shirt) prompt += `* Top/Shirt: ${data.shirt}\n`;
        if (data.bottoms) prompt += `* Bottom/Pants/Skirt: ${data.bottoms}\n`;
        if (data.outerwear) prompt += `* Outerwear: ${data.outerwear}\n`;
        if (data.shoes) prompt += `* Shoes: ${data.shoes}\n`;
        if (data.fabric) prompt += `* Fabric/Material: ${data.fabric}\n`;
        prompt += '\n';
    }
    
    // 9. Accessories
    if (data.headAccessories || data.jewelry || data.otherAccessories) {
        prompt += 'üíé **9. ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö (Accessories)**\n';
        if (data.headAccessories) prompt += `* Head accessories: ${data.headAccessories}\n`;
        if (data.jewelry) prompt += `* Jewelry: ${data.jewelry}\n`;
        if (data.otherAccessories) prompt += `* Other accessories: ${data.otherAccessories}\n`;
        prompt += '\n';
    }
    
    // 10. Personality
    if (data.personalityTraits || data.confidence || data.cameraPresence) {
        prompt += 'üé≠ **10. ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û (Personality)**\n';
        if (data.personalityTraits) prompt += `* Personality traits: ${data.personalityTraits}\n`;
        if (data.confidence) prompt += `* Confidence level: ${data.confidence}\n`;
        if (data.cameraPresence) prompt += `* Camera presence: ${data.cameraPresence}\n`;
        prompt += '\n';
    }
    
    // 11. Starting Pose
    if (data.initialPose || data.bodyLanguage) {
        prompt += 'üï¥Ô∏è **11. ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Starting Pose)**\n';
        if (data.initialPose) prompt += `* Initial pose: ${data.initialPose}\n`;
        if (data.bodyLanguage) prompt += `* Body language: ${data.bodyLanguage}\n`;
        prompt += '\n';
    }
    
    // 12. Voice Tone
    if (data.voicePitch || data.speakingStyle || data.accent || data.voiceCharacteristics) {
        prompt += 'üéôÔ∏è **12. ‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Voice Tone)**\n';
        if (data.voicePitch) prompt += `* Voice pitch: ${data.voicePitch}\n`;
        if (data.speakingStyle) prompt += `* Speaking style: ${data.speakingStyle}\n`;
        if (data.accent) prompt += `* Accent/Dialect: ${data.accent}\n`;
        if (data.voiceCharacteristics) prompt += `* Voice characteristics: ${data.voiceCharacteristics}\n`;
        prompt += '\n';
    }
    
    // 13. Special Features
    if (data.uniqueTraits || data.specialEffects) {
        prompt += '‚ú® **13. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© (Special Features)**\n';
        if (data.uniqueTraits) prompt += `* Unique traits: ${data.uniqueTraits}\n`;
        if (data.specialEffects) prompt += `* Special effects: ${data.specialEffects}\n`;
        prompt += '\n';
    }
    
    // 14. Visual Style
    if (data.realismType) {
        prompt += 'üñºÔ∏è **14. ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (Visual Style)**\n';
        prompt += `* Realism type: ${data.realismType}\n\n`;
    }
    
    prompt += '‚ö†Ô∏è IMPORTANT: Generate the complete character profile in ENGLISH following the exact 14-section format above.';
    
    // Insert into message input
    document.getElementById('messageInput').value = prompt;
    
    // Close modal
    closeCharacterTemplate();
    
    // Auto resize textarea
    const textarea = document.getElementById('messageInput');
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
    
    // Show notification
    showNotification('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Character ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Profile', 'success');
}

// Export functions
window.showCharacterTemplate = showCharacterTemplate;
window.closeCharacterTemplate = closeCharacterTemplate;
window.generateFromCharacterTemplate = generateFromCharacterTemplate;
window.updateCharacterTemplateButton = updateCharacterTemplateButton;
window.saveEditedCharacter = saveEditedCharacter;
window.cancelEditCharacter = cancelEditCharacter;
window.confirmUpdateCharacter = confirmUpdateCharacter;
window.editCharacter = editCharacter;

// Override switchMode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å updateCharacterTemplateButton
const originalSwitchModeForCharTemplate = window.switchMode;
window.switchMode = function(mode) {
    originalSwitchModeForCharTemplate(mode);
    updateTemplateButton();
    updateCharacterTemplateButton();
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        updateCharacterTemplateButton();
    }, 100);
});

console.log('‚úÖ Character Template System loaded!');

// ========== TEMPLATE BUTTON FIX ==========
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°
function verifyButtonVisibility() {
    const templateBtn = document.getElementById('templateButtonSection');
    const charTemplateBtn = document.getElementById('characterTemplateButtonSection');
    
    switch(currentMode) {
        case 'promptmaster':
        case 'multichar':
            // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Template Form ‡∏™‡∏µ‡∏™‡πâ‡∏°
            if (templateBtn) templateBtn.style.display = 'inline-block';
            // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Character Template ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
            if (charTemplateBtn) charTemplateBtn.style.display = 'none';
            break;
            
        case 'character':
            // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Template Form ‡∏™‡∏µ‡∏™‡πâ‡∏°
            if (templateBtn) templateBtn.style.display = 'none';
            // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Character Template ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
            if (charTemplateBtn) charTemplateBtn.style.display = 'inline-block';
            break;
            
        default:
            // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            if (templateBtn) templateBtn.style.display = 'none';
            if (charTemplateBtn) charTemplateBtn.style.display = 'none';
            break;
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î
const originalSwitchModeFixed = window.switchMode;
window.switchMode = function(mode) {
    originalSwitchModeFixed(mode);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î
    setTimeout(() => {
        verifyButtonVisibility();
    }, 50);
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        verifyButtonVisibility();
    }, 500);
});

console.log('‚úÖ Template button visibility fix applied!');
// ========== END TEMPLATE BUTTON FIX ==========

// ========== FORCE HIDE TEMPLATE BUTTONS ==========
// ‡∏™‡∏£‡πâ‡∏≤‡∏á observer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
const buttonObserver = new MutationObserver(function(mutations) {
    const templateBtn = document.getElementById('templateButtonSection');
    const charTemplateBtn = document.getElementById('characterTemplateButtonSection');
    
    if (!templateBtn || !charTemplateBtn) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    switch(currentMode) {
        case 'promptmaster':
        case 'multichar':
            templateBtn.style.display = 'inline-block';
            templateBtn.style.visibility = 'visible';
            charTemplateBtn.style.display = 'none';
            charTemplateBtn.style.visibility = 'hidden';
            break;
            
        case 'character':
            templateBtn.style.display = 'none';
            templateBtn.style.visibility = 'hidden';
            charTemplateBtn.style.display = 'inline-block';
            charTemplateBtn.style.visibility = 'visible';
            break;
            
        case 'chat':
        case 'image':
        case 'imagegen':
        case 'library':
            templateBtn.style.display = 'none';
            templateBtn.style.visibility = 'hidden';
            charTemplateBtn.style.display = 'none';
            charTemplateBtn.style.visibility = 'hidden';
            break;
    }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏° observe ‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
document.addEventListener('DOMContentLoaded', function() {
    const uploadSection = document.getElementById('uploadSection');
    if (uploadSection) {
        buttonObserver.observe(uploadSection, {
            attributes: true,
            childList: true,
            subtree: true,
            attributeFilter: ['style', 'class']
        });
    }
    
    // Force hide on load
    setTimeout(() => {
        const templateBtn = document.getElementById('templateButtonSection');
        const charTemplateBtn = document.getElementById('characterTemplateButtonSection');
        
        if (currentMode === 'chat' || currentMode === 'image' || currentMode === 'imagegen') {
            if (templateBtn) {
                templateBtn.style.display = 'none';
                templateBtn.style.visibility = 'hidden';
            }
            if (charTemplateBtn) {
                charTemplateBtn.style.display = 'none';
                charTemplateBtn.style.visibility = 'hidden';
            }
        }
    }, 1000);
});

// ========== END FORCE HIDE ==========

// ========== CHARACTER PICKER SYSTEM ==========
let currentCharacterFieldId = null;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Character Picker
function openCharacterPicker(fieldId) {
    currentCharacterFieldId = fieldId;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal
    const modal = document.createElement('div');
    modal.className = 'character-picker-modal';
    modal.innerHTML = `
        <div class="character-picker-content">
            <div class="picker-header">
                <h3>üìö ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å Library</h3>
                <button class="close-btn" onclick="closeCharacterPicker()">‚úï</button>
            </div>
            
            <div class="picker-body">
                <div id="characterPickerList" class="character-picker-list">
                    <!-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    loadCharacterPickerList();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
function loadCharacterPickerList() {
    const listContainer = document.getElementById('characterPickerList');
    
    if (characterLibrary.length === 0) {
        listContainer.innerHTML = `
            <div class="empty-picker">
                <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ</p>
                <button onclick="closeCharacterPicker(); switchMode('character');" 
                        style="margin-top: 16px; padding: 8px 16px; background: var(--primary); 
                               color: white; border: none; border-radius: 8px; cursor: pointer;">
                    + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà
                </button>
            </div>
        `;
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    listContainer.innerHTML = characterLibrary.map((char, index) => {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å profile
        const summary = extractCharacterSummary(char.profile || char.preview);
        
        return `
            <div class="character-picker-item" onclick="selectCharacterForField(${index})">
                <div class="picker-item-header">
                    <h4>${char.name}</h4>
                    <span class="select-indicator">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</span>
                </div>
                <div class="picker-item-preview">
                    ${summary}
                </div>
            </div>
        `;
    }).join('');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
function extractCharacterSummary(profile) {
    if (!profile) return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const lines = profile.split('\n');
    let summary = '';
    let foundInfo = false;
    
    for (let line of lines) {
        // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏® ‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß
        if (line.includes('Gender:') || line.includes('Age:') || 
            line.includes('Appearance:') || line.includes('Clothing:') ||
            line.includes('‡πÄ‡∏û‡∏®:') || line.includes('‡∏≠‡∏≤‡∏¢‡∏∏:')) {
            summary += line.trim() + '<br>';
            foundInfo = true;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î
        if (foundInfo && summary.length > 150) break;
    }
    
    return summary || profile.substring(0, 200) + '...';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
function selectCharacterForField(index) {
    const character = characterLibrary[index];
    const field = document.getElementById(currentCharacterFieldId);
    
    if (!field || !character) return;
    
    let cleanProfile = '';
    
    if (character.profile) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Scene Builder ‡∏´‡∏£‡∏∑‡∏≠ Template Form
        if (currentCharacterFieldId.startsWith('sceneChar')) {
            // Scene Builder - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ
            cleanProfile = extractCharacterSummary(character.profile);
        } else {
            // Template Form - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 14 ‡∏Ç‡πâ‡∏≠
            cleanProfile = extractMainCharacterInfo(character.profile);
        }
    } else {
        cleanProfile = character.preview || character.name;
    }
    
    // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
    field.value = cleanProfile;

    // Trigger events ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ preview ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
field.dispatchEvent(new Event('input', { bubbles: true }));
field.dispatchEvent(new Event('change', { bubbles: true }));

// Force update preview
setTimeout(() => {
    updateTemplatePreview();
    console.log('‚úÖ Preview updated after character selection');
}, 100);
    
    // Trigger input event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ preview ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    const event = new Event('input', { bubbles: true });
    field.dispatchEvent(event);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Scene Builder
    if (currentCharacterFieldId.startsWith('sceneChar')) {
        const idx = parseInt(currentCharacterFieldId.replace('sceneChar', ''));
        sceneData.characters[idx] = cleanProfile;
    }
    
    // Force update preview
    if (typeof updateTemplatePreview === 'function') {
        setTimeout(() => {
            updateTemplatePreview();
        }, 100);
    }
    
    closeCharacterPicker();
    showNotification(`‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "${character.name}" ‡πÅ‡∏•‡πâ‡∏ß!`, 'success');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 8 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
function extractMainCharacterInfo(profile) {
    if (!profile) return '';
    
    // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 17 ‡∏Ç‡πâ‡∏≠ (‡∏£‡∏ß‡∏°‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á)
    const wantedSections = [
        { emoji: 'üë§', number: '1.', keywords: ['nickname', 'role', '‡∏ä‡∏∑‡πà‡∏≠', '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'] },
        { emoji: 'üßë‚Äçüé®', number: '2.', keywords: ['gender', 'age', 'ethnicity', '‡πÄ‡∏û‡∏®', '‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥'] },
        { emoji: 'üíÉ', number: '3.', keywords: ['body', 'skin', 'posture', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á', '‡∏ú‡∏¥‡∏ß'] },
        { emoji: 'üëÅÔ∏è', number: '4.', keywords: ['face', 'eyes', '‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤', '‡∏î‡∏ß‡∏á‡∏ï‡∏≤'] },
        { emoji: 'üëÑ', number: '5.', keywords: ['mouth', 'lips', 'smile', '‡∏õ‡∏≤‡∏Å', '‡∏£‡∏¥‡∏°‡∏ù‡∏µ‡∏õ‡∏≤‡∏Å'] },
        { emoji: 'üëÉ', number: '6.', keywords: ['nose', '‡∏à‡∏°‡∏π‡∏Å'] },
        { emoji: 'üíá‚Äç‚ôÄÔ∏è', number: '7.', keywords: ['hair', '‡∏ú‡∏°', '‡∏ó‡∏£‡∏á‡∏ú‡∏°'] },
        { emoji: 'üëó', number: '8.', keywords: ['clothing', 'shirt', 'outfit', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠'] },
        { emoji: 'üëñ', number: '9.', keywords: ['pants', 'shorts', 'skirt', '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á', '‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á'] },
        { emoji: 'üëü', number: '10.', keywords: ['shoes', 'footwear', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤'] },
        { emoji: 'üíç', number: '11.', keywords: ['accessories', 'jewelry', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö', '‡∏™‡∏£‡πâ‡∏≠‡∏¢'] },
        { emoji: 'üéôÔ∏è', number: '12.', keywords: ['voice', 'speech', 'tone', '‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á', '‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î'] },
        { emoji: 'üé≠', number: '13.', keywords: ['expression', 'emotion', '‡∏™‡∏µ‡∏´‡∏ô‡πâ‡∏≤', '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå'] },
        { emoji: 'üñºÔ∏è', number: '14.', keywords: ['visual', 'style', '‡∏†‡∏≤‡∏û', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á'] },
        { emoji: 'üìπ', number: '15.', keywords: ['camera', 'angle', 'shot', '‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡∏£‡∏∞‡∏¢‡∏∞'] },
        { emoji: 'üé¨', number: '16.', keywords: ['scene', 'movement', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß'] },
        { emoji: 'üé•', number: '17.', keywords: ['filming', 'transition', '‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥', '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô'] }
    ];
    
    const lines = profile.split('\n');
    const result = [];
    let currentSection = null;
    let captureContent = false;
    
    for (let line of lines) {
        const trimmedLine = line.trim();
        const lowerLine = trimmedLine.toLowerCase();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for (let section of wantedSections) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ emoji ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
            if (trimmedLine.includes(section.emoji) || trimmedLine.includes(section.number)) {
                currentSection = section;
                captureContent = true;
                result.push(trimmedLine); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                break;
            }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        if (captureContent && currentSection) {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ * ‡∏´‡∏£‡∏∑‡∏≠ -)
            if (trimmedLine.startsWith('*') || trimmedLine.startsWith('-')) {
                result.push(trimmedLine);
            }
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
            else if (trimmedLine && !trimmedLine.startsWith('*') && !trimmedLine.startsWith('-')) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                let isNextSection = false;
                for (let section of wantedSections) {
                    if (trimmedLine.includes(section.emoji) || trimmedLine.includes(section.number)) {
                        isNextSection = true;
                        break;
                    }
                }
                
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡πá‡∏ö
                if (!isNextSection && trimmedLine.length > 0 && 
                    !lowerLine.includes('summary') && 
                    !lowerLine.includes('character profile') &&
                    !lowerLine.includes('template')) {
                    captureContent = false;
                }
            }
        }
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
        if (lowerLine.includes('summary') || 
            lowerLine.includes('this character profile') ||
            lowerLine.includes('comprehensive insight')) {
            break;
        }
    }
    
    // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    return result.join('\n').trim();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scene Builder
function extractCharacterSummary(profile) {
    if (!profile) return '';
    
    const lines = profile.split('\n');
    const summary = [];
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠
    lines.forEach(line => {
        const trimmed = line.trim();
        
        // ‡∏ä‡∏∑‡πà‡∏≠
        if (trimmed.includes('‡∏ä‡∏∑‡πà‡∏≠:') || trimmed.includes('Name:')) {
            const name = trimmed.split(':')[1]?.trim();
            if (name) summary.push(`‡∏ä‡∏∑‡πà‡∏≠ ${name}`);
        }
        
        // ‡πÄ‡∏û‡∏®‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏
        if (trimmed.includes('‡πÄ‡∏û‡∏®:') || trimmed.includes('Gender:')) {
            const gender = trimmed.split(':')[1]?.trim();
            if (gender) summary.push(gender === 'Male' ? '‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢' : '‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á');
        }
        if (trimmed.includes('‡∏≠‡∏≤‡∏¢‡∏∏:') || trimmed.includes('Age:')) {
            const age = trimmed.split(':')[1]?.trim();
            if (age) summary.push(`‡∏≠‡∏≤‡∏¢‡∏∏ ${age}`);
        }
        
        // ‡∏ú‡∏°
        if (trimmed.includes('‡∏ó‡∏£‡∏á‡∏ú‡∏°:') || trimmed.includes('Hair style:')) {
            const hair = trimmed.split(':')[1]?.trim();
            if (hair) summary.push(`‡∏ú‡∏°${hair}`);
        }
        if (trimmed.includes('‡∏™‡∏µ‡∏ú‡∏°:') || trimmed.includes('Hair color:')) {
            const hairColor = trimmed.split(':')[1]?.trim();
            if (hairColor) summary.push(`‡∏™‡∏µ${hairColor}`);
        }
        
        // ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤
        if (trimmed.includes('‡πÄ‡∏™‡∏∑‡πâ‡∏≠:') || trimmed.includes('Shirt:')) {
            const shirt = trimmed.split(':')[1]?.trim();
            if (shirt) summary.push(`‡πÉ‡∏™‡πà${shirt}`);
        }
        if (trimmed.includes('‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á:') || trimmed.includes('Pants:')) {
            const pants = trimmed.split(':')[1]?.trim();
            if (pants) summary.push(pants);
        }
        
        // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö
        if (trimmed.includes('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö:') || trimmed.includes('Accessories:')) {
            const accessories = trimmed.split(':')[1]?.trim();
            if (accessories && accessories !== '-') summary.push(accessories);
        }
    });
    
    // ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
    return summary.length > 0 ? summary.join(' ') : profile.substring(0, 200);
}

// Export function ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
window.extractMainCharacterInfo = extractMainCharacterInfo;
window.extractCharacterSummary = extractCharacterSummary;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î Character Picker
function closeCharacterPicker() {
    const modal = document.querySelector('.character-picker-modal');
    if (modal) modal.remove();
    currentCharacterFieldId = null;
}

// Export functions
window.openCharacterPicker = openCharacterPicker;
window.closeCharacterPicker = closeCharacterPicker;
window.selectCharacterForField = selectCharacterForField;

// ========== DEBUG CHARACTER TEMPLATE ==========
window.debugTemplateCharacters = function() {
    console.log('=== Debug Template Characters ===');
    console.log('Character Count:', templateCharCount);
    
    for (let i = 1; i <= 5; i++) {
        const field = document.getElementById(`char${i}`);
        if (field) {
            console.log(`Character ${i}:`, field.value);
        }
    }
    
    console.log('=== Preview Update Test ===');
    updateTemplatePreview();
};
// ========== FORCE UPDATE CHARACTER VALUES ==========
// Override setTemplateCharCount ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á fields
window.templateCharFields = {};

const originalSetTemplateCharCount = window.setTemplateCharCount;
window.setTemplateCharCount = function(count, buttonElement) {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    originalSetTemplateCharCount(count, buttonElement);
    
    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å field
    window.templateCharFields = {};
    for (let i = 1; i <= count; i++) {
        const field = document.getElementById(`char${i}`);
        if (field) {
            window.templateCharFields[i] = field;
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            field.addEventListener('input', function() {
                console.log(`Character ${i} updated:`, this.value.substring(0, 50) + '...');
            });
        }
    }
};

// Fix ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ï‡∏≠‡∏ô generate
const fixedGenerateFromTemplate = window.generateFromTemplate;
window.generateFromTemplate = function() {
    console.log('üîß Fixed Generate - Checking character values...');
    
    // Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô generate
    const charCount = window.templateCharCount || 0;
    const characterData = [];
    
    for (let i = 1; i <= charCount; i++) {
        const field = document.getElementById(`char${i}`);
        if (field) {
            const value = field.value;
            console.log(`Character ${i}: ${value ? 'Has data' : 'Empty'}`);
            if (value) {
                characterData.push(`${i}. ${value}`);
                console.log(`   Data: ${value.substring(0, 100)}...`);
            }
        }
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
    fixedGenerateFromTemplate();
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô prompt ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    if (characterData.length > 0) {
        const messageInput = document.getElementById('messageInput');
        let currentPrompt = messageInput.value;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏ô prompt ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasCharacters = characterData.some(data => 
            currentPrompt.includes(data.substring(0, 30))
        );
        
        if (!hasCharacters) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏ô prompt - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...');
            
            // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏£‡∏Å
            const insertPoint = currentPrompt.indexOf('‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:');
            const characterSection = `\nüë• ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n${characterData.join('\n')}\n`;
            
            if (insertPoint > -1) {
                currentPrompt = 
                    currentPrompt.slice(0, insertPoint) + 
                    characterSection + 
                    currentPrompt.slice(insertPoint);
            } else {
                currentPrompt = currentPrompt.replace(
                    '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n',
                    `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n${characterData.join('\n')}\n`
                );
            }
            
            messageInput.value = currentPrompt;
            console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
        }
    }
};

console.log('‚úÖ Force Update Character Values Loaded!');

// ========== FIX TEMPLATE PREVIEW UPDATE ==========
// Override updateTemplatePreview ‡πÉ‡∏´‡πâ‡∏°‡∏µ error handling
window.updateTemplatePreview = function() {
    console.log('üìã Updating template preview...');
    
    try {
        const preview = document.getElementById('templatePreview');
        if (!preview) {
            console.log('Preview element not found');
            return;
        }
        
        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        const getValue = (id) => {
            const elem = document.getElementById(id);
            return elem ? elem.value : '';
        };
        
        // Get camera angles
        const cameraAngles = [];
        for (let i = 1; i <= 3; i++) {
            const angle = getValue(`cameraAngle${i}`);
            const movement = getValue(`cameraMovement${i}`);
            if (angle || movement) {
                cameraAngles.push({ angle, movement, index: i });
            }
        }
        
        const formData = {
            videoType: getValue('videoType'),
            cameraAngles: cameraAngles, // Use array instead of single values
            timeOfDay: getValue('timeOfDay'),
            visualStyle: getValue('visualStyle'),
            duration: getValue('duration'),
            location: getValue('location'),
            mood: getValue('mood'),
            soundType: getValue('soundType'),
            sceneType: getValue('sceneType')
        };
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview HTML
        let previewHTML = '<strong>üîç Preview:</strong><br><br>';
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
        let hasData = false;
        Object.entries(formData).forEach(([key, value]) => {
            if (value) {
                hasData = true;
                previewHTML += `‚Ä¢ ${key}: ${value}<br>`;
            }
        });
        
        // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        const charCount = window.templateCharCount || 0;
        if (charCount > 0) {
            hasData = true;
            previewHTML += `<br>üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${charCount} ‡∏Ñ‡∏ô<br>`;
            
            for (let i = 1; i <= charCount; i++) {
                const charValue = getValue(`char${i}`);
                if (charValue) {
                    previewHTML += `‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${i}: ${charValue.substring(0, 50)}...<br>`;
                }
            }
        }
        
        if (!hasData) {
            preview.innerHTML = '<p style="color: #666; text-align: center;">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...</p>';
        } else {
            preview.innerHTML = previewHTML;
        }
        
    } catch (error) {
        console.error('Error in updateTemplatePreview:', error);
    }
};


// ========== FIX GENERATE FROM TEMPLATE ==========
window.generateFromTemplate = function() {
    console.log('Generating prompt from template...');
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö mode
        if (!window.currentMode) {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
            return;
        }
        
        let prompt = '';
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        const getValue = (id) => {
            const elem = document.getElementById(id);
            const value = elem ? elem.value : '';
            console.log(`Getting ${id}: "${value}"`);
            return value;
        };
        
        if (currentMode === 'promptmaster' || currentMode === 'multichar') {
            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const videoType = getValue('videoType');
            
            // Get camera angles from dynamic elements
            const cameraAngles = [];
            const cameraAngleItems = document.querySelectorAll('.camera-angle-item');
            cameraAngleItems.forEach((item, index) => {
                const angleSelect = item.querySelector('[id^="cameraAngle"]');
                const movementSelect = item.querySelector('[id^="cameraMovement"]');
                
                if (angleSelect && movementSelect) {
                    const angle = angleSelect.value;
                    const movement = movementSelect.value;
                    if (angle || movement) {
                        cameraAngles.push({ 
                            angle: angle, 
                            movement: movement, 
                            index: index + 1
                        });
                    }
                }
            });
            
            const timeOfDay = getValue('timeOfDay');
            const visualStyle = getValue('visualStyle');
            const duration = getValue('duration');
            const location = getValue('location');
            const mood = getValue('mood');
            const soundType = getValue('soundType');
            const sceneType = getValue('sceneType');
            const dialogueText = getValue('dialogueText');
            const additionalDetails = getValue('additionalDetails');
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt header
            prompt = currentMode === 'promptmaster' ? 
                '‡∏™‡∏£‡πâ‡∏≤‡∏á Multi-Character Scene ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å:\n\n' :
                '‡∏™‡∏£‡πâ‡∏≤‡∏á Multi-Character Scene ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å:\n\n';
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
            if (videoType) prompt += `üé¨ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getVideoTypeText(videoType)}\n`;
            if (sceneType) prompt += `üé≠ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏â‡∏≤‡∏Å: ${getSceneTypeText(sceneType)}\n`;
            if (location) prompt += `üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${location}\n`;
            
            // Add camera angles
            if (cameraAngles.length > 0) {
                // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
                const hasAngles = cameraAngles.some(cam => cam.angle);
                const hasMovements = cameraAngles.some(cam => cam.movement);
                
                if (hasAngles) {
                    prompt += 'üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
                    cameraAngles.forEach((cam) => {
                        if (cam.angle) {
                            prompt += `  ‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà ${cam.index}: ${getCameraAngleText(cam.angle)}\n`;
                        }
                    });
                }
                
                if (hasMovements) {
                    prompt += 'üé¨ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á:\n';
                    cameraAngles.forEach((cam) => {
                        if (cam.movement) {
                            prompt += `  ‡∏ä‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà ${cam.index}: ${getCameraMovementText(cam.movement)}\n`;
                        }
                    });
                }
            }
            
            if (timeOfDay) prompt += `üåÖ ‡πÅ‡∏™‡∏á/‡πÄ‡∏ß‡∏•‡∏≤: ${getTimeOfDayText(timeOfDay)}\n`;
            if (visualStyle) prompt += `üé® ‡∏™‡πÑ‡∏ï‡∏•‡πå: ${getVisualStyleText(visualStyle)}\n`;
            if (mood) prompt += `üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ${getMoodText(mood)}\n`;
            if (soundType) prompt += `üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${getSoundTypeText(soundType)}\n`;
            if (duration) prompt += `‚è±Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${duration}\n`;
            
            // ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
            const charCount = window.templateCharCount || 0;
            if (charCount > 0) {
                prompt += `\nüë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${charCount} ‡∏Ñ‡∏ô\n`;
                prompt += '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:\n';
                
                for (let i = 1; i <= charCount; i++) {
                    const charValue = getValue(`char${i}`);
                    if (charValue) {
                        prompt += `${i}. ${charValue}\n`;
                    } else {
                        prompt += `${i}. (‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏â‡∏≤‡∏Å)\n`;
                    }
                }
            }
            
            // Effects
            const effects = [];
            document.querySelectorAll('.effects-checkboxes input:checked').forEach(cb => {
                const label = cb.nextElementSibling;
                if (label) {
                    effects.push(label.textContent.trim());
                }
            });
            if (effects.length > 0) {
                prompt += '\n‚ú® Effects: ';
                effects.forEach((effect, index) => {
                    if (index === 0) {
                        prompt += effect;
                    } else {
                        prompt += `, ${effect}`;
                    }
                });
                prompt += '\n';
            }
            
            // Dialogue
            if (dialogueText) {
                prompt += `\nüí¨ ‡∏ö‡∏ó‡∏û‡∏π‡∏î:\n${dialogueText}\n`;
            }
            
            // Additional details
            if (additionalDetails) {
                prompt += `\nüìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${additionalDetails}\n`;
            }
            
            // Footer
            prompt += '\n‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î cinematography, ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á, ‡πÅ‡∏™‡∏á, ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏û‡∏∏‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©';
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ prompt ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!prompt || prompt.trim().length === 0) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt');
            return;
        }
        
        // ‡πÉ‡∏™‡πà prompt ‡πÉ‡∏ô textarea
        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            messageInput.value = prompt;
            
            // Auto resize
            messageInput.style.height = 'auto';
            messageInput.style.height = messageInput.scrollHeight + 'px';
            
            // ‡∏õ‡∏¥‡∏î modal
            closeTemplateForm();
            
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            if (typeof showNotification === 'function') {
                showNotification('üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‚ú®" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', 'success');
            }
            
            console.log('‚úÖ Prompt generated successfully!');
        } else {
            alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
        }
        
    } catch (error) {
        console.error('Error generating prompt:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
};

// ========== ERROR RECOVERY SYSTEM ==========
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
window.onerror = function(msg, url, lineNo, columnNo, error) {
    console.error('Global error:', {msg, url, lineNo, columnNo, error});
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏à‡∏≤‡∏Å template form
    if (msg.includes('template') || msg.includes('preview')) {
        console.log('üîß Attempting to fix template error...');
        
        // Reset template state
        if (typeof closeTemplateForm === 'function') {
            closeTemplateForm();
        }
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        
        return true; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô console
    }
    
    return false;
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å element ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
function checkTemplateElements() {
    const requiredElements = [
        'templateFormModal',
        'videoType',
        'cameraAngle', 
        'timeOfDay',
        'visualStyle',
        'duration',
        'messageInput'
    ];
    
    let allReady = true;
    requiredElements.forEach(id => {
        const elem = document.getElementById(id);
        if (!elem) {
            console.error(`‚ùå Element not found: ${id}`);
            allReady = false;
        }
    });
    
    return allReady;
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î template form
const originalShowTemplateForm = window.showTemplateForm;
window.showTemplateForm = function() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö elements ‡∏Å‡πà‡∏≠‡∏ô
    if (!checkTemplateElements()) {
        alert('‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
        return;
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    if (originalShowTemplateForm) {
        originalShowTemplateForm();
    }
};

console.log('‚úÖ Template Form Error Fix Applied!');

// ========== TEMPLATE FORM FINAL FIX ==========
// ‡∏•‡∏ö listeners ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
if (window._templateFormInitialized) {
    console.log('Template form already initialized, skipping...');
} else {
    window._templateFormInitialized = true;
    
    // Fix showTemplateForm only once
    if (!window._originalShowTemplateForm) {
        window._originalShowTemplateForm = window.showTemplateForm;
        
        window.showTemplateForm = function() {
            console.log('Opening template form...');
            
            const modal = document.getElementById('templateFormModal');
            if (!modal) {
                alert('Template form not found!');
                return;
            }
            
            // Show modal
            modal.style.display = 'flex';
            
            // Reset form
            document.querySelectorAll('.template-input, .template-textarea, .template-select').forEach(field => {
                field.value = '';
            });
            
            // Set default character count
            if (typeof setTemplateCharCount === 'function') {
                setTemplateCharCount(2);
            }
            
            // Initialize listeners
            setTimeout(() => {
                initTemplateFormListeners();
            }, 100);
        };
    }
    
    // Initialize template form listeners
    function initTemplateFormListeners() {
        // Remove old listeners first
        const oldListeners = window._templateListeners || {};
        Object.keys(oldListeners).forEach(id => {
            const elem = document.getElementById(id);
            if (elem && oldListeners[id]) {
                elem.removeEventListener('change', oldListeners[id]);
                elem.removeEventListener('input', oldListeners[id]);
            }
        });
        
        window._templateListeners = {};
        
        // Add new listeners
        const fields = [
            'videoType', 'cameraAngle', 'timeOfDay', 'visualStyle',
            'duration', 'sceneType', 'mood', 'soundType', 'cameraMovement',
            'location', 'additionalDetails', 'dialogueText'
        ];
        
        fields.forEach(id => {
            const elem = document.getElementById(id);
            if (elem) {
                const handler = function() {
                    if (typeof updateTemplatePreview === 'function') {
                        updateTemplatePreview();
                    }
                };
                
                elem.addEventListener('change', handler);
                elem.addEventListener('input', handler);
                window._templateListeners[id] = handler;
            }
        });
        
        console.log('‚úÖ Template form listeners initialized');
    }
}

// Ensure functions are available globally
window.initTemplateFormListeners = initTemplateFormListeners;

console.log('‚úÖ Template Form Final Fix Applied!');

// ========== CAMERA ANGLE FUNCTIONS ==========
let cameraAngleCount = 1;

function addCameraAngle() {
    if (cameraAngleCount >= 3) {
        return;
    }
    
    cameraAngleCount++;
    const container = document.getElementById('cameraAnglesContainer');
    
    const newAngleDiv = document.createElement('div');
    newAngleDiv.className = 'camera-angle-item';
    newAngleDiv.setAttribute('data-angle-index', cameraAngleCount);
    
    newAngleDiv.innerHTML = `
        <div class="camera-angle-header">
            <h5>üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà ${cameraAngleCount}</h5>
            <button type="button" class="remove-camera-angle-btn" onclick="removeCameraAngle(${cameraAngleCount})">
                ‚ùå ‡∏•‡∏ö
            </button>
        </div>
        <div class="form-row">
            <div class="form-group">
                <label>‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á</label>
                <select id="cameraAngle${cameraAngleCount}" class="template-select" onchange="updateTemplatePreview()">
                    <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á --</option>
                    <option value="wide">‡∏°‡∏∏‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (Wide Shot)</option>
                    <option value="medium">‡∏°‡∏∏‡∏°‡∏Å‡∏•‡∏≤‡∏á (Medium Shot)</option>
                    <option value="closeup">‡∏°‡∏∏‡∏°‡πÉ‡∏Å‡∏•‡πâ (Close-up)</option>
                    <option value="extreme-closeup">‡∏°‡∏∏‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å (Extreme Close-up)</option>
                    <option value="aerial">‡∏°‡∏∏‡∏°‡∏™‡∏π‡∏á/‡πÇ‡∏î‡∏£‡∏ô (Aerial/Drone)</option>
                    <option value="low-angle">‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≥ (Low Angle)</option>
                    <option value="dutch">‡∏°‡∏∏‡∏°‡πÄ‡∏≠‡∏µ‡∏¢‡∏á (Dutch Angle)</option>
                    <option value="pov">‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà 1 (POV)</option>
                    <option value="tracking">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (Tracking Shot)</option>
                    <option value="selfie">‡πÄ‡∏ã‡∏•‡∏ü‡∏µ‡πà/‡∏ñ‡∏∑‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏á (Selfie/Handheld)</option>
                    <option value="twoshot">‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏° (Two Shot)</option>
                    <option value="over-shoulder">‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏´‡∏•‡πà (Over the Shoulder)</option>
                    <option value="establishing">‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Establishing Shot)</option>
                    <option value="insert">‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡∏£‡∏Å (Insert Shot)</option>
                    <option value="cutaway">‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏î‡πÑ‡∏õ (Cutaway)</option>
                    <option value="reaction">‡∏†‡∏≤‡∏û‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (Reaction Shot)</option>
                    <option value="birds-eye">‡∏°‡∏∏‡∏°‡∏ô‡∏Å‡∏°‡∏≠‡∏á (Bird's Eye View)</option>
                    <option value="worms-eye">‡∏°‡∏∏‡∏°‡∏´‡∏ô‡∏≠‡∏ô‡∏°‡∏≠‡∏á (Worm's Eye View)</option>
                    <option value="profile">‡∏°‡∏∏‡∏°‡∏Ç‡πâ‡∏≤‡∏á (Profile Shot)</option>
                    <option value="full-body">‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏±‡∏ß (Full Body Shot)</option>
                    <option value="cowboy">‡∏Ñ‡∏≤‡∏ß‡∏ö‡∏≠‡∏¢ (Cowboy Shot)</option>
                    <option value="master">‡∏°‡∏≤‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡πá‡∏≠‡∏ï (Master Shot)</option>
                </select>
            </div>
            
            <div class="form-group">
                <label>‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á</label>
                <select id="cameraMovement${cameraAngleCount}" class="template-select" onchange="updateTemplatePreview()">
                    <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á --</option>
                    <option value="static">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á (Static)</option>
                    <option value="pan">‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ (Pan)</option>
                    <option value="tilt">‡∏´‡∏°‡∏∏‡∏ô‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á (Tilt)</option>
                    <option value="dolly">‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (Dolly)</option>
                    <option value="tracking">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° (Tracking)</option>
                    <option value="handheld">‡∏™‡πÑ‡∏ï‡∏•‡πå Vlog (Handheld/Vlog)</option>
                    <option value="steadicam">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏°‡∏ô‡∏ß‡∏• (Steadicam)</option>
                    <option value="drone">‡πÇ‡∏î‡∏£‡∏ô (Drone)</option>
                    <option value="360">‡∏°‡∏∏‡∏° 360 ‡∏≠‡∏á‡∏®‡∏≤ (360 Degree)</option>
                    <option value="crane">‡πÄ‡∏Ñ‡∏£‡∏ô/‡∏ö‡∏π‡∏° (Crane/Boom)</option>
                    <option value="whip-pan">‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å (Whip Pan)</option>
                    <option value="zoom">‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (Zoom In/Out)</option>
                    <option value="rack-focus">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ü‡∏Å‡∏±‡∏™ (Rack Focus)</option>
                    <option value="gimbal">‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• (Gimbal)</option>
                    <option value="slider">‡∏™‡πÑ‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (Slider)</option>
                    <option value="orbit">‡πÇ‡∏Ñ‡∏à‡∏£‡∏£‡∏≠‡∏ö (Orbit)</option>
                    <option value="reveal">‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢ (Reveal Shot)</option>
                    <option value="push-in">‡∏î‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ (Push In)</option>
                    <option value="pull-out">‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å (Pull Out)</option>
                </select>
            </div>
        </div>
    `;
    
    container.appendChild(newAngleDiv);
    
    // Update button state
    if (cameraAngleCount >= 3) {
        document.querySelector('.add-camera-angle-btn').disabled = true;
    }
    
    updateTemplatePreview();
}

function removeCameraAngle(index) {
    const angleItem = document.querySelector(`[data-angle-index="${index}"]`);
    if (angleItem) {
        angleItem.remove();
    }
    
    // Renumber remaining angles
    const remainingAngles = document.querySelectorAll('.camera-angle-item');
    cameraAngleCount = remainingAngles.length;
    
    remainingAngles.forEach((item, idx) => {
        const newIndex = idx + 1;
        item.setAttribute('data-angle-index', newIndex);
        item.querySelector('h5').textContent = `üì∑ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà ${newIndex}`;
        
        // Update IDs
        const angleSelect = item.querySelector('select[id^="cameraAngle"]');
        const movementSelect = item.querySelector('select[id^="cameraMovement"]');
        if (angleSelect) angleSelect.id = `cameraAngle${newIndex}`;
        if (movementSelect) movementSelect.id = `cameraMovement${newIndex}`;
        
        // Update remove button
        const removeBtn = item.querySelector('.remove-camera-angle-btn');
        if (removeBtn) {
            removeBtn.setAttribute('onclick', `removeCameraAngle(${newIndex})`);
        }
    });
    
    // Enable add button
    document.querySelector('.add-camera-angle-btn').disabled = false;
    
    updateTemplatePreview();
}

window.addCameraAngle = addCameraAngle;
window.removeCameraAngle = removeCameraAngle;

window.showTemplateForm = function() {
    const modal = document.getElementById('templateFormModal');
    if (!modal) return;
    
    modal.style.display = 'flex';
    
    // Reset camera angles to 1
    cameraAngleCount = 1;
    const container = document.getElementById('cameraAnglesContainer');
    if (container) {
        const extraAngles = container.querySelectorAll('.camera-angle-item[data-angle-index]:not([data-angle-index="1"])');
        extraAngles.forEach(item => item.remove());
    }
    
    // Enable add button
    const addBtn = document.querySelector('.add-camera-angle-btn');
    if (addBtn) addBtn.disabled = false;
    
    // Reset template data
    templateFormData = {
        characterCount: 2,
        characters: {}
    };
    window.templateCharCount = 2;
    
    // Clear form
    document.querySelectorAll('.template-input, .template-textarea, .template-select').forEach(field => {
        field.value = '';
    });
    
    // Set default character count
    setTemplateCharCount(2);
    
    // Initialize listeners
    setTimeout(() => {
        initTemplateFormListeners();
    }, 100);
};

// ========== FAB MENU SYSTEM ==========
let fabMenuOpen = false;

function toggleFabMenu() {
    const container = document.querySelector('.fab-menu-container');
    fabMenuOpen = !fabMenuOpen;
    
    if (fabMenuOpen) {
        container.classList.add('active');
        // Disable scrolling
        document.body.style.overflow = 'hidden';
        
        // Haptic feedback ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        if (navigator.vibrate) {
            navigator.vibrate(50);
        }
    } else {
        closeFabMenu();
    }
}

function closeFabMenu() {
    const container = document.querySelector('.fab-menu-container');
    container.classList.remove('active');
    fabMenuOpen = false;
    
    // Re-enable scrolling
    document.body.style.overflow = '';
}

// ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏°‡∏∑‡πà‡∏≠ scroll
let lastScrollY = window.scrollY;
window.addEventListener('scroll', () => {
    const currentScrollY = window.scrollY;
    
    if (Math.abs(currentScrollY - lastScrollY) > 50 && fabMenuOpen) {
        closeFabMenu();
    }
    
    lastScrollY = currentScrollY;
});

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó badge count
function updateFabBadge() {
    const badge = document.querySelector('.fab-badge');
    let count = 0;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô features/updates
    if (!sessionStorage.getItem('announcement_viewed')) count++;
    if (!sessionStorage.getItem('course_viewed')) count++;
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    
    if (badge) {
        if (count > 0) {
            badge.textContent = count;
            badge.style.display = 'block';
        } else {
            badge.style.display = 'none';
        }
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î video analyzer (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
function openVideoAnalyzer() {
    // ‡πÄ‡∏õ‡∏¥‡∏î video analyzer
    window.open('https://your-video-analyzer-url.com', '_blank');
    closeFabMenu();
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    updateFabBadge();
    
    // Hide individual FABs on mobile
    if (window.innerWidth <= 768) {
        document.querySelectorAll('.fab-announcement, .fab-course, .fab-tools, .fab-music, .fab-video-analyzer').forEach(fab => {
            fab.style.display = 'none';
        });
    }
});

// Export functions
window.toggleFabMenu = toggleFabMenu;
window.closeFabMenu = closeFabMenu;
window.updateFabBadge = updateFabBadge;
window.openVideoAnalyzer = openVideoAnalyzer;

// ========== END CHARACTER TEMPLATE SYSTEM ==========

// ========== IMAGE PROMPT FORM FUNCTIONS ==========

// Apply quick template
function applyImageTemplate(templateType) {
    const templates = {
        portrait: {
            theme: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏ß‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®‡∏¢‡∏¥‡πâ‡∏°‡πÅ‡∏¢‡πâ‡∏°',
            style: 'photorealistic',
            mood: 'happy',
            gender: 'female',
            age: '25',
            clothing: '‡∏ä‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï‡∏Ç‡∏≤‡∏ß',
            location: '‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà',
            cameraAngle: 'portrait',
            lens: '85mm',
            aperture: 'f/2.8',
            resolution: '4K'
        },
        landscape: {
            theme: '‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡∏ï‡∏≠‡∏ô‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô',
            style: 'photorealistic',
            mood: 'peaceful',
            location: '‡∏†‡∏π‡πÄ‡∏Ç‡∏≤',
            time: 'golden_hour',
            cameraAngle: 'wide_angle',
            lens: '24mm'
        },
        product: {
            theme: '‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
            style: 'photorealistic',
            mood: 'happy',
            cameraAngle: 'close_up',
            lens: '50mm',
            aperture: 'f/5.6'
        },
        fantasy: {
            theme: '‡πÇ‡∏•‡∏Å‡πÅ‡∏ü‡∏ô‡∏ï‡∏≤‡∏ã‡∏µ‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå',
            style: 'digital_art',
            mood: 'mysterious',
            atmosphere: '‡∏´‡∏°‡∏≠‡∏Å‡∏à‡∏≤‡∏á‡πÜ ‡πÅ‡∏™‡∏á‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå'
        }
    };
    
    const template = templates[templateType];
    if (!template) return;
    
    // Apply template values
    if (template.theme) document.getElementById('imageTheme').value = template.theme;
    if (template.style) document.getElementById('imageStyle').value = template.style;
    if (template.mood) document.getElementById('imageMood').value = template.mood;
    if (template.gender) {
        document.querySelectorAll('input[name="imageGender"]').forEach(radio => {
            radio.checked = radio.value === template.gender;
        });
    }
    if (template.age) document.getElementById('imageAge').value = template.age;
    if (template.clothing) document.getElementById('imageClothing').value = template.clothing;
    if (template.location) document.getElementById('imageLocation').value = template.location;
    if (template.time) document.getElementById('imageTime').value = template.time;
    if (template.atmosphere) document.getElementById('imageAtmosphere').value = template.atmosphere;
    if (template.cameraAngle) document.getElementById('imageCameraAngle').value = template.cameraAngle;
    if (template.lens) document.getElementById('imageLens').value = template.lens;
    if (template.aperture) document.getElementById('imageAperture').value = template.aperture;
    if (template.resolution) document.getElementById('imageResolution').value = template.resolution;
}

// Clear form
function clearImagePromptForm() {
    const form = document.querySelector('.image-prompt-form');
    if (!form) return;
    
    // Clear all inputs
    form.querySelectorAll('input[type="text"], input[type="number"], textarea').forEach(input => {
        input.value = '';
    });
    
    // Reset all selects
    form.querySelectorAll('select').forEach(select => {
        select.selectedIndex = 0;
    });
    
    // Reset radio buttons
    form.querySelectorAll('input[type="radio"]').forEach(radio => {
        if (radio.value === '') radio.checked = true;
        else radio.checked = false;
    });
}

// Generate prompt from form
async function generateImagePromptFromForm() {
    const formData = {
        theme: document.getElementById('imageTheme').value,
        style: document.getElementById('imageStyle').value,
        mood: document.getElementById('imageMood').value,
        gender: document.querySelector('input[name="imageGender"]:checked')?.value || '',
        age: document.getElementById('imageAge').value,
        ethnicity: document.getElementById('imageEthnicity').value,
        pose: document.getElementById('imagePose').value,
        clothing: document.getElementById('imageClothing').value,
        location: document.getElementById('imageLocation').value,
        time: document.getElementById('imageTime').value,
        atmosphere: document.getElementById('imageAtmosphere').value,
        cameraAngle: document.getElementById('imageCameraAngle').value,
        lens: document.getElementById('imageLens').value,
        aperture: document.getElementById('imageAperture').value,
        iso: document.getElementById('imageISO').value,
        resolution: document.getElementById('imageResolution').value,
        aspectRatio: document.getElementById('imageAspectRatio').value,
        additionalDetails: document.getElementById('imageAdditionalDetails').value
    };
    
    // Check if at least theme is provided
    if (!formData.theme) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û');
        return;
    }
    
    // Build prompt message
    let promptMessage = `‡∏™‡∏£‡πâ‡∏≤‡∏á image prompt ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${formData.theme}`;
    
    // Add character details if provided
    if (formData.gender || formData.age || formData.ethnicity || formData.pose || formData.clothing) {
        promptMessage += '\n\n‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£:';
        if (formData.gender) promptMessage += `\n- ‡πÄ‡∏û‡∏®: ${formData.gender === 'male' ? '‡∏ä‡∏≤‡∏¢' : formData.gender === 'female' ? '‡∏´‡∏ç‡∏¥‡∏á' : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`;
        if (formData.age) promptMessage += `\n- ‡∏≠‡∏≤‡∏¢‡∏∏: ${formData.age} ‡∏õ‡∏µ`;
        if (formData.ethnicity) promptMessage += `\n- ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥: ${formData.ethnicity}`;
        if (formData.pose) promptMessage += `\n- ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á: ${formData.pose}`;
        if (formData.clothing) promptMessage += `\n- ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏¢: ${formData.clothing}`;
    }
    
    // Add background details
    if (formData.location || formData.time || formData.atmosphere) {
        promptMessage += '\n\n‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á:';
        if (formData.location) promptMessage += `\n- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${formData.location}`;
        if (formData.time) promptMessage += `\n- ‡πÄ‡∏ß‡∏•‡∏≤: ${formData.time}`;
        if (formData.atmosphere) promptMessage += `\n- ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®: ${formData.atmosphere}`;
    }
    
    // Add camera settings
    if (formData.cameraAngle || formData.lens || formData.aperture || formData.iso) {
        promptMessage += '\n\n‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á:';
        if (formData.cameraAngle) promptMessage += `\n- ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á: ${formData.cameraAngle}`;
        if (formData.lens) promptMessage += `\n- ‡πÄ‡∏•‡∏ô‡∏™‡πå: ${formData.lens}`;
        if (formData.aperture) promptMessage += `\n- Aperture: ${formData.aperture}`;
        if (formData.iso) promptMessage += `\n- ISO: ${formData.iso}`;
    }
    
    // Add quality settings
    if (formData.resolution || formData.aspectRatio) {
        promptMessage += '\n\n‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û:';
        if (formData.resolution) promptMessage += `\n- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${formData.resolution}`;
        if (formData.aspectRatio) promptMessage += `\n- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô: ${formData.aspectRatio}`;
    }
    
    // Add additional details
    if (formData.additionalDetails) {
        promptMessage += `\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${formData.additionalDetails}`;
    }
    
    // Add style and mood
    if (formData.style) promptMessage += `\n\n‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û: ${formData.style}`;
    if (formData.mood) promptMessage += `\n‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ${formData.mood}`;
    
    // Request to create professional prompt
    promptMessage += '\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏° negative prompt ‡∏î‡πâ‡∏ß‡∏¢';
    
    // Set message and send
    const messageInput = document.getElementById('messageInput');
    messageInput.value = promptMessage;
    
    // Trigger send
    await sendMessage();
}

// ========== DEBUG AND RECOVERY FUNCTIONS ==========

// Debug login function - helps diagnose login issues
window.debugLogin = function(username) {
    console.log('=== DEBUG LOGIN ===');
    console.log('Username:', username);
    
    // Check local accounts
    const localAccounts = JSON.parse(localStorage.getItem('localAccounts') || '{}');
    console.log('Local accounts:', localAccounts);
    
    if (localAccounts[username]) {
        const userId = localAccounts[username].userId;
        console.log('Found user ID:', userId);
        
        // Check user data
        const userData = localStorage.getItem(`userData_${userId}`);
        if (userData) {
            const parsed = JSON.parse(userData);
            console.log('User data found:', parsed);
            
            if (parsed.linkedAccount) {
                console.log('Linked account info:', {
                    username: parsed.linkedAccount.username,
                    hasPassword: !!parsed.linkedAccount.hashedPassword,
                    createdAt: parsed.linkedAccount.createdAt
                });
            }
        } else {
            console.log('No user data found for ID:', userId);
        }
    } else {
        console.log('Username not found in local accounts');
    }
    
    console.log('=== END DEBUG ===');
};

// Recovery function - helps recover account access
window.recoverAccount = function(username) {
    const localAccounts = JSON.parse(localStorage.getItem('localAccounts') || '{}');
    
    if (!localAccounts[username]) {
        console.error('Username not found');
        return;
    }
    
    const userId = localAccounts[username].userId;
    const userData = localStorage.getItem(`userData_${userId}`);
    
    if (!userData) {
        console.error('No user data found');
        return;
    }
    
    const parsed = JSON.parse(userData);
    if (parsed.linkedAccount) {
        // Generate recovery token
        const recoveryToken = btoa(JSON.stringify({
            username: parsed.linkedAccount.username,
            hashedPassword: parsed.linkedAccount.hashedPassword,
            userId: parsed.linkedAccount.userId,
            createdAt: parsed.linkedAccount.createdAt
        }));
        
        console.log('=== RECOVERY TOKEN ===');
        console.log(recoveryToken);
        console.log('Use this token to login');
        return recoveryToken;
    }
    
    console.error('No linked account data found');
};

// ========== END IMAGE PROMPT FORM FUNCTIONS ==========